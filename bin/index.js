#!/usr/bin/env node
module.exports = /******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ 2504: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const parseArgsAndExecute = __nccwpck_require__(4822)

      const dir = process.cwd()
      parseArgsAndExecute(dir, process.argv.slice(2))

      /***/
    },

    /***/ 7305: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const path = __nccwpck_require__(5622)
      const Git = __nccwpck_require__(2596)
      const fs = __nccwpck_require__(5630)
      const _ = __nccwpck_require__(250)
      const { CONFIG_FILENAME, DEFAULT_BRANCH } = __nccwpck_require__(5105)

      async function modifyIgnoredFiles(currentDir, filesToAdd, filesToRemove) {
        try {
          const config = await fs.readJson(
            path.resolve(currentDir, CONFIG_FILENAME)
          )
          const folderRepo = await Git.Repository.open(currentDir)
          await folderRepo.checkoutBranch(
            DEFAULT_BRANCH,
            new Git.CheckoutOptions()
          )
          const commonFileExists = filesToAdd.some(function (v) {
            return filesToRemove.indexOf(v) >= 0
          })
          if (commonFileExists) {
            throw 'Error: Both add and remove operation is being performed on the same file'
          }
          let updatedIgnoredFiles = config.ignore
          if (filesToAdd.length) {
            updatedIgnoredFiles = _.uniq([
              ...updatedIgnoredFiles,
              ...filesToAdd,
            ])
          }
          if (filesToRemove.length) {
            updatedIgnoredFiles = updatedIgnoredFiles.filter(
              (x) => filesToRemove.indexOf(x) === -1
            )
          }
          await fs.writeJson(
            path.resolve(currentDir, CONFIG_FILENAME),
            {
              ...config,
              ignore: updatedIgnoredFiles,
            },
            { spaces: 2 }
          )
          let index = await folderRepo.refreshIndex()
          await index.addByPath(CONFIG_FILENAME)
          await index.write()
          const oid = await index.writeTree()
          const parent = await folderRepo.getCommit(
            await Git.Reference.nameToId(folderRepo, 'HEAD')
          )
          const signature = await folderRepo.defaultSignature()
          await folderRepo.createCommit(
            'HEAD',
            signature,
            signature,
            `updated ${CONFIG_FILENAME}`,
            oid,
            [parent]
          )

          console.log(`Ignored files are sucessfully updated`)
        } catch (e) {
          return Promise.reject(e)
        }
      }

      module.exports = modifyIgnoredFiles

      /***/
    },

    /***/ 4517: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const Git = __nccwpck_require__(2596)
      const fs = __nccwpck_require__(5630)
      const {
        addCommmitMsgPrefix,
        getTempRepo,
        copyFiles,
      } = __nccwpck_require__(918)
      const { CONFIG_FILENAME } = __nccwpck_require__(5105)

      async function initializeFolder(
        repoUrl,
        folderPaths,
        folderRepoPath,
        branchName
      ) {
        try {
          const config = {
            repoUrl,
            folders: folderPaths,
            branch: branchName,
            ignore: [CONFIG_FILENAME],
          }

          const mainRepoPath = await getTempRepo(repoUrl, branchName)
          await fs.ensureDir(folderRepoPath)
          const mainRepo = await Git.Repository.open(mainRepoPath)
          await mainRepo.checkoutBranch(branchName)
          const folderRepo = await Git.Repository.init(folderRepoPath, 0)
          await copyFiles(
            mainRepoPath,
            folderRepoPath,
            folderPaths,
            config.ignore
          )

          await fs.writeJson(`${folderRepoPath}/${CONFIG_FILENAME}`, config, {
            spaces: 2,
          })
          const signature = await folderRepo.defaultSignature()
          let index = await folderRepo.refreshIndex()
          for (let addFilePath of (await folderRepo.getStatus()).map((file) =>
            file.path()
          )) {
            await index.addByPath(addFilePath)
          }
          await index.write()
          const oid = await index.writeTree()
          await folderRepo.createCommit(
            'HEAD',
            signature,
            signature,
            addCommmitMsgPrefix((await mainRepo.getHeadCommit()).sha()),
            oid,
            null
          )
        } catch (e) {
          return Promise.reject(e)
        }
      }

      module.exports = initializeFolder

      /***/
    },

    /***/ 4819: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const Git = __nccwpck_require__(2596)
      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(5630)
      const {
        addCommmitMsgPrefix,
        getTempRepo,
        copyFiles,
        deleteFiles,
        findFile,
      } = __nccwpck_require__(918)
      const { CONFIG_FILENAME, DEFAULT_BRANCH } = __nccwpck_require__(5105)

      async function updateFolderFromMain(currentDir, username, password) {
        try {
          const config = await fs.readJson(
            path.resolve(currentDir, CONFIG_FILENAME)
          )
          let clientRepoUrl = config.repoUrl
          let clientBaseBranchName = config.branch

          if (!clientRepoUrl.includes(`//${username}@`)) {
            clientRepoUrl = clientRepoUrl.replace('//', `//${username}@`)
          }

          const mainRepoPath = await getTempRepo(
            clientRepoUrl,
            clientBaseBranchName,
            username,
            password
          )

          const mainRepo = await Git.Repository.open(mainRepoPath)
          await mainRepo.checkoutBranch(clientBaseBranchName)
          const folderRepo = await Git.Repository.open(currentDir)
          if ((await folderRepo.getStatus()).length) {
            throw 'Error: cannot pull with uncommitted changes'
          }

          await folderRepo.checkoutBranch(DEFAULT_BRANCH)
          await folderRepo.setHead(`refs/heads/${DEFAULT_BRANCH}`)

          await deleteFiles(currentDir, config.ignore)
          await copyFiles(
            mainRepoPath,
            currentDir,
            config.folders,
            config.ignore
          )

          const repoStatus = await folderRepo.getStatus()
          if (repoStatus.length) {
            const signature = await folderRepo.defaultSignature()
            let index = await folderRepo.refreshIndex()
            for (let deletedFilePath of repoStatus
              .filter((file) => file.isDeleted())
              .map((file) => file.path())) {
              await index.remove(deletedFilePath, 0)
            }
            for (let addOrModifiedFilePath of repoStatus
              .filter((file) => !file.isDeleted())
              .map((file) => file.path())) {
              await index.addByPath(addOrModifiedFilePath)
            }
            const keepFiles = findFile(currentDir, '.keep')
            for (let file of keepFiles)
              await index.addByPath(path.relative(currentDir, file))

            await index.write()
            const oid = await index.writeTree()
            const parent = await folderRepo.getCommit(
              await Git.Reference.nameToId(folderRepo, 'HEAD')
            )

            const clientBaseCommitSHA = (await mainRepo.getHeadCommit()).sha()
            await folderRepo.createCommit(
              'HEAD',
              signature,
              signature,
              addCommmitMsgPrefix(clientBaseCommitSHA),
              oid,
              [parent]
            )
            console.log(`This repo is updated successfully`)
          } else {
            console.log(`This repo already up-to-date`)
          }
        } catch (e) {
          return Promise.reject(e)
        }
      }

      module.exports = updateFolderFromMain

      /***/
    },

    /***/ 6013: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const Git = __nccwpck_require__(2596)
      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(5630)
      const {
        getAllFiles,
        getCurBranch,
        getLastGitSliceCommitHash,
        getTempRepo,
        copyFiles,
        pushTempRepo,
        findFile,
        mergeFromOrigin,
      } = __nccwpck_require__(918)
      const { CONFIG_FILENAME, DEFAULT_BRANCH } = __nccwpck_require__(5105)

      async function updateMainFromFolder(
        currentDir,
        branchName,
        commitMsg,
        authorName,
        authorEmail,
        password,
        options = {}
      ) {
        try {
          const { 'force-push': forcePush } = options

          const config = await fs.readJson(
            path.resolve(currentDir, CONFIG_FILENAME)
          )
          let clientRepoUrl = config.repoUrl
          let clientBaseBranchName = config.branch

          if (!clientRepoUrl.includes(`//${authorName}@`)) {
            clientRepoUrl = clientRepoUrl.replace('//', `//${authorName}@`)
          }

          const mainRepoPath = await getTempRepo(
            clientRepoUrl,
            clientBaseBranchName,
            authorName,
            password
          )
          const mainRepo = await Git.Repository.open(mainRepoPath)
          await mainRepo.checkoutBranch(clientBaseBranchName)
          const folderRepo = await Git.Repository.open(currentDir)
          const curBranchName = await getCurBranch(folderRepo)
          if ((await folderRepo.getStatus()).length) {
            throw 'Error: cannot push with uncommitted changes'
          }
          if (curBranchName === DEFAULT_BRANCH) {
            throw 'Error: cannot push from default branch'
          }
          if (
            (
              await mainRepo.getReferenceNames(Git.Reference.TYPE.LISTALL)
            ).indexOf(`refs/heads/${branchName}`) === -1
          ) {
            await folderRepo.checkoutBranch(DEFAULT_BRANCH)
            const commitHash = await getLastGitSliceCommitHash(folderRepo)
            await folderRepo.checkoutBranch(curBranchName)
            await mainRepo.createBranch(
              branchName,
              commitHash,
              0 // gives error if the branch already exists
            )
          } else {
            console.log('Branch already exists')
          }
          await mainRepo.checkoutBranch(branchName)
          await mainRepo.setHead(`refs/heads/${branchName}`)
          if (!forcePush) {
            await mergeFromOrigin(mainRepo, branchName)
          }

          for (let p of config.folders) {
            for (let file of await getAllFiles(path.resolve(mainRepoPath, p))) {
              if (
                !(await Git.Ignore.pathIsIgnored(mainRepo, file)) &&
                config.ignore.indexOf(path.relative(mainRepoPath, file)) === -1
              ) {
                await fs.remove(file)
              }
            }
          }

          await copyFiles(
            currentDir,
            mainRepoPath,
            config.folders,
            config.ignore
          )

          const repoStatus = await mainRepo.getStatus()
          if (repoStatus.length) {
            const signature = Git.Signature.now(authorName, authorEmail)
            let index = await mainRepo.refreshIndex()
            for (let deletedFilePath of repoStatus
              .filter((file) => file.isDeleted())
              .map((file) => file.path())) {
              await index.remove(deletedFilePath, 0)
            }
            for (let addOrModifiedFilePath of repoStatus
              .filter((file) => !file.isDeleted())
              .map((file) => file.path())) {
              await index.addByPath(addOrModifiedFilePath)
            }

            const keepFiles = findFile(mainRepoPath, '.keep')
            for (let file of keepFiles)
              await index.addByPath(path.relative(mainRepoPath, file))

            await index.write()
            const oid = await index.writeTree()
            const parent = await mainRepo.getCommit(
              await Git.Reference.nameToId(mainRepo, 'HEAD')
            )
            await mainRepo.createCommit(
              'HEAD',
              signature,
              signature,
              commitMsg || `[${branchName}] : Implementation`,
              oid,
              [parent]
            )

            await pushTempRepo(clientRepoUrl, branchName)

            console.log(`${clientRepoUrl} is updated`)
          } else {
            await pushTempRepo(clientRepoUrl, branchName)
            console.log(`${clientRepoUrl} already up-to-date`)
          }
        } catch (e) {
          return Promise.reject(e)
        }
      }

      module.exports = updateMainFromFolder

      /***/
    },

    /***/ 5105: /***/ (module) => {
      const CONFIG_FILENAME = 'git-slice.json'

      const INVALID_ARG_MSG =
        'Invalid arguments, following are the usage details of this command:'

      const DEFAULT_BRANCH = process.env.GIT_SLICE_DEFAULT_BRANCH || 'master'

      module.exports = {
        CONFIG_FILENAME,
        INVALID_ARG_MSG,
        DEFAULT_BRANCH,
      }

      /***/
    },

    /***/ 3066: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const getUsage = __nccwpck_require__(9815)
      function showHelp(command) {
        const intro = [
          {
            header: 'git-slice',
            content:
              'A utility which can be used to take out a folder from a git repository, fork it into a new git repository and eventually provide commands to sync changes between both the repositories.',
          },
          {
            header: 'Commands',
          },
        ]

        const init = [
          {
            content: [
              '[bold]{git-slice init} [italic]{folder-name}',
              'Create a new folder in the current directory, initiate it into a new git repository and copy the specified (one or more) folders from the primary repo into it.',
            ],
          },
          {
            optionList: [
              {
                name: 'repo',
                typeLabel: '[underline]{path} (required)',
                description: 'Relative path of the git repository to be sliced',
              },
              {
                name: 'branch',
                typeLabel: '[underline]{branch-name} (required)',
                description: 'Name of the repository branch to be sliced',
              },
              {
                name: 'folder',
                typeLabel: '[underline]{path} (required)',
                description:
                  'Path of the folder from the repository root (use this option multiple times for multiple folders)',
              },
            ],
          },
        ]

        const pull = [
          {
            content: [
              '[bold]{git-slice pull}',
              'Sync updates from the primary repo into the sliced repo.',
            ],
          },
        ]

        const push = [
          {
            content: [
              '[bold]{git-slice push}',
              'Create a new branch in the primary repo, sync changes made in the sliced repo into that branch and commit those changes with the specified commit message.',
            ],
          },
          {
            optionList: [
              {
                name: 'branch',
                typeLabel: '[underline]{branch-name} (required)',
                description:
                  'Name of the branch to be created in the main git repository while pushing',
              },
              {
                name: 'message',
                typeLabel: '[underline]{commit-message} (required)',
                description:
                  'Commit mesasge used to commit changes in the main git reposirory',
              },
              {
                name: 'author-name',
                typeLabel: '[underline]{author-name} (required)',
                description:
                  'Name of the author which will be used to commit in the main repository',
              },
              {
                name: 'author-email',
                typeLabel: '[underline]{author-email} (required)',
                description:
                  'Email of the author which will be used to commit in the main repository',
              },
            ],
          },
        ]

        try {
          switch (command) {
            case 'init':
              console.log(getUsage(init))
              break
            case 'pull':
              console.log(getUsage(pull))
              break
            case 'push':
              console.log(getUsage(push))
              break
            default:
              console.log(getUsage([...intro, ...init, ...pull, ...push]))
          }
        } catch (e) {
          console.log(e)
        }
      }

      module.exports = showHelp

      /***/
    },

    /***/ 4822: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      __nccwpck_require__(2437).config()
      const minimist = __nccwpck_require__(5871)
      const path = __nccwpck_require__(5622)
      const initializeFolder = __nccwpck_require__(4517)
      const updateFolderFromMain = __nccwpck_require__(4819)
      const updateMainFromFolder = __nccwpck_require__(6013)
      const modifyIgnoredFiles = __nccwpck_require__(7305)
      const showHelp = __nccwpck_require__(3066)
      const { INVALID_ARG_MSG, DEFAULT_BRANCH } = __nccwpck_require__(5105)
      const { ensureArray } = __nccwpck_require__(918)

      async function parseArgsAndExecute(currentDir, inputArgs) {
        try {
          const argv = minimist(inputArgs, { boolean: ['force-push'] })
          const {
            _: [command, ...args],
            help,
          } = argv
          if (help) {
            showHelp(command)
            return
          }

          switch (command) {
            case 'init':
              if (argv.repo && argv.folder && args.length) {
                const forkedRepo = args[0]
                const folders = ensureArray(argv.folder)
                const branchName = argv.branch || DEFAULT_BRANCH
                console.log(`Initializing ${forkedRepo} from ${argv.repo}`)
                await initializeFolder(
                  argv.repo,
                  folders,
                  path.resolve(currentDir, forkedRepo),
                  branchName
                )
                console.log(`Successfully forked into ${forkedRepo}`)
              } else {
                console.log(INVALID_ARG_MSG)
                showHelp(command)
              }
              break
            case 'pull':
              await updateFolderFromMain(
                currentDir,
                argv['username'],
                argv['password']
              )
              break
            case 'push':
              const {
                branch,
                message,
                'author-name': authorName,
                'author-email': authorEmail,
                password,
                ...otherArgs
              } = argv
              if (branch && message && authorName && authorEmail) {
                await updateMainFromFolder(
                  currentDir,
                  branch,
                  message,
                  authorName,
                  authorEmail,
                  password,
                  otherArgs
                )
              } else {
                console.log(INVALID_ARG_MSG)
                showHelp(command)
              }
              break
            case 'ignore':
              if (argv.add || argv.remove) {
                const filesToAdd = ensureArray(argv.add)
                const filesToRemove = ensureArray(argv.remove)
                await modifyIgnoredFiles(currentDir, filesToAdd, filesToRemove)
              } else {
                console.log(INVALID_ARG_MSG)
                showHelp(command)
              }
              break
            default:
              showHelp()
          }
        } catch (e) {
          console.log(e)
          console.log(e.stack)
          process.exit(1)
        }
      }

      module.exports = parseArgsAndExecute

      /***/
    },

    /***/ 918: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const fs = __nccwpck_require__(5630)
      const nodeFs = __nccwpck_require__(5747)
      const path = __nccwpck_require__(5622)
      const Git = __nccwpck_require__(2596)
      const readlineSync = __nccwpck_require__(6939)
      const hash = __nccwpck_require__(6148)
      const os = __nccwpck_require__(2087)
      const CliProgress = __nccwpck_require__(299)
      const COMMIT_MSG_PREFIX = 'git-slice:'

      let _username = null
      let _password = null

      const progressBar = new CliProgress.Bar(
        {
          format:
            '{bar} {percentage}% | ETA: {eta_formatted} | {value}/{total}',
        },
        CliProgress.Presets.shades_classic
      )

      async function getAllFiles(dir) {
        try {
          let results = []
          const list = await fs.readdir(dir)
          if (!list.length) return results
          for (let file of list) {
            file = path.resolve(dir, file)
            const stat = await fs.stat(file)
            if (stat && stat.isDirectory()) {
              results = results.concat(await getAllFiles(file))
            } else {
              results.push(file)
            }
          }
          return results
        } catch (e) {
          console.log(e)
          return []
        }
      }

      async function getCurBranch(repo) {
        return (await repo.getCurrentBranch()).name().replace('refs/heads/', '')
      }

      function addCommmitMsgPrefix(msg) {
        return COMMIT_MSG_PREFIX + msg
      }

      function removeCommitMsgPrefix(msg) {
        return msg.replace(COMMIT_MSG_PREFIX, '')
      }

      function ensureArray(input) {
        if (!input) {
          return []
        } else {
          return Array.isArray(input) ? input : [input]
        }
      }

      async function getLastGitSliceCommitHash(repo) {
        const revwalk = Git.Revwalk.create(repo)
        revwalk.pushHead()
        const commits = await revwalk.getCommitsUntil((c) => true)
        const commit = commits
          .find((x) => x.message().indexOf(COMMIT_MSG_PREFIX) === 0)
          .message()
        return commit.replace(COMMIT_MSG_PREFIX, '')
      }

      async function promptForCredentials(url, existingUserName) {
        if (!_username || !_password) {
          console.log(_username, _password)
          progressBar.stop()
          console.log(`Credentials required to access ${url}`)
          _username = readlineSync.question('Username: ')
          _password = readlineSync.question('Password: ', {
            hideEchoBack: true,
          })
        }
        return Git.Cred.userpassPlaintextNew(_username, _password)
      }

      function transferProgress(stats) {
        if (stats.receivedObjects() === 0) {
          progressBar.start(stats.totalObjects(), stats.receivedObjects())
        }
        progressBar.setTotal(stats.totalObjects())
        progressBar.update(stats.receivedObjects())
      }

      async function cloneRepo(mainUrl, mainRepoPath, branch) {
        try {
          await fs.remove(mainRepoPath)
          const repo = await Git.Clone.clone(mainUrl, mainRepoPath, {
            checkoutBranch: branch,
            fetchOpts: {
              callbacks: {
                certificateCheck: function () {
                  return 1
                },
                credentials: promptForCredentials,
                transferProgress,
              },
            },
          })
          progressBar.stop()
          return repo
        } catch (ex) {
          progressBar.stop()
          console.log(`Unable to clone ${mainUrl}: `, ex)
          throw ex
        }
      }

      async function updateFromOrigin(mainUrl, repo, branch) {
        console.log('Pulling', mainUrl)
        try {
          await repo.fetch('origin', {
            callbacks: {
              credentials: promptForCredentials,
              transferProgress,
            },
          })
          progressBar.stop()
          await repo.mergeBranches(branch, `origin/${branch}`)
        } catch (e) {
          progressBar.stop()
          console.log(`Unable to update ${mainUrl}: `, ex)
          throw ex
        }
      }

      async function connectToRemote(repo, remote = 'origin') {
        const repoOrigin = await repo.getRemote(remote)

        await repoOrigin.connect(Git.Enums.DIRECTION.FETCH, {
          credentials: promptForCredentials,
          certificateCheck() {
            return 1
          },
        })

        return repoOrigin
      }

      async function headExistInRemote(repo, remote, head) {
        const origin = await connectToRemote(repo, remote)
        const references = await origin.referenceList()

        const ref = references.find((reference) => reference.name() === head)

        origin.disconnect()

        return ref
      }

      async function mergeFromOrigin(repo, branchName) {
        try {
          const remoteBranch = await headExistInRemote(
            repo,
            'origin',
            `refs/heads/${branchName}`
          )

          if (!remoteBranch) return

          console.log(`Updating branch ${branchName} by pulling from origin`)
          await repo.mergeBranches(branchName, `origin/${branchName}`)
        } catch (error) {
          console.log(`Unable to update branch ${branchName}: `, error)
          throw error
        }
      }

      async function getTempRepo(mainUrl, branch, username, password) {
        if (username && password) {
          _username = username
          _password = password
        }
        const mainRepoPath = getTempRepoPath(mainUrl)
        try {
          // Git repo exists so lets just update it
          const repo = await Git.Repository.open(mainRepoPath)
          const origin = await repo.getRemote('origin')

          if (origin.url() === mainUrl) {
            await updateFromOrigin(origin.url(), repo, branch)
          } else {
            await cloneRepo(mainUrl, mainRepoPath, branch)
          }
        } catch (e) {
          // Git repo does not exits so lets clone it
          await cloneRepo(mainUrl, mainRepoPath, branch)
        }
        return mainRepoPath
      }

      function getTempRepoPath(url) {
        return path.join(os.tmpdir(), 'git-slice', hash(url).toString())
      }

      async function pushTempRepo(repoUrl, branch) {
        try {
          const mainRepoPath = getTempRepoPath(repoUrl)
          const repo = await Git.Repository.open(mainRepoPath)
          const origin = await repo.getRemote('origin')
          await origin.push([`+refs/heads/${branch}:refs/heads/${branch}`], {
            callbacks: {
              credentials: promptForCredentials,
              transferProgress,
            },
          })
          progressBar.stop()
        } catch (e) {
          progressBar.stop()
          return Promise.reject(`Unable to push to ${repoUrl}: `, e.toString())
        }
      }

      async function copyFiles(source, destination, folders, ignored) {
        const symbolicLinks = []
        const repo = await Git.Repository.open(source)
        const ignoredFiles = ignored.map((f) => path.resolve(source, f))
        for (let p of folders) {
          const allFiles = await getAllFiles(path.resolve(source, p))
          for (let sourceFile of allFiles) {
            const isGitIgnored = await Git.Ignore.pathIsIgnored(
              repo,
              sourceFile
            )
            if (!isGitIgnored && ignoredFiles.indexOf(sourceFile) === -1) {
              const stats = nodeFs.lstatSync(sourceFile)
              if (stats.isSymbolicLink()) {
                symbolicLinks.push(sourceFile)
              } else {
                const desFile = sourceFile.replace(source, destination)
                await fs.ensureFile(desFile)
                await fs.copy(sourceFile, desFile)
                nodeFs.chmodSync(
                  desFile,
                  (stats.mode & parseInt('777', 8)).toString(8)
                )
              }
            }
          }
        }
        for (let sourceFile of symbolicLinks) {
          const desFile = sourceFile.replace(source, destination)
          await fs.ensureDir(path.resolve(desFile, '../'))
          nodeFs.symlinkSync(nodeFs.readlinkSync(sourceFile), desFile)
        }
      }

      async function deleteFiles(source, ignored) {
        const repo = await Git.Repository.open(source)
        const ignoredFiles = ignored.map((f) => path.resolve(source, f))
        for (let file of await getAllFiles(source)) {
          const isGitIgnored = await Git.Ignore.pathIsIgnored(repo, file)
          if (!isGitIgnored && ignoredFiles.indexOf(file) === -1) {
            await fs.remove(file)
          }
        }
      }

      function findFile(startPath, filter) {
        if (!fs.existsSync(startPath)) {
          console.log('This is not a directory', startPath)
          return
        }
        const output = []
        const files = fs.readdirSync(startPath)
        for (var i = 0; i < files.length; i++) {
          var filename = path.join(startPath, files[i])
          var stat = fs.lstatSync(filename)
          if (stat.isDirectory()) {
            output.push(...findFile(filename, filter)) //recurse
          } else if (filename.indexOf(filter) >= 0) {
            output.push(filename)
          }
        }
        return output
      }

      module.exports = {
        getAllFiles,
        getCurBranch,
        addCommmitMsgPrefix,
        removeCommitMsgPrefix,
        ensureArray,
        getLastGitSliceCommitHash,
        getTempRepo,
        copyFiles,
        deleteFiles,
        pushTempRepo,
        getTempRepoPath,
        findFile,
        mergeFromOrigin,
        cloneRepo,
      }

      /***/
    },

    /***/ 5459: /***/ function (module) {
      ;(function (global, factory) {
        true ? (module.exports = factory()) : 0
      })(this, function () {
        'use strict'

        /**
         * Takes any input and guarantees an array back.
         *
         * - converts array-like objects (e.g. `arguments`) to a real array
         * - converts `undefined` to an empty array
         * - converts any another other, singular value (including `null`) into an array containing that value
         * - ignores input which is already an array
         *
         * @module array-back
         * @example
         * > const arrayify = require('array-back')
         *
         * > arrayify(undefined)
         * []
         *
         * > arrayify(null)
         * [ null ]
         *
         * > arrayify(0)
         * [ 0 ]
         *
         * > arrayify([ 1, 2 ])
         * [ 1, 2 ]
         *
         * > function f(){ return arrayify(arguments); }
         * > f(1,2,3)
         * [ 1, 2, 3 ]
         */

        function isObject(input) {
          return typeof input === 'object' && input !== null
        }

        function isArrayLike(input) {
          return isObject(input) && typeof input.length === 'number'
        }

        /**
         * @param {*} - the input value to convert to an array
         * @returns {Array}
         * @alias module:array-back
         */
        function arrayify(input) {
          if (Array.isArray(input)) {
            return input
          } else {
            if (input === undefined) {
              return []
            } else if (isArrayLike(input)) {
              return Array.prototype.slice.call(input)
            } else {
              return [input]
            }
          }
        }

        /* Control Sequence Initiator */
        const csi = '\x1b['

        /**
         * @exports ansi-escape-sequences
         * @typicalname ansi
         * @example
         * const ansi = require('ansi-escape-sequences')
         */
        const ansi = {}

        /**
         * Various formatting styles (aka Select Graphic Rendition codes).
         * @enum {string}
         * @example
         * console.log(ansi.style.red + 'this is red' + ansi.style.reset)
         */
        ansi.style = {
          reset: '\x1b[0m',
          bold: '\x1b[1m',
          italic: '\x1b[3m',
          underline: '\x1b[4m',
          fontDefault: '\x1b[10m',
          font2: '\x1b[11m',
          font3: '\x1b[12m',
          font4: '\x1b[13m',
          font5: '\x1b[14m',
          font6: '\x1b[15m',
          imageNegative: '\x1b[7m',
          imagePositive: '\x1b[27m',
          black: '\x1b[30m',
          red: '\x1b[31m',
          green: '\x1b[32m',
          yellow: '\x1b[33m',
          blue: '\x1b[34m',
          magenta: '\x1b[35m',
          cyan: '\x1b[36m',
          white: '\x1b[37m',
          grey: '\x1b[90m',
          gray: '\x1b[90m',
          'bg-black': '\x1b[40m',
          'bg-red': '\x1b[41m',
          'bg-green': '\x1b[42m',
          'bg-yellow': '\x1b[43m',
          'bg-blue': '\x1b[44m',
          'bg-magenta': '\x1b[45m',
          'bg-cyan': '\x1b[46m',
          'bg-white': '\x1b[47m',
          'bg-grey': '\x1b[100m',
          'bg-gray': '\x1b[100m',
        }

        /**
         * style enum - used by `ansi.styles()`.
         * @enum {number}
         * @private
         */
        const eStyles = {
          reset: 0,
          bold: 1,
          italic: 3,
          underline: 4,
          imageNegative: 7,
          fontDefault: 10,
          font2: 11,
          font3: 12,
          font4: 13,
          font5: 14,
          font6: 15,
          imagePositive: 27,
          black: 30,
          red: 31,
          green: 32,
          yellow: 33,
          blue: 34,
          magenta: 35,
          cyan: 36,
          white: 37,
          grey: 90,
          gray: 90,
          'bg-black': 40,
          'bg-red': 41,
          'bg-green': 42,
          'bg-yellow': 43,
          'bg-blue': 44,
          'bg-magenta': 45,
          'bg-cyan': 46,
          'bg-white': 47,
          'bg-grey': 100,
          'bg-gray': 100,
        }

        /**
         * Returns an ansi sequence setting one or more effects
         * @param {string | string[]} - a style, or list or styles
         * @returns {string}
         * @example
         * > ansi.styles('green')
         * '\u001b[32m'
         *
         * > ansi.styles([ 'green', 'underline' ])
         * '\u001b[32;4m'
         */
        ansi.styles = function (effectArray) {
          effectArray = arrayify(effectArray)
          return (
            csi +
            effectArray
              .map(function (effect) {
                return eStyles[effect]
              })
              .join(';') +
            'm'
          )
        }

        /**
         * A convenience function, applying the provided styles to the input string and then resetting.
         *
         * Inline styling can be applied using the syntax `[style-list]{text to format}`, where `style-list` is a space-separated list of styles from {@link module:ansi-escape-sequences.style ansi.style}. For example `[bold white bg-red]{bold white text on a red background}`.
         *
         * @param {string} - the string to format
         * @param [styleArray] {string[]} - a list of styles to add to the input string
         * @returns {string}
         * @example
         * > ansi.format('what?', 'green')
         * '\u001b[32mwhat?\u001b[0m'
         *
         * > ansi.format('what?', ['green', 'bold'])
         * '\u001b[32;1mwhat?\u001b[0m'
         *
         * > ansi.format('[green bold]{what?}')
         * '\u001b[32;1mwhat?\u001b[0m'
         */
        ansi.format = function (str, styleArray) {
          const re = /\[([\w\s-]+)\]{([^]*?)}/
          let matches
          if (!str) return ''

          while ((matches = str.match(re))) {
            const inlineStyles = matches[1].split(/\s+/)
            const inlineString = matches[2]
            str = str.replace(
              matches[0],
              ansi.format(inlineString, inlineStyles)
            )
          }

          return styleArray && styleArray.length
            ? ansi.styles(styleArray) + str + ansi.style.reset
            : str
        }

        /**
         * cursor-related sequences
         */
        ansi.cursor = {
          /**
           * Moves the cursor `lines` cells up. If the cursor is already at the edge of the screen, this has no effect
           * @param [lines=1] {number}
           * @return {string}
           */
          up: function (lines) {
            return csi + (lines || 1) + 'A'
          },

          /**
           * Moves the cursor `lines` cells down. If the cursor is already at the edge of the screen, this has no effect
           * @param [lines=1] {number}
           * @return {string}
           */
          down: function (lines) {
            return csi + (lines || 1) + 'B'
          },

          /**
           * Moves the cursor `lines` cells forward. If the cursor is already at the edge of the screen, this has no effect
           * @param [lines=1] {number}
           * @return {string}
           */
          forward: function (lines) {
            return csi + (lines || 1) + 'C'
          },

          /**
           * Moves the cursor `lines` cells back. If the cursor is already at the edge of the screen, this has no effect
           * @param [lines=1] {number}
           * @return {string}
           */
          back: function (lines) {
            return csi + (lines || 1) + 'D'
          },

          /**
           * Moves cursor to beginning of the line n lines down.
           * @param [lines=1] {number}
           * @return {string}
           */
          nextLine: function (lines) {
            return csi + (lines || 1) + 'E'
          },

          /**
           * Moves cursor to beginning of the line n lines up.
           * @param [lines=1] {number}
           * @return {string}
           */
          previousLine: function (lines) {
            return csi + (lines || 1) + 'F'
          },

          /**
           * Moves the cursor to column n.
           * @param n {number} - column number
           * @return {string}
           */
          horizontalAbsolute: function (n) {
            return csi + n + 'G'
          },

          /**
           * Moves the cursor to row n, column m. The values are 1-based, and default to 1 (top left corner) if omitted.
           * @param n {number} - row number
           * @param m {number} - column number
           * @return {string}
           */
          position: function (n, m) {
            return csi + (n || 1) + ';' + (m || 1) + 'H'
          },

          /**
           * Hides the cursor
           */
          hide: csi + '?25l',

          /**
           * Shows the cursor
           */
          show: csi + '?25h',
        }

        /**
         * erase sequences
         */
        ansi.erase = {
          /**
           * Clears part of the screen. If n is 0 (or missing), clear from cursor to end of screen. If n is 1, clear from cursor to beginning of the screen. If n is 2, clear entire screen.
           * @param n {number}
           * @return {string}
           */
          display: function (n) {
            return csi + (n || 0) + 'J'
          },

          /**
           * Erases part of the line. If n is zero (or missing), clear from cursor to the end of the line. If n is one, clear from cursor to beginning of the line. If n is two, clear entire line. Cursor position does not change.
           * @param n {number}
           * @return {string}
           */
          inLine: function (n) {
            return csi + (n || 0) + 'K'
          },
        }

        return ansi
      })

      /***/
    },

    /***/ 364: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      /**
       * @module array-back
       * @example
       * const arrayify = require('array-back')
       */
      module.exports = arrayify

      /**
       * Takes any input and guarantees an array back.
       *
       * - converts array-like objects (e.g. `arguments`) to a real array
       * - converts `undefined` to an empty array
       * - converts any another other, singular value (including `null`) into an array containing that value
       * - ignores input which is already an array
       *
       * @param {*} - the input value to convert to an array
       * @returns {Array}
       * @alias module:array-back
       * @example
       * > a.arrayify(undefined)
       * []
       *
       * > a.arrayify(null)
       * [ null ]
       *
       * > a.arrayify(0)
       * [ 0 ]
       *
       * > a.arrayify([ 1, 2 ])
       * [ 1, 2 ]
       *
       * > function f(){ return a.arrayify(arguments); }
       * > f(1,2,3)
       * [ 1, 2, 3 ]
       */
      function arrayify(input) {
        const t = __nccwpck_require__(8652)
        if (Array.isArray(input)) {
          return input
        } else {
          if (input === undefined) {
            return []
          } else if (t.isArrayLike(input)) {
            return Array.prototype.slice.call(input)
          } else {
            return [input]
          }
        }
      }

      /***/
    },

    /***/ 3000: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var _readline = __nccwpck_require__(1058)

      // Progress-Bar constructor
      function Bar(opt, preset) {
        // options set ?
        opt = opt || {}

        // preset set ?
        var options = preset || {}

        // merge options - take precedence over preset
        for (var attb in opt) {
          options[attb] = opt[attb]
        }

        // the update timer
        this.timer = null

        // the current bar value
        this.value = 0

        // the end value of the bar
        this.total = 100

        // the max update rate in fps (redraw will only triggered on value change)
        this.throttleTime = 1000 / (options.fps || 10)

        // the output stream to write on
        this.stream = options.stream || process.stderr

        // clear on finish ?
        this.clearOnComplete = options.clearOnComplete || false

        // stop on finish ?
        this.stopOnComplete = options.stopOnComplete || false

        // last drawn string - only render on change!
        this.lastDrawnString = null

        // size of the progressbar in chars
        this.barsize = options.barsize || 40

        // hide the cursor ?
        this.hideCursor = options.hideCursor || false

        // pre-render bar strings (performance)
        this.barCompleteString = new Array(this.barsize + 1).join(
          options.barCompleteChar || '='
        )
        this.barIncompleteString = new Array(this.barsize + 1).join(
          options.barIncompleteChar || '-'
        )

        // the bar format
        this.format =
          options.format ||
          'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}'

        // start time (used for eta calculation)
        this.startTime = null

        // last update time
        this.lastRedraw = Date.now()

        // the number of results to average ETA over
        this.etaBuffer = options.etaBuffer || 10

        // eta buffer with initial values
        this.eta = {}

        // payload data
        this.payload = {}
      }

      // internal render function
      Bar.prototype.render = function () {
        this.stopTimer()

        // copy format string
        var s = this.format

        // calculate the normalized current progress
        var progress = this.value / this.total

        // handle NaN Errors caused by total=0. Set to complete in this case
        if (isNaN(progress)) {
          progress = 1.0
        }

        // limiter
        progress = Math.min(Math.max(progress, 0.0), 1.0)

        // generate bar string by stripping the pre-rendered strings
        var b =
          this.barCompleteString.substr(
            0,
            Math.round(progress * this.barsize)
          ) +
          this.barIncompleteString.substr(
            0,
            Math.round((1.0 - progress) * this.barsize)
          )

        // limit the bar-size (can cause n+1 chars in some numerical situation)
        b = b.substr(0, this.barsize)

        // calculate progress in percent
        var percentage = Math.round(progress * 100) + ''

        // calculate elapsed time
        var elapsedTime = Math.round((Date.now() - this.startTime) / 1000)
        var elapsedTimef = this.formatTime(elapsedTime, 1)

        // calculate eta
        var eta = this.eta.time
        var etaf = this.formatTime(eta, 5)

        // assign placeholder tokens
        s = s
          .replace(/\{bar}/gi, b)
          .replace(/\{percentage}/gi, percentage)
          .replace(/\{total}/gi, this.total + '')
          .replace(/\{value}/gi, this.value + '')
          .replace(/\{eta}/gi, eta + '')
          .replace(/\{eta_formatted}/gi, etaf + '')
          .replace(/\{duration}/gi, elapsedTime + '')
          .replace(/\{duration_formatted}/gi, elapsedTimef + '')

        // assign payload placeholder tokens
        for (var key in this.payload) {
          var pattern = RegExp('{' + key + '}', 'gi')
          s = s.replace(pattern, this.payload[key])
        }

        // string changed ? only trigger redraw on change!
        if (this.lastDrawnString != s) {
          // set cursor to start of line
          _readline.cursorTo(this.stream, 0, null)

          // write output
          this.stream.write(s)

          // clear to the right from cursor
          _readline.clearLine(this.stream, 1)

          // store string
          this.lastDrawnString = s

          // set last redraw time
          this.lastRedraw = Date.now()
        }

        // next update
        this.timer = setTimeout(this.render.bind(this), this.throttleTime * 2)
      }

      // format a number of seconds into hours and minutes as appropriate
      Bar.prototype.formatTime = function (t, roundToMultipleOf) {
        var round = function (input) {
          if (roundToMultipleOf) {
            return roundToMultipleOf * Math.round(input / roundToMultipleOf)
          } else {
            return input
          }
        }
        if (t > 3600) {
          return Math.floor(t / 3600) + 'h' + round((t % 3600) / 60) + 'm'
        } else if (t > 60) {
          return Math.floor(t / 60) + 'm' + round(t % 60) + 's'
        } else if (t > 10) {
          return round(t) + 's'
        } else {
          return t + 's'
        }
      }

      // start the progress bar
      Bar.prototype.start = function (total, startValue, payload) {
        // set initial values
        this.value = startValue || 0
        this.total = typeof total !== 'undefined' && total >= 0 ? total : 100
        this.payload = payload || {}

        this.startTime = Date.now()
        this.lastDrawnString = ''

        // progress is only visible in TTY mode!
        if (!this.stream.isTTY) {
          return
        }

        // hide the cursor
        if (this.hideCursor) {
          this.stream.write('\033[?25l')
        }

        // timer already active ?
        this.stopTimer()

        // initialize eta buffer
        this.eta = {
          valueBuffer: [this.value],
          timeBuffer: [this.startTime],
          time: 0,
        }

        // redraw on start!
        this.render()
      }

      // stop the bar
      Bar.prototype.stop = function () {
        // timer inactive ?
        if (!this.timer) {
          return
        }

        // trigger final rendering
        this.render()
        this.stopTimer()

        // clear line on complete ?
        if (this.clearOnComplete && this.stream.isTTY) {
          _readline.cursorTo(this.stream, 0, null)
          _readline.clearLine(this.stream, 0)
        } else {
          // new line on complete
          this.stream.write('\n')
        }

        // show the cursor
        if (this.hideCursor) {
          this.stream.write('\033[?25h')
        }
      }

      // update the bar value
      Bar.prototype.update = function (current, payload) {
        // update value
        this.value = current

        // timer inactive ?
        if (!this.timer) {
          return
        }

        // add new values
        this.eta.valueBuffer.push(current)
        this.eta.timeBuffer.push(Date.now())

        var payloadData = payload || {}
        for (var key in payloadData) {
          this.payload[key] = payloadData[key]
        }

        // throttle the update or force update ?
        if (this.lastRedraw + this.throttleTime < Date.now()) {
          this.calculateETA()
          this.render()
        }
        if (this.value >= this.getTotal() && this.stopOnComplete) {
          this.stop()
        }
      }

      // update the bar value
      Bar.prototype.increment = function (step, payload) {
        step = step || 1
        this.update(this.value + step, payload)
      }

      // get the total (limit) value
      Bar.prototype.getTotal = function () {
        return this.total
      }

      // set the total (limit) value
      Bar.prototype.setTotal = function (total) {
        if (typeof total !== 'undefined' && total >= 0) {
          this.total = total
        }
      }

      // internal - stop the current timer
      Bar.prototype.stopTimer = function () {
        // stop the timer
        if (this.timer) {
          clearTimeout(this.timer)
        }
        this.timer = null
      }

      // internal - eta calculation
      Bar.prototype.calculateETA = function () {
        var l = this.eta.valueBuffer.length
        var buffer = Math.min(this.etaBuffer, l)

        var v_diff =
          this.eta.valueBuffer[l - 1] - this.eta.valueBuffer[l - buffer]
        var t_diff =
          this.eta.timeBuffer[l - 1] - this.eta.timeBuffer[l - buffer]

        // get progress per ms
        var vt_rate = v_diff / t_diff

        // remaining
        var remaining = this.total - this.value

        // eq: vt_rate *x = total
        var eta = remaining / vt_rate / 1000

        this.eta = {
          valueBuffer: this.eta.valueBuffer.slice(-this.etaBuffer),
          timeBuffer: this.eta.timeBuffer.slice(-this.etaBuffer),
          time: Math.ceil(eta),
        }
      }

      module.exports = Bar

      /***/
    },

    /***/ 299: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      // sub-module access
      module.exports = {
        Bar: __nccwpck_require__(3000),
        Presets: {
          legacy: __nccwpck_require__(2594),
          shades_classic: __nccwpck_require__(8373),
          shades_grey: __nccwpck_require__(1106),
          rect: __nccwpck_require__(441),
        },
      }

      /***/
    },

    /***/ 2594: /***/ (module) => {
      // cli-progress legacy style as of 1.x
      module.exports = {
        format:
          'progress [{bar}] {percentage}% | ETA: {eta}s | {value}/{total}',
        barCompleteChar: '=',
        barIncompleteChar: '-',
      }

      /***/
    },

    /***/ 441: /***/ (module) => {
      module.exports = {
        format: ' {bar}\u25A0 {percentage}% | ETA: {eta}s | {value}/{total}',
        barCompleteChar: '\u25A0',
        barIncompleteChar: ' ',
      }

      /***/
    },

    /***/ 8373: /***/ (module) => {
      // cli-progress legacy style as of 1.x
      module.exports = {
        format: ' {bar} {percentage}% | ETA: {eta}s | {value}/{total}',
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
      }

      /***/
    },

    /***/ 1106: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var _colors = __nccwpck_require__(3045)

      // cli-progress legacy style as of 1.x
      module.exports = {
        format:
          _colors.grey(' {bar}') +
          ' {percentage}% | ETA: {eta}s | {value}/{total}',
        barCompleteChar: '\u2588',
        barIncompleteChar: '\u2591',
      }

      /***/
    },

    /***/ 3595: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      /*

The MIT License (MIT)

Original Library
  - Copyright (c) Marak Squires

Additional functionality
 - Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

      var colors = {}
      module['exports'] = colors

      colors.themes = {}

      var util = __nccwpck_require__(1669)
      var ansiStyles = (colors.styles = __nccwpck_require__(3104))
      var defineProps = Object.defineProperties
      var newLineRegex = new RegExp(/[\r\n]+/g)

      colors.supportsColor = __nccwpck_require__(662).supportsColor

      if (typeof colors.enabled === 'undefined') {
        colors.enabled = colors.supportsColor() !== false
      }

      colors.enable = function () {
        colors.enabled = true
      }

      colors.disable = function () {
        colors.enabled = false
      }

      colors.stripColors = colors.strip = function (str) {
        return ('' + str).replace(/\x1B\[\d+m/g, '')
      }

      // eslint-disable-next-line no-unused-vars
      var stylize = (colors.stylize = function stylize(str, style) {
        if (!colors.enabled) {
          return str + ''
        }

        var styleMap = ansiStyles[style]

        // Stylize should work for non-ANSI styles, too
        if (!styleMap && style in colors) {
          // Style maps like trap operate as functions on strings;
          // they don't have properties like open or close.
          return colors[style](str)
        }

        return styleMap.open + str + styleMap.close
      })

      var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g
      var escapeStringRegexp = function (str) {
        if (typeof str !== 'string') {
          throw new TypeError('Expected a string')
        }
        return str.replace(matchOperatorsRe, '\\$&')
      }

      function build(_styles) {
        var builder = function builder() {
          return applyStyle.apply(builder, arguments)
        }
        builder._styles = _styles
        // __proto__ is used because we must return a function, but there is
        // no way to create a function with a different prototype.
        builder.__proto__ = proto
        return builder
      }

      var styles = (function () {
        var ret = {}
        ansiStyles.grey = ansiStyles.gray
        Object.keys(ansiStyles).forEach(function (key) {
          ansiStyles[key].closeRe = new RegExp(
            escapeStringRegexp(ansiStyles[key].close),
            'g'
          )
          ret[key] = {
            get: function () {
              return build(this._styles.concat(key))
            },
          }
        })
        return ret
      })()

      var proto = defineProps(function colors() {}, styles)

      function applyStyle() {
        var args = Array.prototype.slice.call(arguments)

        var str = args
          .map(function (arg) {
            // Use weak equality check so we can colorize null/undefined in safe mode
            if (arg != null && arg.constructor === String) {
              return arg
            } else {
              return util.inspect(arg)
            }
          })
          .join(' ')

        if (!colors.enabled || !str) {
          return str
        }

        var newLinesPresent = str.indexOf('\n') != -1

        var nestedStyles = this._styles

        var i = nestedStyles.length
        while (i--) {
          var code = ansiStyles[nestedStyles[i]]
          str = code.open + str.replace(code.closeRe, code.open) + code.close
          if (newLinesPresent) {
            str = str.replace(newLineRegex, function (match) {
              return code.close + match + code.open
            })
          }
        }

        return str
      }

      colors.setTheme = function (theme) {
        if (typeof theme === 'string') {
          console.log(
            'colors.setTheme now only accepts an object, not a string.  ' +
              'If you are trying to set a theme from a file, it is now your (the ' +
              "caller's) responsibility to require the file.  The old syntax " +
              'looked like colors.setTheme(__dirname + ' +
              "'/../themes/generic-logging.js'); The new syntax looks like " +
              'colors.setTheme(require(__dirname + ' +
              "'/../themes/generic-logging.js'));"
          )
          return
        }
        for (var style in theme) {
          ;(function (style) {
            colors[style] = function (str) {
              if (typeof theme[style] === 'object') {
                var out = str
                for (var i in theme[style]) {
                  out = colors[theme[style][i]](out)
                }
                return out
              }
              return colors[theme[style]](str)
            }
          })(style)
        }
      }

      function init() {
        var ret = {}
        Object.keys(styles).forEach(function (name) {
          ret[name] = {
            get: function () {
              return build([name])
            },
          }
        })
        return ret
      }

      var sequencer = function sequencer(map, str) {
        var exploded = str.split('')
        exploded = exploded.map(map)
        return exploded.join('')
      }

      // custom formatter methods
      colors.trap = __nccwpck_require__(1302)
      colors.zalgo = __nccwpck_require__(7743)

      // maps
      colors.maps = {}
      colors.maps.america = __nccwpck_require__(6936)(colors)
      colors.maps.zebra = __nccwpck_require__(2989)(colors)
      colors.maps.rainbow = __nccwpck_require__(5210)(colors)
      colors.maps.random = __nccwpck_require__(3441)(colors)

      for (var map in colors.maps) {
        ;(function (map) {
          colors[map] = function (str) {
            return sequencer(colors.maps[map], str)
          }
        })(map)
      }

      defineProps(colors, init())

      /***/
    },

    /***/ 1302: /***/ (module) => {
      module['exports'] = function runTheTrap(text, options) {
        var result = ''
        text = text || 'Run the trap, drop the bass'
        text = text.split('')
        var trap = {
          a: [
            '\u0040',
            '\u0104',
            '\u023a',
            '\u0245',
            '\u0394',
            '\u039b',
            '\u0414',
          ],
          b: ['\u00df', '\u0181', '\u0243', '\u026e', '\u03b2', '\u0e3f'],
          c: ['\u00a9', '\u023b', '\u03fe'],
          d: ['\u00d0', '\u018a', '\u0500', '\u0501', '\u0502', '\u0503'],
          e: [
            '\u00cb',
            '\u0115',
            '\u018e',
            '\u0258',
            '\u03a3',
            '\u03be',
            '\u04bc',
            '\u0a6c',
          ],
          f: ['\u04fa'],
          g: ['\u0262'],
          h: ['\u0126', '\u0195', '\u04a2', '\u04ba', '\u04c7', '\u050a'],
          i: ['\u0f0f'],
          j: ['\u0134'],
          k: ['\u0138', '\u04a0', '\u04c3', '\u051e'],
          l: ['\u0139'],
          m: ['\u028d', '\u04cd', '\u04ce', '\u0520', '\u0521', '\u0d69'],
          n: ['\u00d1', '\u014b', '\u019d', '\u0376', '\u03a0', '\u048a'],
          o: [
            '\u00d8',
            '\u00f5',
            '\u00f8',
            '\u01fe',
            '\u0298',
            '\u047a',
            '\u05dd',
            '\u06dd',
            '\u0e4f',
          ],
          p: ['\u01f7', '\u048e'],
          q: ['\u09cd'],
          r: ['\u00ae', '\u01a6', '\u0210', '\u024c', '\u0280', '\u042f'],
          s: ['\u00a7', '\u03de', '\u03df', '\u03e8'],
          t: ['\u0141', '\u0166', '\u0373'],
          u: ['\u01b1', '\u054d'],
          v: ['\u05d8'],
          w: ['\u0428', '\u0460', '\u047c', '\u0d70'],
          x: ['\u04b2', '\u04fe', '\u04fc', '\u04fd'],
          y: ['\u00a5', '\u04b0', '\u04cb'],
          z: ['\u01b5', '\u0240'],
        }
        text.forEach(function (c) {
          c = c.toLowerCase()
          var chars = trap[c] || [' ']
          var rand = Math.floor(Math.random() * chars.length)
          if (typeof trap[c] !== 'undefined') {
            result += trap[c][rand]
          } else {
            result += c
          }
        })
        return result
      }

      /***/
    },

    /***/ 7743: /***/ (module) => {
      // please no
      module['exports'] = function zalgo(text, options) {
        text = text || '   he is here   '
        var soul = {
          up: [
            '̍',
            '̎',
            '̄',
            '̅',
            '̿',
            '̑',
            '̆',
            '̐',
            '͒',
            '͗',
            '͑',
            '̇',
            '̈',
            '̊',
            '͂',
            '̓',
            '̈',
            '͊',
            '͋',
            '͌',
            '̃',
            '̂',
            '̌',
            '͐',
            '̀',
            '́',
            '̋',
            '̏',
            '̒',
            '̓',
            '̔',
            '̽',
            '̉',
            'ͣ',
            'ͤ',
            'ͥ',
            'ͦ',
            'ͧ',
            'ͨ',
            'ͩ',
            'ͪ',
            'ͫ',
            'ͬ',
            'ͭ',
            'ͮ',
            'ͯ',
            '̾',
            '͛',
            '͆',
            '̚',
          ],
          down: [
            '̖',
            '̗',
            '̘',
            '̙',
            '̜',
            '̝',
            '̞',
            '̟',
            '̠',
            '̤',
            '̥',
            '̦',
            '̩',
            '̪',
            '̫',
            '̬',
            '̭',
            '̮',
            '̯',
            '̰',
            '̱',
            '̲',
            '̳',
            '̹',
            '̺',
            '̻',
            '̼',
            'ͅ',
            '͇',
            '͈',
            '͉',
            '͍',
            '͎',
            '͓',
            '͔',
            '͕',
            '͖',
            '͙',
            '͚',
            '̣',
          ],
          mid: [
            '̕',
            '̛',
            '̀',
            '́',
            '͘',
            '̡',
            '̢',
            '̧',
            '̨',
            '̴',
            '̵',
            '̶',
            '͜',
            '͝',
            '͞',
            '͟',
            '͠',
            '͢',
            '̸',
            '̷',
            '͡',
            ' ҉',
          ],
        }
        var all = [].concat(soul.up, soul.down, soul.mid)

        function randomNumber(range) {
          var r = Math.floor(Math.random() * range)
          return r
        }

        function isChar(character) {
          var bool = false
          all.filter(function (i) {
            bool = i === character
          })
          return bool
        }

        function heComes(text, options) {
          var result = ''
          var counts
          var l
          options = options || {}
          options['up'] =
            typeof options['up'] !== 'undefined' ? options['up'] : true
          options['mid'] =
            typeof options['mid'] !== 'undefined' ? options['mid'] : true
          options['down'] =
            typeof options['down'] !== 'undefined' ? options['down'] : true
          options['size'] =
            typeof options['size'] !== 'undefined' ? options['size'] : 'maxi'
          text = text.split('')
          for (l in text) {
            if (isChar(l)) {
              continue
            }
            result = result + text[l]
            counts = { up: 0, down: 0, mid: 0 }
            switch (options.size) {
              case 'mini':
                counts.up = randomNumber(8)
                counts.mid = randomNumber(2)
                counts.down = randomNumber(8)
                break
              case 'maxi':
                counts.up = randomNumber(16) + 3
                counts.mid = randomNumber(4) + 1
                counts.down = randomNumber(64) + 3
                break
              default:
                counts.up = randomNumber(8) + 1
                counts.mid = randomNumber(6) / 2
                counts.down = randomNumber(8) + 1
                break
            }

            var arr = ['up', 'mid', 'down']
            for (var d in arr) {
              var index = arr[d]
              for (var i = 0; i <= counts[index]; i++) {
                if (options[index]) {
                  result =
                    result + soul[index][randomNumber(soul[index].length)]
                }
              }
            }
          }
          return result
        }
        // don't summon him
        return heComes(text, options)
      }

      /***/
    },

    /***/ 2857: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var colors = __nccwpck_require__(3595)

      module['exports'] = function () {
        //
        // Extends prototype of native string object to allow for "foo".red syntax
        //
        var addProperty = function (color, func) {
          String.prototype.__defineGetter__(color, func)
        }

        addProperty('strip', function () {
          return colors.strip(this)
        })

        addProperty('stripColors', function () {
          return colors.strip(this)
        })

        addProperty('trap', function () {
          return colors.trap(this)
        })

        addProperty('zalgo', function () {
          return colors.zalgo(this)
        })

        addProperty('zebra', function () {
          return colors.zebra(this)
        })

        addProperty('rainbow', function () {
          return colors.rainbow(this)
        })

        addProperty('random', function () {
          return colors.random(this)
        })

        addProperty('america', function () {
          return colors.america(this)
        })

        //
        // Iterate through all default styles and colors
        //
        var x = Object.keys(colors.styles)
        x.forEach(function (style) {
          addProperty(style, function () {
            return colors.stylize(this, style)
          })
        })

        function applyTheme(theme) {
          //
          // Remark: This is a list of methods that exist
          // on String that you should not overwrite.
          //
          var stringPrototypeBlacklist = [
            '__defineGetter__',
            '__defineSetter__',
            '__lookupGetter__',
            '__lookupSetter__',
            'charAt',
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toLocaleString',
            'toString',
            'valueOf',
            'charCodeAt',
            'indexOf',
            'lastIndexOf',
            'length',
            'localeCompare',
            'match',
            'repeat',
            'replace',
            'search',
            'slice',
            'split',
            'substring',
            'toLocaleLowerCase',
            'toLocaleUpperCase',
            'toLowerCase',
            'toUpperCase',
            'trim',
            'trimLeft',
            'trimRight',
          ]

          Object.keys(theme).forEach(function (prop) {
            if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
              console.log(
                'warn: '.red +
                  ('String.prototype' + prop).magenta +
                  " is probably something you don't want to override.  " +
                  'Ignoring style name'
              )
            } else {
              if (typeof theme[prop] === 'string') {
                colors[prop] = colors[theme[prop]]
                addProperty(prop, function () {
                  return colors[prop](this)
                })
              } else {
                var themePropApplicator = function (str) {
                  var ret = str || this
                  for (var t = 0; t < theme[prop].length; t++) {
                    ret = colors[theme[prop][t]](ret)
                  }
                  return ret
                }
                addProperty(prop, themePropApplicator)
                colors[prop] = function (str) {
                  return themePropApplicator(str)
                }
              }
            }
          })
        }

        colors.setTheme = function (theme) {
          if (typeof theme === 'string') {
            console.log(
              'colors.setTheme now only accepts an object, not a string. ' +
                'If you are trying to set a theme from a file, it is now your (the ' +
                "caller's) responsibility to require the file.  The old syntax " +
                'looked like colors.setTheme(__dirname + ' +
                "'/../themes/generic-logging.js'); The new syntax looks like " +
                'colors.setTheme(require(__dirname + ' +
                "'/../themes/generic-logging.js'));"
            )
            return
          } else {
            applyTheme(theme)
          }
        }
      }

      /***/
    },

    /***/ 3045: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var colors = __nccwpck_require__(3595)
      module['exports'] = colors

      // Remark: By default, colors will add style properties to String.prototype.
      //
      // If you don't wish to extend String.prototype, you can do this instead and
      // native String will not be touched:
      //
      //   var colors = require('colors/safe);
      //   colors.red("foo")
      //
      //
      __nccwpck_require__(2857)()

      /***/
    },

    /***/ 6936: /***/ (module) => {
      module['exports'] = function (colors) {
        return function (letter, i, exploded) {
          if (letter === ' ') return letter
          switch (i % 3) {
            case 0:
              return colors.red(letter)
            case 1:
              return colors.white(letter)
            case 2:
              return colors.blue(letter)
          }
        }
      }

      /***/
    },

    /***/ 5210: /***/ (module) => {
      module['exports'] = function (colors) {
        // RoY G BiV
        var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']
        return function (letter, i, exploded) {
          if (letter === ' ') {
            return letter
          } else {
            return colors[rainbowColors[i++ % rainbowColors.length]](letter)
          }
        }
      }

      /***/
    },

    /***/ 3441: /***/ (module) => {
      module['exports'] = function (colors) {
        var available = [
          'underline',
          'inverse',
          'grey',
          'yellow',
          'red',
          'green',
          'blue',
          'white',
          'cyan',
          'magenta',
          'brightYellow',
          'brightRed',
          'brightGreen',
          'brightBlue',
          'brightWhite',
          'brightCyan',
          'brightMagenta',
        ]
        return function (letter, i, exploded) {
          return letter === ' '
            ? letter
            : colors[
                available[Math.round(Math.random() * (available.length - 2))]
              ](letter)
        }
      }

      /***/
    },

    /***/ 2989: /***/ (module) => {
      module['exports'] = function (colors) {
        return function (letter, i, exploded) {
          return i % 2 === 0 ? letter : colors.inverse(letter)
        }
      }

      /***/
    },

    /***/ 3104: /***/ (module) => {
      /*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

      var styles = {}
      module['exports'] = styles

      var codes = {
        reset: [0, 0],

        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29],

        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        grey: [90, 39],

        brightRed: [91, 39],
        brightGreen: [92, 39],
        brightYellow: [93, 39],
        brightBlue: [94, 39],
        brightMagenta: [95, 39],
        brightCyan: [96, 39],
        brightWhite: [97, 39],

        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgGray: [100, 49],
        bgGrey: [100, 49],

        bgBrightRed: [101, 49],
        bgBrightGreen: [102, 49],
        bgBrightYellow: [103, 49],
        bgBrightBlue: [104, 49],
        bgBrightMagenta: [105, 49],
        bgBrightCyan: [106, 49],
        bgBrightWhite: [107, 49],

        // legacy styles for colors pre v1.0.0
        blackBG: [40, 49],
        redBG: [41, 49],
        greenBG: [42, 49],
        yellowBG: [43, 49],
        blueBG: [44, 49],
        magentaBG: [45, 49],
        cyanBG: [46, 49],
        whiteBG: [47, 49],
      }

      Object.keys(codes).forEach(function (key) {
        var val = codes[key]
        var style = (styles[key] = [])
        style.open = '\u001b[' + val[0] + 'm'
        style.close = '\u001b[' + val[1] + 'm'
      })

      /***/
    },

    /***/ 223: /***/ (module) => {
      'use strict'
      /*
MIT License

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

      module.exports = function (flag, argv) {
        argv = argv || process.argv

        var terminatorPos = argv.indexOf('--')
        var prefix = /^-{1,2}/.test(flag) ? '' : '--'
        var pos = argv.indexOf(prefix + flag)

        return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos)
      }

      /***/
    },

    /***/ 662: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'
      /*
The MIT License (MIT)

Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

      var os = __nccwpck_require__(2087)
      var hasFlag = __nccwpck_require__(223)

      var env = process.env

      var forceColor = void 0
      if (
        hasFlag('no-color') ||
        hasFlag('no-colors') ||
        hasFlag('color=false')
      ) {
        forceColor = false
      } else if (
        hasFlag('color') ||
        hasFlag('colors') ||
        hasFlag('color=true') ||
        hasFlag('color=always')
      ) {
        forceColor = true
      }
      if ('FORCE_COLOR' in env) {
        forceColor =
          env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0
      }

      function translateLevel(level) {
        if (level === 0) {
          return false
        }

        return {
          level: level,
          hasBasic: true,
          has256: level >= 2,
          has16m: level >= 3,
        }
      }

      function supportsColor(stream) {
        if (forceColor === false) {
          return 0
        }

        if (
          hasFlag('color=16m') ||
          hasFlag('color=full') ||
          hasFlag('color=truecolor')
        ) {
          return 3
        }

        if (hasFlag('color=256')) {
          return 2
        }

        if (stream && !stream.isTTY && forceColor !== true) {
          return 0
        }

        var min = forceColor ? 1 : 0

        if (process.platform === 'win32') {
          // Node.js 7.5.0 is the first version of Node.js to include a patch to
          // libuv that enables 256 color output on Windows. Anything earlier and it
          // won't work. However, here we target Node.js 8 at minimum as it is an LTS
          // release, and Node.js 7 is not. Windows 10 build 10586 is the first
          // Windows release that supports 256 colors. Windows 10 build 14931 is the
          // first release that supports 16m/TrueColor.
          var osRelease = os.release().split('.')
          if (
            Number(process.versions.node.split('.')[0]) >= 8 &&
            Number(osRelease[0]) >= 10 &&
            Number(osRelease[2]) >= 10586
          ) {
            return Number(osRelease[2]) >= 14931 ? 3 : 2
          }

          return 1
        }

        if ('CI' in env) {
          if (
            ['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI'].some(function (
              sign
            ) {
              return sign in env
            }) ||
            env.CI_NAME === 'codeship'
          ) {
            return 1
          }

          return min
        }

        if ('TEAMCITY_VERSION' in env) {
          return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION)
            ? 1
            : 0
        }

        if ('TERM_PROGRAM' in env) {
          var version = parseInt(
            (env.TERM_PROGRAM_VERSION || '').split('.')[0],
            10
          )

          switch (env.TERM_PROGRAM) {
            case 'iTerm.app':
              return version >= 3 ? 3 : 2
            case 'Hyper':
              return 3
            case 'Apple_Terminal':
              return 2
            // No default
          }
        }

        if (/-256(color)?$/i.test(env.TERM)) {
          return 2
        }

        if (
          /^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)
        ) {
          return 1
        }

        if ('COLORTERM' in env) {
          return 1
        }

        if (env.TERM === 'dumb') {
          return min
        }

        return min
      }

      function getSupportLevel(stream) {
        var level = supportsColor(stream)
        return translateLevel(level)
      }

      module.exports = {
        supportsColor: getSupportLevel,
        stdout: getSupportLevel(process.stdout),
        stderr: getSupportLevel(process.stderr),
      }

      /***/
    },

    /***/ 9815: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const OptionList = __nccwpck_require__(2107)
      const ContentSection = __nccwpck_require__(4973)
      const arrayify = __nccwpck_require__(364)

      /**
       * @module command-line-usage
       */
      module.exports = commandLineUsage

      /**
       * Generates a usage guide suitable for a command-line app.
       * @param {Section|Section[]} - One of more section objects ({@link module:command-line-usage~content} or {@link module:command-line-usage~optionList}).
       * @returns {string}
       * @alias module:command-line-usage
       */
      function commandLineUsage(sections) {
        sections = arrayify(sections)
        if (sections.length) {
          const output = sections.map((section) => {
            if (section.optionList) {
              return new OptionList(section)
            } else {
              return new ContentSection(section)
            }
          })
          return '\n' + output.join('\n')
        }
      }

      /**
       * A Content section comprises a header and one or more lines of content.
       * @typedef content
       * @property header {string} - The section header, always bold and underlined.
       * @property content {string|string[]|object[]} - Overloaded property, accepting data in one of four formats:
       *
       * 1. A single string (one line of text)
       * 2. An array of strings (multiple lines of text)
       * 3. An array of objects (recordset-style data). In this case, the data will be rendered in table format. The property names of each object are not important, so long as they are consistent throughout the array.
       * 4. An object with two properties - `data` and `options`. In this case, the data and options will be passed directly to the underlying [table layout](https://github.com/75lb/table-layout) module for rendering.
       *
       * @property raw {boolean} - Set to true to avoid indentation and wrapping. Useful for banners.
       * @example
       * Simple string of content. The syntax for ansi formatting is documented [here](https://github.com/75lb/ansi-escape-sequences#module_ansi-escape-sequences.format).
       * ```js
       * {
       *   header: 'A typical app',
       *   content: 'Generates something [italic]{very} important.'
       * }
       * ```
       *
       * An array of strings is interpreted as lines, to be joined by the system newline character.
       * ```js
       * {
       *   header: 'A typical app',
       *   content: [
       *     'First line.',
       *     'Second line.'
       *   ]
       * }
       * ```
       *
       * An array of recordset-style objects are rendered in table layout.
       * ```js
       * {
       *   header: 'A typical app',
       *   content: [
       *     { colA: 'First row, first column.', colB: 'First row, second column.'},
       *     { colA: 'Second row, first column.', colB: 'Second row, second column.'}
       *   ]
       * }
       * ```
       *
       * An object with `data` and `options` properties will be passed directly to the underlying [table layout](https://github.com/75lb/table-layout) module for rendering.
       * ```js
       * {
       *   header: 'A typical app',
       *   content: {
       *     data: [
       *      { colA: 'First row, first column.', colB: 'First row, second column.'},
       *      { colA: 'Second row, first column.', colB: 'Second row, second column.'}
       *     ],
       *     options: {
       *       maxWidth: 60
       *     }
       *   }
       * }
       * ```
       */

      /**
       * A OptionList section adds a table displaying details of the available options.
       * @typedef optionList
       * @property {string} [header] - The section header, always bold and underlined.
       * @property optionList {OptionDefinition[]} - an array of [option definition](https://github.com/75lb/command-line-args#optiondefinition-) objects. In addition to the regular definition properties, command-line-usage will look for:
       *
       * - `description` - a string describing the option.
       * - `typeLabel` - a string to replace the default type string (e.g. `<string>`). It's often more useful to set a more descriptive type label, like `<ms>`, `<files>`, `<command>` etc.
       * @property {string|string[]} [group] - If specified, only options from this particular group will be printed. [Example](https://github.com/75lb/command-line-usage/blob/master/example/groups.js).
       * @property {string|string[]} [hide] - The names of one of more option definitions to hide from the option list. [Example](https://github.com/75lb/command-line-usage/blob/master/example/hide.js).
       * @property {boolean} [reverseNameOrder] - If true, the option alias will be displayed after the name, i.e. `--verbose, -v` instead of `-v, --verbose`).
       *
       * @example
       * {
       *   header: 'Options',
       *   optionList: [
       *     {
       *       name: 'help', alias: 'h', description: 'Display this usage guide.'
       *     },
       *     {
       *       name: 'src', description: 'The input files to process',
       *       multiple: true, defaultOption: true, typeLabel: '[underline]{file} ...'
       *     },
       *     {
       *       name: 'timeout', description: 'Timeout value in ms. This description is needlessly long unless you count testing of the description column maxWidth useful.',
       *       alias: 't', typeLabel: '[underline]{ms}'
       *     }
       *   ]
       * }
       */

      /***/
    },

    /***/ 4973: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const Section = __nccwpck_require__(6590)
      const Content = __nccwpck_require__(5645)

      class ContentSection extends Section {
        constructor(section) {
          super()
          this.header(section.header)

          if (section.content) {
            /* add content without indentation or wrapping */
            if (section.raw) {
              this.add(section.content)
            } else {
              const content = new Content(section.content)
              this.add(content.lines())
            }

            this.emptyLine()
          }
        }
      }

      module.exports = ContentSection

      /***/
    },

    /***/ 5645: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const Table = __nccwpck_require__(5023)
      const ansi = __nccwpck_require__(5459)
      const t = __nccwpck_require__(8652)

      class Content {
        constructor(content) {
          this._content = content
        }

        lines() {
          const content = this._content
          const defaultPadding = { left: '  ', right: ' ' }

          if (content) {
            /* string content */
            if (t.isString(content)) {
              const table = new Table(
                { column: ansi.format(content) },
                {
                  padding: defaultPadding,
                  maxWidth: 80,
                }
              )
              return table.renderLines()

              /* array of strings */
            } else if (Array.isArray(content) && content.every(t.isString)) {
              const rows = content.map((string) => ({
                column: ansi.format(string),
              }))
              const table = new Table(rows, {
                padding: defaultPadding,
                maxWidth: 80,
              })
              return table.renderLines()

              /* array of objects (use table-layout) */
            } else if (
              Array.isArray(content) &&
              content.every(t.isPlainObject)
            ) {
              const table = new Table(
                content.map((row) => ansiFormatRow(row)),
                {
                  padding: defaultPadding,
                }
              )
              return table.renderLines()

              /* { options: object, data: object[] } */
            } else if (t.isPlainObject(content)) {
              if (!content.options || !content.data) {
                throw new Error(
                  'must have an "options" or "data" property\n' +
                    JSON.stringify(content)
                )
              }
              const options = Object.assign(
                { padding: defaultPadding },
                content.options
              )

              /* convert nowrap to noWrap to avoid breaking compatibility */
              if (options.columns) {
                options.columns = options.columns.map((column) => {
                  if (column.nowrap) {
                    column.noWrap = column.nowrap
                    delete column.nowrap
                  }
                  return column
                })
              }

              const table = new Table(
                content.data.map((row) => ansiFormatRow(row)),
                options
              )
              return table.renderLines()
            } else {
              const message = `invalid input - 'content' must be a string, array of strings, or array of plain objects:\n\n${JSON.stringify(
                content
              )}`
              throw new Error(message)
            }
          }
        }
      }

      function ansiFormatRow(row) {
        for (const key in row) {
          row[key] = ansi.format(row[key])
        }
        return row
      }

      module.exports = Content

      /***/
    },

    /***/ 2107: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const Section = __nccwpck_require__(6590)
      const Table = __nccwpck_require__(5023)
      const ansi = __nccwpck_require__(5459)
      const t = __nccwpck_require__(8652)
      const arrayify = __nccwpck_require__(364)

      class OptionList extends Section {
        constructor(data) {
          super()
          let definitions = arrayify(data.optionList)
          const hide = arrayify(data.hide)
          const groups = arrayify(data.group)

          /* filter out hidden definitions */
          if (hide.length) {
            definitions = definitions.filter((definition) => {
              return hide.indexOf(definition.name) === -1
            })
          }

          if (data.header) this.header(data.header)

          if (groups.length) {
            definitions = definitions.filter((def) => {
              const noGroupMatch =
                groups.indexOf('_none') > -1 && !t.isDefined(def.group)
              const groupMatch = intersect(arrayify(def.group), groups)
              if (noGroupMatch || groupMatch) return def
            })
          }

          const rows = definitions.map((def) => {
            return {
              option: getOptionNames(def, 'bold', data.reverseNameOrder),
              description: ansi.format(def.description),
            }
          })

          const table = new Table(rows, {
            padding: { left: '  ', right: ' ' },
            columns: [
              { name: 'option', noWrap: true },
              { name: 'description', maxWidth: 80 },
            ],
          })
          this.add(table.renderLines())

          this.emptyLine()
        }
      }

      function getOptionNames(definition, optionNameStyles, reverseNameOrder) {
        let type = definition.type ? definition.type.name.toLowerCase() : ''
        const multiple = definition.multiple ? '[]' : ''
        if (type) {
          type = type === 'boolean' ? '' : `[underline]{${type}${multiple}}`
        }
        type = ansi.format(definition.typeLabel || type)

        let result = ''
        if (definition.alias) {
          if (reverseNameOrder) {
            result = `${ansi.format(
              `--${definition.name}`,
              optionNameStyles
            )}, ${ansi.format(
              '-' + definition.alias,
              optionNameStyles
            )} ${type}`
          } else {
            result = `${ansi.format(
              '-' + definition.alias,
              optionNameStyles
            )}, ${ansi.format(
              `--${definition.name} ${type}`,
              optionNameStyles
            )}`
          }
        } else {
          result = `${ansi.format(
            `--${definition.name}`,
            optionNameStyles
          )} ${type}`
        }
        return result
      }

      function intersect(arr1, arr2) {
        return arr1.some(function (item1) {
          return arr2.some(function (item2) {
            return item1 === item2
          })
        })
      }

      module.exports = OptionList

      /***/
    },

    /***/ 6590: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const ansi = __nccwpck_require__(5459)
      const os = __nccwpck_require__(2087)
      const arrayify = __nccwpck_require__(364)

      class Section {
        constructor() {
          this.list = []
        }
        add(content) {
          arrayify(content).forEach((line) => this.list.push(ansi.format(line)))
        }
        emptyLine() {
          this.list.push('')
        }
        header(text) {
          if (text) {
            this.add(ansi.format(text, ['underline', 'bold']))
            this.emptyLine()
          }
        }
        toString() {
          return this.list.join(os.EOL)
        }
      }

      module.exports = Section

      /***/
    },

    /***/ 1705: /***/ (module) => {
      'use strict'
      /*!
       * @description Recursive object extending
       * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
       * @license MIT
       *
       * The MIT License (MIT)
       *
       * Copyright (c) 2013-2018 Viacheslav Lotsmanov
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy of
       * this software and associated documentation files (the "Software"), to deal in
       * the Software without restriction, including without limitation the rights to
       * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
       * the Software, and to permit persons to whom the Software is furnished to do so,
       * subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
       * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
       * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
       * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
       * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
       */

      function isSpecificValue(val) {
        return val instanceof Buffer ||
          val instanceof Date ||
          val instanceof RegExp
          ? true
          : false
      }

      function cloneSpecificValue(val) {
        if (val instanceof Buffer) {
          var x = Buffer.alloc
            ? Buffer.alloc(val.length)
            : new Buffer(val.length)
          val.copy(x)
          return x
        } else if (val instanceof Date) {
          return new Date(val.getTime())
        } else if (val instanceof RegExp) {
          return new RegExp(val)
        } else {
          throw new Error('Unexpected situation')
        }
      }

      /**
       * Recursive cloning array.
       */
      function deepCloneArray(arr) {
        var clone = []
        arr.forEach(function (item, index) {
          if (typeof item === 'object' && item !== null) {
            if (Array.isArray(item)) {
              clone[index] = deepCloneArray(item)
            } else if (isSpecificValue(item)) {
              clone[index] = cloneSpecificValue(item)
            } else {
              clone[index] = deepExtend({}, item)
            }
          } else {
            clone[index] = item
          }
        })
        return clone
      }

      function safeGetProperty(object, property) {
        return property === '__proto__' ? undefined : object[property]
      }

      /**
       * Extening object that entered in first argument.
       *
       * Returns extended object or false if have no target object or incorrect type.
       *
       * If you wish to clone source object (without modify it), just use empty new
       * object as first argument, like this:
       *   deepExtend({}, yourObj_1, [yourObj_N]);
       */
      var deepExtend = (module.exports = function (/*obj_1, [obj_2], [obj_N]*/) {
        if (arguments.length < 1 || typeof arguments[0] !== 'object') {
          return false
        }

        if (arguments.length < 2) {
          return arguments[0]
        }

        var target = arguments[0]

        // convert arguments to array and cut off target object
        var args = Array.prototype.slice.call(arguments, 1)

        var val, src, clone

        args.forEach(function (obj) {
          // skip argument if isn't an object, is null, or is an array
          if (typeof obj !== 'object' || obj === null || Array.isArray(obj)) {
            return
          }

          Object.keys(obj).forEach(function (key) {
            src = safeGetProperty(target, key) // source value
            val = safeGetProperty(obj, key) // new value

            // recursion prevention
            if (val === target) {
              return

              /**
               * if new value isn't object then just overwrite by new value
               * instead of extending.
               */
            } else if (typeof val !== 'object' || val === null) {
              target[key] = val
              return

              // just clone arrays (and recursive clone objects inside)
            } else if (Array.isArray(val)) {
              target[key] = deepCloneArray(val)
              return

              // custom cloning and overwrite for specific objects
            } else if (isSpecificValue(val)) {
              target[key] = cloneSpecificValue(val)
              return

              // overwrite by new value if source isn't object or array
            } else if (
              typeof src !== 'object' ||
              src === null ||
              Array.isArray(src)
            ) {
              target[key] = deepExtend({}, val)
              return

              // source value and new value is objects both, extending...
            } else {
              target[key] = deepExtend(src, val)
              return
            }
          })
        })

        return target
      })

      /***/
    },

    /***/ 2437: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      /* @flow */
      /*::

type DotenvParseOptions = {
  debug?: boolean
}

// keys and values from src
type DotenvParseOutput = { [string]: string }

type DotenvConfigOptions = {
  path?: string, // path to .env file
  encoding?: string, // encoding of .env file
  debug?: string // turn on logging for debugging purposes
}

type DotenvConfigOutput = {
  parsed?: DotenvParseOutput,
  error?: Error
}

*/

      const fs = __nccwpck_require__(5747)
      const path = __nccwpck_require__(5622)

      function log(message /*: string */) {
        console.log(`[dotenv][DEBUG] ${message}`)
      }

      const NEWLINE = '\n'
      const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/
      const RE_NEWLINES = /\\n/g
      const NEWLINES_MATCH = /\n|\r|\r\n/

      // Parses src into an Object
      function parse(
        src /*: string | Buffer */,
        options /*: ?DotenvParseOptions */
      ) /*: DotenvParseOutput */ {
        const debug = Boolean(options && options.debug)
        const obj = {}

        // convert Buffers before splitting into lines and processing
        src
          .toString()
          .split(NEWLINES_MATCH)
          .forEach(function (line, idx) {
            // matching "KEY' and 'VAL' in 'KEY=VAL'
            const keyValueArr = line.match(RE_INI_KEY_VAL)
            // matched?
            if (keyValueArr != null) {
              const key = keyValueArr[1]
              // default undefined or missing values to empty string
              let val = keyValueArr[2] || ''
              const end = val.length - 1
              const isDoubleQuoted = val[0] === '"' && val[end] === '"'
              const isSingleQuoted = val[0] === "'" && val[end] === "'"

              // if single or double quoted, remove quotes
              if (isSingleQuoted || isDoubleQuoted) {
                val = val.substring(1, end)

                // if double quoted, expand newlines
                if (isDoubleQuoted) {
                  val = val.replace(RE_NEWLINES, NEWLINE)
                }
              } else {
                // remove surrounding whitespace
                val = val.trim()
              }

              obj[key] = val
            } else if (debug) {
              log(
                `did not match key and value when parsing line ${
                  idx + 1
                }: ${line}`
              )
            }
          })

        return obj
      }

      // Populates process.env from .env file
      function config(
        options /*: ?DotenvConfigOptions */
      ) /*: DotenvConfigOutput */ {
        let dotenvPath = path.resolve(process.cwd(), '.env')
        let encoding /*: string */ = 'utf8'
        let debug = false

        if (options) {
          if (options.path != null) {
            dotenvPath = options.path
          }
          if (options.encoding != null) {
            encoding = options.encoding
          }
          if (options.debug != null) {
            debug = true
          }
        }

        try {
          // specifying an encoding returns a string instead of a buffer
          const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), {
            debug,
          })

          Object.keys(parsed).forEach(function (key) {
            if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
              process.env[key] = parsed[key]
            } else if (debug) {
              log(
                `"${key}" is already defined in \`process.env\` and will not be overwritten`
              )
            }
          })

          return { parsed }
        } catch (e) {
          return { error: e }
        }
      }

      module.exports.config = config
      module.exports.parse = parse

      /***/
    },

    /***/ 1157: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)

      const BUF_LENGTH = 64 * 1024
      const _buff = __nccwpck_require__(7696)(BUF_LENGTH)

      function copyFileSync(srcFile, destFile, options) {
        const overwrite = options.overwrite
        const errorOnExist = options.errorOnExist
        const preserveTimestamps = options.preserveTimestamps

        if (fs.existsSync(destFile)) {
          if (overwrite) {
            fs.unlinkSync(destFile)
          } else if (errorOnExist) {
            throw new Error(`${destFile} already exists`)
          } else return
        }

        const fdr = fs.openSync(srcFile, 'r')
        const stat = fs.fstatSync(fdr)
        const fdw = fs.openSync(destFile, 'w', stat.mode)
        let bytesRead = 1
        let pos = 0

        while (bytesRead > 0) {
          bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
          fs.writeSync(fdw, _buff, 0, bytesRead)
          pos += bytesRead
        }

        if (preserveTimestamps) {
          fs.futimesSync(fdw, stat.atime, stat.mtime)
        }

        fs.closeSync(fdr)
        fs.closeSync(fdw)
      }

      module.exports = copyFileSync

      /***/
    },

    /***/ 3338: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const copyFileSync = __nccwpck_require__(1157)
      const mkdir = __nccwpck_require__(8605)

      function copySync(src, dest, options) {
        if (typeof options === 'function' || options instanceof RegExp) {
          options = { filter: options }
        }

        options = options || {}
        options.recursive = !!options.recursive

        // default to true for now
        options.clobber = 'clobber' in options ? !!options.clobber : true
        // overwrite falls back to clobber
        options.overwrite =
          'overwrite' in options ? !!options.overwrite : options.clobber
        options.dereference =
          'dereference' in options ? !!options.dereference : false
        options.preserveTimestamps =
          'preserveTimestamps' in options ? !!options.preserveTimestamps : false

        options.filter =
          options.filter ||
          function () {
            return true
          }

        // Warn about using preserveTimestamps on 32-bit node:
        if (options.preserveTimestamps && process.arch === 'ia32') {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
        }

        const stats =
          options.recursive && !options.dereference
            ? fs.lstatSync(src)
            : fs.statSync(src)
        const destFolder = path.dirname(dest)
        const destFolderExists = fs.existsSync(destFolder)
        let performCopy = false

        if (options.filter instanceof RegExp) {
          console.warn(
            'Warning: fs-extra: Passing a RegExp filter is deprecated, use a function'
          )
          performCopy = options.filter.test(src)
        } else if (typeof options.filter === 'function')
          performCopy = options.filter(src, dest)

        if (stats.isFile() && performCopy) {
          if (!destFolderExists) mkdir.mkdirsSync(destFolder)
          copyFileSync(src, dest, {
            overwrite: options.overwrite,
            errorOnExist: options.errorOnExist,
            preserveTimestamps: options.preserveTimestamps,
          })
        } else if (stats.isDirectory() && performCopy) {
          if (!fs.existsSync(dest)) mkdir.mkdirsSync(dest)
          const contents = fs.readdirSync(src)
          contents.forEach((content) => {
            const opts = options
            opts.recursive = true
            copySync(path.join(src, content), path.join(dest, content), opts)
          })
        } else if (options.recursive && stats.isSymbolicLink() && performCopy) {
          const srcPath = fs.readlinkSync(src)
          fs.symlinkSync(srcPath, dest)
        }
      }

      module.exports = copySync

      /***/
    },

    /***/ 1135: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      module.exports = {
        copySync: __nccwpck_require__(3338),
      }

      /***/
    },

    /***/ 8834: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const ncp = __nccwpck_require__(6227)
      const mkdir = __nccwpck_require__(8605)
      const pathExists = __nccwpck_require__(3835).pathExists

      function copy(src, dest, options, callback) {
        if (typeof options === 'function' && !callback) {
          callback = options
          options = {}
        } else if (typeof options === 'function' || options instanceof RegExp) {
          options = { filter: options }
        }
        callback = callback || function () {}
        options = options || {}

        // Warn about using preserveTimestamps on 32-bit node:
        if (options.preserveTimestamps && process.arch === 'ia32') {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`)
        }

        // don't allow src and dest to be the same
        const basePath = process.cwd()
        const currentPath = path.resolve(basePath, src)
        const targetPath = path.resolve(basePath, dest)
        if (currentPath === targetPath)
          return callback(
            new Error('Source and destination must not be the same.')
          )

        fs.lstat(src, (err, stats) => {
          if (err) return callback(err)

          let dir = null
          if (stats.isDirectory()) {
            const parts = dest.split(path.sep)
            parts.pop()
            dir = parts.join(path.sep)
          } else {
            dir = path.dirname(dest)
          }

          pathExists(dir, (err, dirExists) => {
            if (err) return callback(err)
            if (dirExists) return ncp(src, dest, options, callback)
            mkdir.mkdirs(dir, (err) => {
              if (err) return callback(err)
              ncp(src, dest, options, callback)
            })
          })
        })
      }

      module.exports = copy

      /***/
    },

    /***/ 1335: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      module.exports = {
        copy: u(__nccwpck_require__(8834)),
      }

      /***/
    },

    /***/ 6227: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      // imported from ncp (this is temporary, will rewrite)

      var fs = __nccwpck_require__(7758)
      var path = __nccwpck_require__(5622)
      var utimes = __nccwpck_require__(2548)

      function ncp(source, dest, options, callback) {
        if (!callback) {
          callback = options
          options = {}
        }

        var basePath = process.cwd()
        var currentPath = path.resolve(basePath, source)
        var targetPath = path.resolve(basePath, dest)

        var filter = options.filter
        var transform = options.transform
        var overwrite = options.overwrite
        // If overwrite is undefined, use clobber, otherwise default to true:
        if (overwrite === undefined) overwrite = options.clobber
        if (overwrite === undefined) overwrite = true
        var errorOnExist = options.errorOnExist
        var dereference = options.dereference
        var preserveTimestamps = options.preserveTimestamps === true

        var started = 0
        var finished = 0
        var running = 0

        var errored = false

        startCopy(currentPath)

        function startCopy(source) {
          started++
          if (filter) {
            if (filter instanceof RegExp) {
              console.warn(
                'Warning: fs-extra: Passing a RegExp filter is deprecated, use a function'
              )
              if (!filter.test(source)) {
                return doneOne(true)
              }
            } else if (typeof filter === 'function') {
              if (!filter(source, dest)) {
                return doneOne(true)
              }
            }
          }
          return getStats(source)
        }

        function getStats(source) {
          var stat = dereference ? fs.stat : fs.lstat
          running++
          stat(source, function (err, stats) {
            if (err) return onError(err)

            // We need to get the mode from the stats object and preserve it.
            var item = {
              name: source,
              mode: stats.mode,
              mtime: stats.mtime, // modified time
              atime: stats.atime, // access time
              stats: stats, // temporary
            }

            if (stats.isDirectory()) {
              return onDir(item)
            } else if (
              stats.isFile() ||
              stats.isCharacterDevice() ||
              stats.isBlockDevice()
            ) {
              return onFile(item)
            } else if (stats.isSymbolicLink()) {
              // Symlinks don't really need to know about the mode.
              return onLink(source)
            }
          })
        }

        function onFile(file) {
          var target = file.name.replace(
            currentPath,
            targetPath.replace('$', '$$$$')
          ) // escapes '$' with '$$'
          isWritable(target, function (writable) {
            if (writable) {
              copyFile(file, target)
            } else {
              if (overwrite) {
                rmFile(target, function () {
                  copyFile(file, target)
                })
              } else if (errorOnExist) {
                onError(new Error(target + ' already exists'))
              } else {
                doneOne()
              }
            }
          })
        }

        function copyFile(file, target) {
          var readStream = fs.createReadStream(file.name)
          var writeStream = fs.createWriteStream(target, { mode: file.mode })

          readStream.on('error', onError)
          writeStream.on('error', onError)

          if (transform) {
            transform(readStream, writeStream, file)
          } else {
            writeStream.on('open', function () {
              readStream.pipe(writeStream)
            })
          }

          writeStream.once('close', function () {
            fs.chmod(target, file.mode, function (err) {
              if (err) return onError(err)
              if (preserveTimestamps) {
                utimes.utimesMillis(
                  target,
                  file.atime,
                  file.mtime,
                  function (err) {
                    if (err) return onError(err)
                    return doneOne()
                  }
                )
              } else {
                doneOne()
              }
            })
          })
        }

        function rmFile(file, done) {
          fs.unlink(file, function (err) {
            if (err) return onError(err)
            return done()
          })
        }

        function onDir(dir) {
          var target = dir.name.replace(
            currentPath,
            targetPath.replace('$', '$$$$')
          ) // escapes '$' with '$$'
          isWritable(target, function (writable) {
            if (writable) {
              return mkDir(dir, target)
            }
            copyDir(dir.name)
          })
        }

        function mkDir(dir, target) {
          fs.mkdir(target, dir.mode, function (err) {
            if (err) return onError(err)
            // despite setting mode in fs.mkdir, doesn't seem to work
            // so we set it here.
            fs.chmod(target, dir.mode, function (err) {
              if (err) return onError(err)
              copyDir(dir.name)
            })
          })
        }

        function copyDir(dir) {
          fs.readdir(dir, function (err, items) {
            if (err) return onError(err)
            items.forEach(function (item) {
              startCopy(path.join(dir, item))
            })
            return doneOne()
          })
        }

        function onLink(link) {
          var target = link.replace(currentPath, targetPath)
          fs.readlink(link, function (err, resolvedPath) {
            if (err) return onError(err)
            checkLink(resolvedPath, target)
          })
        }

        function checkLink(resolvedPath, target) {
          if (dereference) {
            resolvedPath = path.resolve(basePath, resolvedPath)
          }
          isWritable(target, function (writable) {
            if (writable) {
              return makeLink(resolvedPath, target)
            }
            fs.readlink(target, function (err, targetDest) {
              if (err) return onError(err)

              if (dereference) {
                targetDest = path.resolve(basePath, targetDest)
              }
              if (targetDest === resolvedPath) {
                return doneOne()
              }
              return rmFile(target, function () {
                makeLink(resolvedPath, target)
              })
            })
          })
        }

        function makeLink(linkPath, target) {
          fs.symlink(linkPath, target, function (err) {
            if (err) return onError(err)
            return doneOne()
          })
        }

        function isWritable(path, done) {
          fs.lstat(path, function (err) {
            if (err) {
              if (err.code === 'ENOENT') return done(true)
              return done(false)
            }
            return done(false)
          })
        }

        function onError(err) {
          // ensure callback is defined & called only once:
          if (!errored && callback !== undefined) {
            errored = true
            return callback(err)
          }
        }

        function doneOne(skipped) {
          if (!skipped) running--
          finished++
          if (started === finished && running === 0) {
            if (callback !== undefined) {
              return callback(null)
            }
          }
        }
      }

      module.exports = ncp

      /***/
    },

    /***/ 6970: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const fs = __nccwpck_require__(5747)
      const path = __nccwpck_require__(5622)
      const mkdir = __nccwpck_require__(8605)
      const remove = __nccwpck_require__(7357)

      const emptyDir = u(function emptyDir(dir, callback) {
        callback = callback || function () {}
        fs.readdir(dir, (err, items) => {
          if (err) return mkdir.mkdirs(dir, callback)

          items = items.map((item) => path.join(dir, item))

          deleteItem()

          function deleteItem() {
            const item = items.pop()
            if (!item) return callback()
            remove.remove(item, (err) => {
              if (err) return callback(err)
              deleteItem()
            })
          }
        })
      })

      function emptyDirSync(dir) {
        let items
        try {
          items = fs.readdirSync(dir)
        } catch (err) {
          return mkdir.mkdirsSync(dir)
        }

        items.forEach((item) => {
          item = path.join(dir, item)
          remove.removeSync(item)
        })
      }

      module.exports = {
        emptyDirSync,
        emptydirSync: emptyDirSync,
        emptyDir,
        emptydir: emptyDir,
      }

      /***/
    },

    /***/ 2164: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(7758)
      const mkdir = __nccwpck_require__(8605)
      const pathExists = __nccwpck_require__(3835).pathExists

      function createFile(file, callback) {
        function makeFile() {
          fs.writeFile(file, '', (err) => {
            if (err) return callback(err)
            callback()
          })
        }

        fs.stat(file, (err, stats) => {
          // eslint-disable-line handle-callback-err
          if (!err && stats.isFile()) return callback()
          const dir = path.dirname(file)
          pathExists(dir, (err, dirExists) => {
            if (err) return callback(err)
            if (dirExists) return makeFile()
            mkdir.mkdirs(dir, (err) => {
              if (err) return callback(err)
              makeFile()
            })
          })
        })
      }

      function createFileSync(file) {
        let stats
        try {
          stats = fs.statSync(file)
        } catch (e) {}
        if (stats && stats.isFile()) return

        const dir = path.dirname(file)
        if (!fs.existsSync(dir)) {
          mkdir.mkdirsSync(dir)
        }

        fs.writeFileSync(file, '')
      }

      module.exports = {
        createFile: u(createFile),
        createFileSync,
      }

      /***/
    },

    /***/ 55: /***/ (module, __unused_webpack_exports, __nccwpck_require__) => {
      'use strict'

      const file = __nccwpck_require__(2164)
      const link = __nccwpck_require__(3797)
      const symlink = __nccwpck_require__(2549)

      module.exports = {
        // file
        createFile: file.createFile,
        createFileSync: file.createFileSync,
        ensureFile: file.createFile,
        ensureFileSync: file.createFileSync,
        // link
        createLink: link.createLink,
        createLinkSync: link.createLinkSync,
        ensureLink: link.createLink,
        ensureLinkSync: link.createLinkSync,
        // symlink
        createSymlink: symlink.createSymlink,
        createSymlinkSync: symlink.createSymlinkSync,
        ensureSymlink: symlink.createSymlink,
        ensureSymlinkSync: symlink.createSymlinkSync,
      }

      /***/
    },

    /***/ 3797: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(7758)
      const mkdir = __nccwpck_require__(8605)
      const pathExists = __nccwpck_require__(3835).pathExists

      function createLink(srcpath, dstpath, callback) {
        function makeLink(srcpath, dstpath) {
          fs.link(srcpath, dstpath, (err) => {
            if (err) return callback(err)
            callback(null)
          })
        }

        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err)
          if (destinationExists) return callback(null)
          fs.lstat(srcpath, (err, stat) => {
            if (err) {
              err.message = err.message.replace('lstat', 'ensureLink')
              return callback(err)
            }

            const dir = path.dirname(dstpath)
            pathExists(dir, (err, dirExists) => {
              if (err) return callback(err)
              if (dirExists) return makeLink(srcpath, dstpath)
              mkdir.mkdirs(dir, (err) => {
                if (err) return callback(err)
                makeLink(srcpath, dstpath)
              })
            })
          })
        })
      }

      function createLinkSync(srcpath, dstpath, callback) {
        const destinationExists = fs.existsSync(dstpath)
        if (destinationExists) return undefined

        try {
          fs.lstatSync(srcpath)
        } catch (err) {
          err.message = err.message.replace('lstat', 'ensureLink')
          throw err
        }

        const dir = path.dirname(dstpath)
        const dirExists = fs.existsSync(dir)
        if (dirExists) return fs.linkSync(srcpath, dstpath)
        mkdir.mkdirsSync(dir)

        return fs.linkSync(srcpath, dstpath)
      }

      module.exports = {
        createLink: u(createLink),
        createLinkSync,
      }

      /***/
    },

    /***/ 3727: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(7758)
      const pathExists = __nccwpck_require__(3835).pathExists

      /**
       * Function that returns two types of paths, one relative to symlink, and one
       * relative to the current working directory. Checks if path is absolute or
       * relative. If the path is relative, this function checks if the path is
       * relative to symlink or relative to current working directory. This is an
       * initiative to find a smarter `srcpath` to supply when building symlinks.
       * This allows you to determine which path to use out of one of three possible
       * types of source paths. The first is an absolute path. This is detected by
       * `path.isAbsolute()`. When an absolute path is provided, it is checked to
       * see if it exists. If it does it's used, if not an error is returned
       * (callback)/ thrown (sync). The other two options for `srcpath` are a
       * relative url. By default Node's `fs.symlink` works by creating a symlink
       * using `dstpath` and expects the `srcpath` to be relative to the newly
       * created symlink. If you provide a `srcpath` that does not exist on the file
       * system it results in a broken symlink. To minimize this, the function
       * checks to see if the 'relative to symlink' source file exists, and if it
       * does it will use it. If it does not, it checks if there's a file that
       * exists that is relative to the current working directory, if does its used.
       * This preserves the expectations of the original fs.symlink spec and adds
       * the ability to pass in `relative to current working direcotry` paths.
       */

      function symlinkPaths(srcpath, dstpath, callback) {
        if (path.isAbsolute(srcpath)) {
          return fs.lstat(srcpath, (err, stat) => {
            if (err) {
              err.message = err.message.replace('lstat', 'ensureSymlink')
              return callback(err)
            }
            return callback(null, {
              toCwd: srcpath,
              toDst: srcpath,
            })
          })
        } else {
          const dstdir = path.dirname(dstpath)
          const relativeToDst = path.join(dstdir, srcpath)
          return pathExists(relativeToDst, (err, exists) => {
            if (err) return callback(err)
            if (exists) {
              return callback(null, {
                toCwd: relativeToDst,
                toDst: srcpath,
              })
            } else {
              return fs.lstat(srcpath, (err, stat) => {
                if (err) {
                  err.message = err.message.replace('lstat', 'ensureSymlink')
                  return callback(err)
                }
                return callback(null, {
                  toCwd: srcpath,
                  toDst: path.relative(dstdir, srcpath),
                })
              })
            }
          })
        }
      }

      function symlinkPathsSync(srcpath, dstpath) {
        let exists
        if (path.isAbsolute(srcpath)) {
          exists = fs.existsSync(srcpath)
          if (!exists) throw new Error('absolute srcpath does not exist')
          return {
            toCwd: srcpath,
            toDst: srcpath,
          }
        } else {
          const dstdir = path.dirname(dstpath)
          const relativeToDst = path.join(dstdir, srcpath)
          exists = fs.existsSync(relativeToDst)
          if (exists) {
            return {
              toCwd: relativeToDst,
              toDst: srcpath,
            }
          } else {
            exists = fs.existsSync(srcpath)
            if (!exists) throw new Error('relative srcpath does not exist')
            return {
              toCwd: srcpath,
              toDst: path.relative(dstdir, srcpath),
            }
          }
        }
      }

      module.exports = {
        symlinkPaths,
        symlinkPathsSync,
      }

      /***/
    },

    /***/ 8254: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)

      function symlinkType(srcpath, type, callback) {
        callback = typeof type === 'function' ? type : callback
        type = typeof type === 'function' ? false : type
        if (type) return callback(null, type)
        fs.lstat(srcpath, (err, stats) => {
          if (err) return callback(null, 'file')
          type = stats && stats.isDirectory() ? 'dir' : 'file'
          callback(null, type)
        })
      }

      function symlinkTypeSync(srcpath, type) {
        let stats

        if (type) return type
        try {
          stats = fs.lstatSync(srcpath)
        } catch (e) {
          return 'file'
        }
        return stats && stats.isDirectory() ? 'dir' : 'file'
      }

      module.exports = {
        symlinkType,
        symlinkTypeSync,
      }

      /***/
    },

    /***/ 2549: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const path = __nccwpck_require__(5622)
      const fs = __nccwpck_require__(7758)
      const _mkdirs = __nccwpck_require__(8605)
      const mkdirs = _mkdirs.mkdirs
      const mkdirsSync = _mkdirs.mkdirsSync

      const _symlinkPaths = __nccwpck_require__(3727)
      const symlinkPaths = _symlinkPaths.symlinkPaths
      const symlinkPathsSync = _symlinkPaths.symlinkPathsSync

      const _symlinkType = __nccwpck_require__(8254)
      const symlinkType = _symlinkType.symlinkType
      const symlinkTypeSync = _symlinkType.symlinkTypeSync

      const pathExists = __nccwpck_require__(3835).pathExists

      function createSymlink(srcpath, dstpath, type, callback) {
        callback = typeof type === 'function' ? type : callback
        type = typeof type === 'function' ? false : type

        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err)
          if (destinationExists) return callback(null)
          symlinkPaths(srcpath, dstpath, (err, relative) => {
            if (err) return callback(err)
            srcpath = relative.toDst
            symlinkType(relative.toCwd, type, (err, type) => {
              if (err) return callback(err)
              const dir = path.dirname(dstpath)
              pathExists(dir, (err, dirExists) => {
                if (err) return callback(err)
                if (dirExists)
                  return fs.symlink(srcpath, dstpath, type, callback)
                mkdirs(dir, (err) => {
                  if (err) return callback(err)
                  fs.symlink(srcpath, dstpath, type, callback)
                })
              })
            })
          })
        })
      }

      function createSymlinkSync(srcpath, dstpath, type, callback) {
        callback = typeof type === 'function' ? type : callback
        type = typeof type === 'function' ? false : type

        const destinationExists = fs.existsSync(dstpath)
        if (destinationExists) return undefined

        const relative = symlinkPathsSync(srcpath, dstpath)
        srcpath = relative.toDst
        type = symlinkTypeSync(relative.toCwd, type)
        const dir = path.dirname(dstpath)
        const exists = fs.existsSync(dir)
        if (exists) return fs.symlinkSync(srcpath, dstpath, type)
        mkdirsSync(dir)
        return fs.symlinkSync(srcpath, dstpath, type)
      }

      module.exports = {
        createSymlink: u(createSymlink),
        createSymlinkSync,
      }

      /***/
    },

    /***/ 1176: /***/ (
      __unused_webpack_module,
      exports,
      __nccwpck_require__
    ) => {
      // This is adapted from https://github.com/normalize/mz
      // Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const fs = __nccwpck_require__(7758)

      const api = [
        'access',
        'appendFile',
        'chmod',
        'chown',
        'close',
        'copyFile',
        'fchmod',
        'fchown',
        'fdatasync',
        'fstat',
        'fsync',
        'ftruncate',
        'futimes',
        'lchown',
        'link',
        'lstat',
        'mkdir',
        'mkdtemp',
        'open',
        'readFile',
        'readdir',
        'readlink',
        'realpath',
        'rename',
        'rmdir',
        'stat',
        'symlink',
        'truncate',
        'unlink',
        'utimes',
        'writeFile',
      ].filter((key) => {
        // Some commands are not available on some systems. Ex:
        // fs.copyFile was added in Node.js v8.5.0
        // fs.mkdtemp was added in Node.js v5.10.0
        // fs.lchown is not available on at least some Linux
        return typeof fs[key] === 'function'
      })

      // Export all keys:
      Object.keys(fs).forEach((key) => {
        exports[key] = fs[key]
      })

      // Universalify async methods:
      api.forEach((method) => {
        exports[method] = u(fs[method])
      })

      // We differ from mz/fs in that we still ship the old, broken, fs.exists()
      // since we are a drop-in replacement for the native module
      exports.exists = function (filename, callback) {
        if (typeof callback === 'function') {
          return fs.exists(filename, callback)
        }
        return new Promise((resolve) => {
          return fs.exists(filename, resolve)
        })
      }

      // fs.read() & fs.write need special treatment due to multiple callback args

      exports.read = function (fd, buffer, offset, length, position, callback) {
        if (typeof callback === 'function') {
          return fs.read(fd, buffer, offset, length, position, callback)
        }
        return new Promise((resolve, reject) => {
          fs.read(
            fd,
            buffer,
            offset,
            length,
            position,
            (err, bytesRead, buffer) => {
              if (err) return reject(err)
              resolve({ bytesRead, buffer })
            }
          )
        })
      }

      // Function signature can be
      // fs.write(fd, buffer[, offset[, length[, position]]], callback)
      // OR
      // fs.write(fd, string[, position[, encoding]], callback)
      // so we need to handle both cases
      exports.write = function (fd, buffer, a, b, c, callback) {
        if (typeof arguments[arguments.length - 1] === 'function') {
          return fs.write(fd, buffer, a, b, c, callback)
        }

        // Check for old, depricated fs.write(fd, string[, position[, encoding]], callback)
        if (typeof buffer === 'string') {
          return new Promise((resolve, reject) => {
            fs.write(fd, buffer, a, b, (err, bytesWritten, buffer) => {
              if (err) return reject(err)
              resolve({ bytesWritten, buffer })
            })
          })
        }

        return new Promise((resolve, reject) => {
          fs.write(fd, buffer, a, b, c, (err, bytesWritten, buffer) => {
            if (err) return reject(err)
            resolve({ bytesWritten, buffer })
          })
        })
      }

      /***/
    },

    /***/ 5630: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const assign = __nccwpck_require__(660)

      const fs = {}

      // Export graceful-fs:
      assign(fs, __nccwpck_require__(1176))
      // Export extra methods:
      assign(fs, __nccwpck_require__(1335))
      assign(fs, __nccwpck_require__(1135))
      assign(fs, __nccwpck_require__(8605))
      assign(fs, __nccwpck_require__(7357))
      assign(fs, __nccwpck_require__(213))
      assign(fs, __nccwpck_require__(1497))
      assign(fs, __nccwpck_require__(9665))
      assign(fs, __nccwpck_require__(6970))
      assign(fs, __nccwpck_require__(55))
      assign(fs, __nccwpck_require__(6570))
      assign(fs, __nccwpck_require__(3835))

      module.exports = fs

      /***/
    },

    /***/ 213: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const jsonFile = __nccwpck_require__(8970)

      jsonFile.outputJson = u(__nccwpck_require__(531))
      jsonFile.outputJsonSync = __nccwpck_require__(9421)
      // aliases
      jsonFile.outputJSON = jsonFile.outputJson
      jsonFile.outputJSONSync = jsonFile.outputJsonSync
      jsonFile.writeJSON = jsonFile.writeJson
      jsonFile.writeJSONSync = jsonFile.writeJsonSync
      jsonFile.readJSON = jsonFile.readJson
      jsonFile.readJSONSync = jsonFile.readJsonSync

      module.exports = jsonFile

      /***/
    },

    /***/ 8970: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const jsonFile = __nccwpck_require__(6160)

      module.exports = {
        // jsonfile exports
        readJson: u(jsonFile.readFile),
        readJsonSync: jsonFile.readFileSync,
        writeJson: u(jsonFile.writeFile),
        writeJsonSync: jsonFile.writeFileSync,
      }

      /***/
    },

    /***/ 9421: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const mkdir = __nccwpck_require__(8605)
      const jsonFile = __nccwpck_require__(8970)

      function outputJsonSync(file, data, options) {
        const dir = path.dirname(file)

        if (!fs.existsSync(dir)) {
          mkdir.mkdirsSync(dir)
        }

        jsonFile.writeJsonSync(file, data, options)
      }

      module.exports = outputJsonSync

      /***/
    },

    /***/ 531: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const path = __nccwpck_require__(5622)
      const mkdir = __nccwpck_require__(8605)
      const pathExists = __nccwpck_require__(3835).pathExists
      const jsonFile = __nccwpck_require__(8970)

      function outputJson(file, data, options, callback) {
        if (typeof options === 'function') {
          callback = options
          options = {}
        }

        const dir = path.dirname(file)

        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err)
          if (itDoes) return jsonFile.writeJson(file, data, options, callback)

          mkdir.mkdirs(dir, (err) => {
            if (err) return callback(err)
            jsonFile.writeJson(file, data, options, callback)
          })
        })
      }

      module.exports = outputJson

      /***/
    },

    /***/ 8605: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const mkdirs = u(__nccwpck_require__(9677))
      const mkdirsSync = __nccwpck_require__(684)

      module.exports = {
        mkdirs: mkdirs,
        mkdirsSync: mkdirsSync,
        // alias
        mkdirp: mkdirs,
        mkdirpSync: mkdirsSync,
        ensureDir: mkdirs,
        ensureDirSync: mkdirsSync,
      }

      /***/
    },

    /***/ 684: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const invalidWin32Path = __nccwpck_require__(1590).invalidWin32Path

      const o777 = parseInt('0777', 8)

      function mkdirsSync(p, opts, made) {
        if (!opts || typeof opts !== 'object') {
          opts = { mode: opts }
        }

        let mode = opts.mode
        const xfs = opts.fs || fs

        if (process.platform === 'win32' && invalidWin32Path(p)) {
          const errInval = new Error(
            p + ' contains invalid WIN32 path characters.'
          )
          errInval.code = 'EINVAL'
          throw errInval
        }

        if (mode === undefined) {
          mode = o777 & ~process.umask()
        }
        if (!made) made = null

        p = path.resolve(p)

        try {
          xfs.mkdirSync(p, mode)
          made = made || p
        } catch (err0) {
          switch (err0.code) {
            case 'ENOENT':
              if (path.dirname(p) === p) throw err0
              made = mkdirsSync(path.dirname(p), opts, made)
              mkdirsSync(p, opts, made)
              break

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
              let stat
              try {
                stat = xfs.statSync(p)
              } catch (err1) {
                throw err0
              }
              if (!stat.isDirectory()) throw err0
              break
          }
        }

        return made
      }

      module.exports = mkdirsSync

      /***/
    },

    /***/ 9677: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const invalidWin32Path = __nccwpck_require__(1590).invalidWin32Path

      const o777 = parseInt('0777', 8)

      function mkdirs(p, opts, callback, made) {
        if (typeof opts === 'function') {
          callback = opts
          opts = {}
        } else if (!opts || typeof opts !== 'object') {
          opts = { mode: opts }
        }

        if (process.platform === 'win32' && invalidWin32Path(p)) {
          const errInval = new Error(
            p + ' contains invalid WIN32 path characters.'
          )
          errInval.code = 'EINVAL'
          return callback(errInval)
        }

        let mode = opts.mode
        const xfs = opts.fs || fs

        if (mode === undefined) {
          mode = o777 & ~process.umask()
        }
        if (!made) made = null

        callback = callback || function () {}
        p = path.resolve(p)

        xfs.mkdir(p, mode, (er) => {
          if (!er) {
            made = made || p
            return callback(null, made)
          }
          switch (er.code) {
            case 'ENOENT':
              if (path.dirname(p) === p) return callback(er)
              mkdirs(path.dirname(p), opts, (er, made) => {
                if (er) callback(er, made)
                else mkdirs(p, opts, callback, made)
              })
              break

            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
              xfs.stat(p, (er2, stat) => {
                // if the stat fails, then that's super weird.
                // let the original error be the failure reason.
                if (er2 || !stat.isDirectory()) callback(er, made)
                else callback(null, made)
              })
              break
          }
        })
      }

      module.exports = mkdirs

      /***/
    },

    /***/ 1590: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const path = __nccwpck_require__(5622)

      // get drive on windows
      function getRootPath(p) {
        p = path.normalize(path.resolve(p)).split(path.sep)
        if (p.length > 0) return p[0]
        return null
      }

      // http://stackoverflow.com/a/62888/10333 contains more accurate
      // TODO: expand to include the rest
      const INVALID_PATH_CHARS = /[<>:"|?*]/

      function invalidWin32Path(p) {
        const rp = getRootPath(p)
        p = p.replace(rp, '')
        return INVALID_PATH_CHARS.test(p)
      }

      module.exports = {
        getRootPath,
        invalidWin32Path,
      }

      /***/
    },

    /***/ 9665: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const copySync = __nccwpck_require__(1135).copySync
      const removeSync = __nccwpck_require__(7357).removeSync
      const mkdirpSync = __nccwpck_require__(8605).mkdirsSync
      const buffer = __nccwpck_require__(7696)

      function moveSync(src, dest, options) {
        options = options || {}
        const overwrite = options.overwrite || options.clobber || false

        src = path.resolve(src)
        dest = path.resolve(dest)

        if (src === dest) return fs.accessSync(src)

        if (isSrcSubdir(src, dest))
          throw new Error(`Cannot move '${src}' into itself '${dest}'.`)

        mkdirpSync(path.dirname(dest))
        tryRenameSync()

        function tryRenameSync() {
          if (overwrite) {
            try {
              return fs.renameSync(src, dest)
            } catch (err) {
              if (
                err.code === 'ENOTEMPTY' ||
                err.code === 'EEXIST' ||
                err.code === 'EPERM'
              ) {
                removeSync(dest)
                options.overwrite = false // just overwriteed it, no need to do it again
                return moveSync(src, dest, options)
              }

              if (err.code !== 'EXDEV') throw err
              return moveSyncAcrossDevice(src, dest, overwrite)
            }
          } else {
            try {
              fs.linkSync(src, dest)
              return fs.unlinkSync(src)
            } catch (err) {
              if (
                err.code === 'EXDEV' ||
                err.code === 'EISDIR' ||
                err.code === 'EPERM' ||
                err.code === 'ENOTSUP'
              ) {
                return moveSyncAcrossDevice(src, dest, overwrite)
              }
              throw err
            }
          }
        }
      }

      function moveSyncAcrossDevice(src, dest, overwrite) {
        const stat = fs.statSync(src)

        if (stat.isDirectory()) {
          return moveDirSyncAcrossDevice(src, dest, overwrite)
        } else {
          return moveFileSyncAcrossDevice(src, dest, overwrite)
        }
      }

      function moveFileSyncAcrossDevice(src, dest, overwrite) {
        const BUF_LENGTH = 64 * 1024
        const _buff = buffer(BUF_LENGTH)

        const flags = overwrite ? 'w' : 'wx'

        const fdr = fs.openSync(src, 'r')
        const stat = fs.fstatSync(fdr)
        const fdw = fs.openSync(dest, flags, stat.mode)
        let bytesRead = 1
        let pos = 0

        while (bytesRead > 0) {
          bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)
          fs.writeSync(fdw, _buff, 0, bytesRead)
          pos += bytesRead
        }

        fs.closeSync(fdr)
        fs.closeSync(fdw)
        return fs.unlinkSync(src)
      }

      function moveDirSyncAcrossDevice(src, dest, overwrite) {
        const options = {
          overwrite: false,
        }

        if (overwrite) {
          removeSync(dest)
          tryCopySync()
        } else {
          tryCopySync()
        }

        function tryCopySync() {
          copySync(src, dest, options)
          return removeSync(src)
        }
      }

      // return true if dest is a subdir of src, otherwise false.
      // extract dest base dir and check if that is the same as src basename
      function isSrcSubdir(src, dest) {
        try {
          return (
            fs.statSync(src).isDirectory() &&
            src !== dest &&
            dest.indexOf(src) > -1 &&
            dest.split(path.dirname(src) + path.sep)[1].split(path.sep)[0] ===
              path.basename(src)
          )
        } catch (e) {
          return false
        }
      }

      module.exports = {
        moveSync,
      }

      /***/
    },

    /***/ 1497: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      // most of this code was written by Andrew Kelley
      // licensed under the BSD license: see
      // https://github.com/andrewrk/node-mv/blob/master/package.json

      // this needs a cleanup

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const fs = __nccwpck_require__(7758)
      const ncp = __nccwpck_require__(6227)
      const path = __nccwpck_require__(5622)
      const remove = __nccwpck_require__(7357).remove
      const mkdirp = __nccwpck_require__(8605).mkdirs

      function move(src, dest, options, callback) {
        if (typeof options === 'function') {
          callback = options
          options = {}
        }

        const overwrite = options.overwrite || options.clobber || false

        isSrcSubdir(src, dest, (err, itIs) => {
          if (err) return callback(err)
          if (itIs)
            return callback(
              new Error(
                `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`
              )
            )
          mkdirp(path.dirname(dest), (err) => {
            if (err) return callback(err)
            doRename()
          })
        })

        function doRename() {
          if (path.resolve(src) === path.resolve(dest)) {
            fs.access(src, callback)
          } else if (overwrite) {
            fs.rename(src, dest, (err) => {
              if (!err) return callback()

              if (err.code === 'ENOTEMPTY' || err.code === 'EEXIST') {
                remove(dest, (err) => {
                  if (err) return callback(err)
                  options.overwrite = false // just overwriteed it, no need to do it again
                  move(src, dest, options, callback)
                })
                return
              }

              // weird Windows shit
              if (err.code === 'EPERM') {
                setTimeout(() => {
                  remove(dest, (err) => {
                    if (err) return callback(err)
                    options.overwrite = false
                    move(src, dest, options, callback)
                  })
                }, 200)
                return
              }

              if (err.code !== 'EXDEV') return callback(err)
              moveAcrossDevice(src, dest, overwrite, callback)
            })
          } else {
            fs.link(src, dest, (err) => {
              if (err) {
                if (
                  err.code === 'EXDEV' ||
                  err.code === 'EISDIR' ||
                  err.code === 'EPERM' ||
                  err.code === 'ENOTSUP'
                ) {
                  return moveAcrossDevice(src, dest, overwrite, callback)
                }
                return callback(err)
              }
              return fs.unlink(src, callback)
            })
          }
        }
      }

      function moveAcrossDevice(src, dest, overwrite, callback) {
        fs.stat(src, (err, stat) => {
          if (err) return callback(err)

          if (stat.isDirectory()) {
            moveDirAcrossDevice(src, dest, overwrite, callback)
          } else {
            moveFileAcrossDevice(src, dest, overwrite, callback)
          }
        })
      }

      function moveFileAcrossDevice(src, dest, overwrite, callback) {
        const flags = overwrite ? 'w' : 'wx'
        const ins = fs.createReadStream(src)
        const outs = fs.createWriteStream(dest, { flags })

        ins.on('error', (err) => {
          ins.destroy()
          outs.destroy()
          outs.removeListener('close', onClose)

          // may want to create a directory but `out` line above
          // creates an empty file for us: See #108
          // don't care about error here
          fs.unlink(dest, () => {
            // note: `err` here is from the input stream errror
            if (err.code === 'EISDIR' || err.code === 'EPERM') {
              moveDirAcrossDevice(src, dest, overwrite, callback)
            } else {
              callback(err)
            }
          })
        })

        outs.on('error', (err) => {
          ins.destroy()
          outs.destroy()
          outs.removeListener('close', onClose)
          callback(err)
        })

        outs.once('close', onClose)
        ins.pipe(outs)

        function onClose() {
          fs.unlink(src, callback)
        }
      }

      function moveDirAcrossDevice(src, dest, overwrite, callback) {
        const options = {
          overwrite: false,
        }

        if (overwrite) {
          remove(dest, (err) => {
            if (err) return callback(err)
            startNcp()
          })
        } else {
          startNcp()
        }

        function startNcp() {
          ncp(src, dest, options, (err) => {
            if (err) return callback(err)
            remove(src, callback)
          })
        }
      }

      // return true if dest is a subdir of src, otherwise false.
      // extract dest base dir and check if that is the same as src basename
      function isSrcSubdir(src, dest, cb) {
        fs.stat(src, (err, st) => {
          if (err) return cb(err)
          if (st.isDirectory()) {
            const baseDir = dest.split(path.dirname(src) + path.sep)[1]
            if (baseDir) {
              const destBasename = baseDir.split(path.sep)[0]
              if (destBasename)
                return cb(
                  null,
                  src !== dest &&
                    dest.indexOf(src) > -1 &&
                    destBasename === path.basename(src)
                )
              return cb(null, false)
            }
            return cb(null, false)
          }
          return cb(null, false)
        })
      }

      module.exports = {
        move: u(move),
      }

      /***/
    },

    /***/ 6570: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const mkdir = __nccwpck_require__(8605)
      const pathExists = __nccwpck_require__(3835).pathExists

      function outputFile(file, data, encoding, callback) {
        if (typeof encoding === 'function') {
          callback = encoding
          encoding = 'utf8'
        }

        const dir = path.dirname(file)
        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err)
          if (itDoes) return fs.writeFile(file, data, encoding, callback)

          mkdir.mkdirs(dir, (err) => {
            if (err) return callback(err)

            fs.writeFile(file, data, encoding, callback)
          })
        })
      }

      function outputFileSync(file, data, encoding) {
        const dir = path.dirname(file)
        if (fs.existsSync(dir)) {
          return fs.writeFileSync.apply(fs, arguments)
        }
        mkdir.mkdirsSync(dir)
        fs.writeFileSync.apply(fs, arguments)
      }

      module.exports = {
        outputFile: u(outputFile),
        outputFileSync,
      }

      /***/
    },

    /***/ 3835: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromPromise */.p
      const fs = __nccwpck_require__(1176)

      function pathExists(path) {
        return fs
          .access(path)
          .then(() => true)
          .catch(() => false)
      }

      module.exports = {
        pathExists: u(pathExists),
        pathExistsSync: fs.existsSync,
      }

      /***/
    },

    /***/ 7357: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const u = __nccwpck_require__(9046) /* .fromCallback */.E
      const rimraf = __nccwpck_require__(8761)

      module.exports = {
        remove: u(rimraf),
        removeSync: rimraf.sync,
      }

      /***/
    },

    /***/ 8761: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const path = __nccwpck_require__(5622)
      const assert = __nccwpck_require__(2357)

      const isWindows = process.platform === 'win32'

      function defaults(options) {
        const methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir']
        methods.forEach((m) => {
          options[m] = options[m] || fs[m]
          m = m + 'Sync'
          options[m] = options[m] || fs[m]
        })

        options.maxBusyTries = options.maxBusyTries || 3
      }

      function rimraf(p, options, cb) {
        let busyTries = 0

        if (typeof options === 'function') {
          cb = options
          options = {}
        }

        assert(p, 'rimraf: missing path')
        assert.equal(typeof p, 'string', 'rimraf: path should be a string')
        assert.equal(
          typeof cb,
          'function',
          'rimraf: callback function required'
        )
        assert(options, 'rimraf: invalid options argument provided')
        assert.equal(
          typeof options,
          'object',
          'rimraf: options should be object'
        )

        defaults(options)

        rimraf_(p, options, function CB(er) {
          if (er) {
            if (
              (er.code === 'EBUSY' ||
                er.code === 'ENOTEMPTY' ||
                er.code === 'EPERM') &&
              busyTries < options.maxBusyTries
            ) {
              busyTries++
              let time = busyTries * 100
              // try again, with the same exact callback as this one.
              return setTimeout(() => rimraf_(p, options, CB), time)
            }

            // already gone
            if (er.code === 'ENOENT') er = null
          }

          cb(er)
        })
      }

      // Two possible strategies.
      // 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
      // 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
      //
      // Both result in an extra syscall when you guess wrong.  However, there
      // are likely far more normal files in the world than directories.  This
      // is based on the assumption that a the average number of files per
      // directory is >= 1.
      //
      // If anyone ever complains about this, then I guess the strategy could
      // be made configurable somehow.  But until then, YAGNI.
      function rimraf_(p, options, cb) {
        assert(p)
        assert(options)
        assert(typeof cb === 'function')

        // sunos lets the root user unlink directories, which is... weird.
        // so we have to lstat here and make sure it's not a dir.
        options.lstat(p, (er, st) => {
          if (er && er.code === 'ENOENT') {
            return cb(null)
          }

          // Windows can EPERM on stat.  Life is suffering.
          if (er && er.code === 'EPERM' && isWindows) {
            return fixWinEPERM(p, options, er, cb)
          }

          if (st && st.isDirectory()) {
            return rmdir(p, options, er, cb)
          }

          options.unlink(p, (er) => {
            if (er) {
              if (er.code === 'ENOENT') {
                return cb(null)
              }
              if (er.code === 'EPERM') {
                return isWindows
                  ? fixWinEPERM(p, options, er, cb)
                  : rmdir(p, options, er, cb)
              }
              if (er.code === 'EISDIR') {
                return rmdir(p, options, er, cb)
              }
            }
            return cb(er)
          })
        })
      }

      function fixWinEPERM(p, options, er, cb) {
        assert(p)
        assert(options)
        assert(typeof cb === 'function')
        if (er) {
          assert(er instanceof Error)
        }

        options.chmod(p, 0o666, (er2) => {
          if (er2) {
            cb(er2.code === 'ENOENT' ? null : er)
          } else {
            options.stat(p, (er3, stats) => {
              if (er3) {
                cb(er3.code === 'ENOENT' ? null : er)
              } else if (stats.isDirectory()) {
                rmdir(p, options, er, cb)
              } else {
                options.unlink(p, cb)
              }
            })
          }
        })
      }

      function fixWinEPERMSync(p, options, er) {
        let stats

        assert(p)
        assert(options)
        if (er) {
          assert(er instanceof Error)
        }

        try {
          options.chmodSync(p, 0o666)
        } catch (er2) {
          if (er2.code === 'ENOENT') {
            return
          } else {
            throw er
          }
        }

        try {
          stats = options.statSync(p)
        } catch (er3) {
          if (er3.code === 'ENOENT') {
            return
          } else {
            throw er
          }
        }

        if (stats.isDirectory()) {
          rmdirSync(p, options, er)
        } else {
          options.unlinkSync(p)
        }
      }

      function rmdir(p, options, originalEr, cb) {
        assert(p)
        assert(options)
        if (originalEr) {
          assert(originalEr instanceof Error)
        }
        assert(typeof cb === 'function')

        // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
        // if we guessed wrong, and it's not a directory, then
        // raise the original error.
        options.rmdir(p, (er) => {
          if (
            er &&
            (er.code === 'ENOTEMPTY' ||
              er.code === 'EEXIST' ||
              er.code === 'EPERM')
          ) {
            rmkids(p, options, cb)
          } else if (er && er.code === 'ENOTDIR') {
            cb(originalEr)
          } else {
            cb(er)
          }
        })
      }

      function rmkids(p, options, cb) {
        assert(p)
        assert(options)
        assert(typeof cb === 'function')

        options.readdir(p, (er, files) => {
          if (er) return cb(er)

          let n = files.length
          let errState

          if (n === 0) return options.rmdir(p, cb)

          files.forEach((f) => {
            rimraf(path.join(p, f), options, (er) => {
              if (errState) {
                return
              }
              if (er) return cb((errState = er))
              if (--n === 0) {
                options.rmdir(p, cb)
              }
            })
          })
        })
      }

      // this looks simpler, and is strictly *faster*, but will
      // tie up the JavaScript thread and fail on excessively
      // deep directory trees.
      function rimrafSync(p, options) {
        let st

        options = options || {}
        defaults(options)

        assert(p, 'rimraf: missing path')
        assert.equal(typeof p, 'string', 'rimraf: path should be a string')
        assert(options, 'rimraf: missing options')
        assert.equal(
          typeof options,
          'object',
          'rimraf: options should be object'
        )

        try {
          st = options.lstatSync(p)
        } catch (er) {
          if (er.code === 'ENOENT') {
            return
          }

          // Windows can EPERM on stat.  Life is suffering.
          if (er.code === 'EPERM' && isWindows) {
            fixWinEPERMSync(p, options, er)
          }
        }

        try {
          // sunos lets the root user unlink directories, which is... weird.
          if (st && st.isDirectory()) {
            rmdirSync(p, options, null)
          } else {
            options.unlinkSync(p)
          }
        } catch (er) {
          if (er.code === 'ENOENT') {
            return
          } else if (er.code === 'EPERM') {
            return isWindows
              ? fixWinEPERMSync(p, options, er)
              : rmdirSync(p, options, er)
          } else if (er.code !== 'EISDIR') {
            throw er
          }
          rmdirSync(p, options, er)
        }
      }

      function rmdirSync(p, options, originalEr) {
        assert(p)
        assert(options)
        if (originalEr) {
          assert(originalEr instanceof Error)
        }

        try {
          options.rmdirSync(p)
        } catch (er) {
          if (er.code === 'ENOTDIR') {
            throw originalEr
          } else if (
            er.code === 'ENOTEMPTY' ||
            er.code === 'EEXIST' ||
            er.code === 'EPERM'
          ) {
            rmkidsSync(p, options)
          } else if (er.code !== 'ENOENT') {
            throw er
          }
        }
      }

      function rmkidsSync(p, options) {
        assert(p)
        assert(options)
        options
          .readdirSync(p)
          .forEach((f) => rimrafSync(path.join(p, f), options))

        // We only end up here once we got ENOTEMPTY at least once, and
        // at this point, we are guaranteed to have removed all the kids.
        // So, we know that it won't be ENOENT or ENOTDIR or anything else.
        // try really hard to delete stuff on windows, because it has a
        // PROFOUNDLY annoying habit of not closing handles promptly when
        // files are deleted, resulting in spurious ENOTEMPTY errors.
        const retries = isWindows ? 100 : 1
        let i = 0
        do {
          let threw = true
          try {
            const ret = options.rmdirSync(p, options)
            threw = false
            return ret
          } finally {
            if (++i < retries && threw) continue // eslint-disable-line
          }
        } while (true)
      }

      module.exports = rimraf
      rimraf.sync = rimrafSync

      /***/
    },

    /***/ 660: /***/ (module) => {
      'use strict'

      // simple mutable assign
      function assign() {
        const args = [].slice.call(arguments).filter((i) => i)
        const dest = args.shift()
        args.forEach((src) => {
          Object.keys(src).forEach((key) => {
            dest[key] = src[key]
          })
        })

        return dest
      }

      module.exports = assign

      /***/
    },

    /***/ 7696: /***/ (module) => {
      /* eslint-disable node/no-deprecated-api */
      module.exports = function (size) {
        if (typeof Buffer.allocUnsafe === 'function') {
          try {
            return Buffer.allocUnsafe(size)
          } catch (e) {
            return new Buffer(size)
          }
        }
        return new Buffer(size)
      }

      /***/
    },

    /***/ 2548: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const fs = __nccwpck_require__(7758)
      const os = __nccwpck_require__(2087)
      const path = __nccwpck_require__(5622)

      // HFS, ext{2,3}, FAT do not, Node.js v0.10 does not
      function hasMillisResSync() {
        let tmpfile = path.join(
          'millis-test-sync' +
            Date.now().toString() +
            Math.random().toString().slice(2)
        )
        tmpfile = path.join(os.tmpdir(), tmpfile)

        // 550 millis past UNIX epoch
        const d = new Date(1435410243862)
        fs.writeFileSync(
          tmpfile,
          'https://github.com/jprichardson/node-fs-extra/pull/141'
        )
        const fd = fs.openSync(tmpfile, 'r+')
        fs.futimesSync(fd, d, d)
        fs.closeSync(fd)
        return fs.statSync(tmpfile).mtime > 1435410243000
      }

      function hasMillisRes(callback) {
        let tmpfile = path.join(
          'millis-test' +
            Date.now().toString() +
            Math.random().toString().slice(2)
        )
        tmpfile = path.join(os.tmpdir(), tmpfile)

        // 550 millis past UNIX epoch
        const d = new Date(1435410243862)
        fs.writeFile(
          tmpfile,
          'https://github.com/jprichardson/node-fs-extra/pull/141',
          (err) => {
            if (err) return callback(err)
            fs.open(tmpfile, 'r+', (err, fd) => {
              if (err) return callback(err)
              fs.futimes(fd, d, d, (err) => {
                if (err) return callback(err)
                fs.close(fd, (err) => {
                  if (err) return callback(err)
                  fs.stat(tmpfile, (err, stats) => {
                    if (err) return callback(err)
                    callback(null, stats.mtime > 1435410243000)
                  })
                })
              })
            })
          }
        )
      }

      function timeRemoveMillis(timestamp) {
        if (typeof timestamp === 'number') {
          return Math.floor(timestamp / 1000) * 1000
        } else if (timestamp instanceof Date) {
          return new Date(Math.floor(timestamp.getTime() / 1000) * 1000)
        } else {
          throw new Error('fs-extra: timeRemoveMillis() unknown parameter type')
        }
      }

      function utimesMillis(path, atime, mtime, callback) {
        // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
        fs.open(path, 'r+', (err, fd) => {
          if (err) return callback(err)
          fs.futimes(fd, atime, mtime, (futimesErr) => {
            fs.close(fd, (closeErr) => {
              if (callback) callback(futimesErr || closeErr)
            })
          })
        })
      }

      module.exports = {
        hasMillisRes,
        hasMillisResSync,
        timeRemoveMillis,
        utimesMillis,
      }

      /***/
    },

    /***/ 7356: /***/ (module) => {
      'use strict'

      module.exports = clone

      function clone(obj) {
        if (obj === null || typeof obj !== 'object') return obj

        if (obj instanceof Object) var copy = { __proto__: obj.__proto__ }
        else var copy = Object.create(null)

        Object.getOwnPropertyNames(obj).forEach(function (key) {
          Object.defineProperty(
            copy,
            key,
            Object.getOwnPropertyDescriptor(obj, key)
          )
        })

        return copy
      }

      /***/
    },

    /***/ 7758: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var fs = __nccwpck_require__(5747)
      var polyfills = __nccwpck_require__(263)
      var legacy = __nccwpck_require__(3086)
      var clone = __nccwpck_require__(7356)

      var queue = []

      var util = __nccwpck_require__(1669)

      function noop() {}

      var debug = noop
      if (util.debuglog) debug = util.debuglog('gfs4')
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
        debug = function () {
          var m = util.format.apply(util, arguments)
          m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
          console.error(m)
        }

      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
        process.on('exit', function () {
          debug(queue)
          __nccwpck_require__(2357).equal(queue.length, 0)
        })
      }

      module.exports = patch(clone(fs))
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs.__patched) {
        module.exports = patch(fs)
        fs.__patched = true
      }

      // Always patch fs.close/closeSync, because we want to
      // retry() whenever a close happens *anywhere* in the program.
      // This is essential when multiple graceful-fs instances are
      // in play at the same time.
      module.exports.close = (function (fs$close) {
        return function (fd, cb) {
          return fs$close.call(fs, fd, function (err) {
            if (!err) retry()

            if (typeof cb === 'function') cb.apply(this, arguments)
          })
        }
      })(fs.close)

      module.exports.closeSync = (function (fs$closeSync) {
        return function (fd) {
          // Note that graceful-fs also retries when fs.closeSync() fails.
          // Looks like a bug to me, although it's probably a harmless one.
          var rval = fs$closeSync.apply(fs, arguments)
          retry()
          return rval
        }
      })(fs.closeSync)

      // Only patch fs once, otherwise we'll run into a memory leak if
      // graceful-fs is loaded multiple times, such as in test environments that
      // reset the loaded modules between tests.
      // We look for the string `graceful-fs` from the comment above. This
      // way we are not adding any extra properties and it will detect if older
      // versions of graceful-fs are installed.
      if (!/\bgraceful-fs\b/.test(fs.closeSync.toString())) {
        fs.closeSync = module.exports.closeSync
        fs.close = module.exports.close
      }

      function patch(fs) {
        // Everything that references the open() function needs to be in here
        polyfills(fs)
        fs.gracefulify = patch
        fs.FileReadStream = ReadStream // Legacy name.
        fs.FileWriteStream = WriteStream // Legacy name.
        fs.createReadStream = createReadStream
        fs.createWriteStream = createWriteStream
        var fs$readFile = fs.readFile
        fs.readFile = readFile
        function readFile(path, options, cb) {
          if (typeof options === 'function') (cb = options), (options = null)

          return go$readFile(path, options, cb)

          function go$readFile(path, options, cb) {
            return fs$readFile(path, options, function (err) {
              if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                enqueue([go$readFile, [path, options, cb]])
              else {
                if (typeof cb === 'function') cb.apply(this, arguments)
                retry()
              }
            })
          }
        }

        var fs$writeFile = fs.writeFile
        fs.writeFile = writeFile
        function writeFile(path, data, options, cb) {
          if (typeof options === 'function') (cb = options), (options = null)

          return go$writeFile(path, data, options, cb)

          function go$writeFile(path, data, options, cb) {
            return fs$writeFile(path, data, options, function (err) {
              if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                enqueue([go$writeFile, [path, data, options, cb]])
              else {
                if (typeof cb === 'function') cb.apply(this, arguments)
                retry()
              }
            })
          }
        }

        var fs$appendFile = fs.appendFile
        if (fs$appendFile) fs.appendFile = appendFile
        function appendFile(path, data, options, cb) {
          if (typeof options === 'function') (cb = options), (options = null)

          return go$appendFile(path, data, options, cb)

          function go$appendFile(path, data, options, cb) {
            return fs$appendFile(path, data, options, function (err) {
              if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                enqueue([go$appendFile, [path, data, options, cb]])
              else {
                if (typeof cb === 'function') cb.apply(this, arguments)
                retry()
              }
            })
          }
        }

        var fs$readdir = fs.readdir
        fs.readdir = readdir
        function readdir(path, options, cb) {
          var args = [path]
          if (typeof options !== 'function') {
            args.push(options)
          } else {
            cb = options
          }
          args.push(go$readdir$cb)

          return go$readdir(args)

          function go$readdir$cb(err, files) {
            if (files && files.sort) files.sort()

            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$readdir, [args]])
            else {
              if (typeof cb === 'function') cb.apply(this, arguments)
              retry()
            }
          }
        }

        function go$readdir(args) {
          return fs$readdir.apply(fs, args)
        }

        if (process.version.substr(0, 4) === 'v0.8') {
          var legStreams = legacy(fs)
          ReadStream = legStreams.ReadStream
          WriteStream = legStreams.WriteStream
        }

        var fs$ReadStream = fs.ReadStream
        if (fs$ReadStream) {
          ReadStream.prototype = Object.create(fs$ReadStream.prototype)
          ReadStream.prototype.open = ReadStream$open
        }

        var fs$WriteStream = fs.WriteStream
        if (fs$WriteStream) {
          WriteStream.prototype = Object.create(fs$WriteStream.prototype)
          WriteStream.prototype.open = WriteStream$open
        }

        fs.ReadStream = ReadStream
        fs.WriteStream = WriteStream

        function ReadStream(path, options) {
          if (this instanceof ReadStream)
            return fs$ReadStream.apply(this, arguments), this
          else
            return ReadStream.apply(
              Object.create(ReadStream.prototype),
              arguments
            )
        }

        function ReadStream$open() {
          var that = this
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              if (that.autoClose) that.destroy()

              that.emit('error', err)
            } else {
              that.fd = fd
              that.emit('open', fd)
              that.read()
            }
          })
        }

        function WriteStream(path, options) {
          if (this instanceof WriteStream)
            return fs$WriteStream.apply(this, arguments), this
          else
            return WriteStream.apply(
              Object.create(WriteStream.prototype),
              arguments
            )
        }

        function WriteStream$open() {
          var that = this
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              that.destroy()
              that.emit('error', err)
            } else {
              that.fd = fd
              that.emit('open', fd)
            }
          })
        }

        function createReadStream(path, options) {
          return new ReadStream(path, options)
        }

        function createWriteStream(path, options) {
          return new WriteStream(path, options)
        }

        var fs$open = fs.open
        fs.open = open
        function open(path, flags, mode, cb) {
          if (typeof mode === 'function') (cb = mode), (mode = null)

          return go$open(path, flags, mode, cb)

          function go$open(path, flags, mode, cb) {
            return fs$open(path, flags, mode, function (err, fd) {
              if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                enqueue([go$open, [path, flags, mode, cb]])
              else {
                if (typeof cb === 'function') cb.apply(this, arguments)
                retry()
              }
            })
          }
        }

        return fs
      }

      function enqueue(elem) {
        debug('ENQUEUE', elem[0].name, elem[1])
        queue.push(elem)
      }

      function retry() {
        var elem = queue.shift()
        if (elem) {
          debug('RETRY', elem[0].name, elem[1])
          elem[0].apply(null, elem[1])
        }
      }

      /***/
    },

    /***/ 3086: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var Stream = __nccwpck_require__(2413).Stream

      module.exports = legacy

      function legacy(fs) {
        return {
          ReadStream: ReadStream,
          WriteStream: WriteStream,
        }

        function ReadStream(path, options) {
          if (!(this instanceof ReadStream))
            return new ReadStream(path, options)

          Stream.call(this)

          var self = this

          this.path = path
          this.fd = null
          this.readable = true
          this.paused = false

          this.flags = 'r'
          this.mode = 438 /*=0666*/
          this.bufferSize = 64 * 1024

          options = options || {}

          // Mixin options into this
          var keys = Object.keys(options)
          for (var index = 0, length = keys.length; index < length; index++) {
            var key = keys[index]
            this[key] = options[key]
          }

          if (this.encoding) this.setEncoding(this.encoding)

          if (this.start !== undefined) {
            if ('number' !== typeof this.start) {
              throw TypeError('start must be a Number')
            }
            if (this.end === undefined) {
              this.end = Infinity
            } else if ('number' !== typeof this.end) {
              throw TypeError('end must be a Number')
            }

            if (this.start > this.end) {
              throw new Error('start must be <= end')
            }

            this.pos = this.start
          }

          if (this.fd !== null) {
            process.nextTick(function () {
              self._read()
            })
            return
          }

          fs.open(this.path, this.flags, this.mode, function (err, fd) {
            if (err) {
              self.emit('error', err)
              self.readable = false
              return
            }

            self.fd = fd
            self.emit('open', fd)
            self._read()
          })
        }

        function WriteStream(path, options) {
          if (!(this instanceof WriteStream))
            return new WriteStream(path, options)

          Stream.call(this)

          this.path = path
          this.fd = null
          this.writable = true

          this.flags = 'w'
          this.encoding = 'binary'
          this.mode = 438 /*=0666*/
          this.bytesWritten = 0

          options = options || {}

          // Mixin options into this
          var keys = Object.keys(options)
          for (var index = 0, length = keys.length; index < length; index++) {
            var key = keys[index]
            this[key] = options[key]
          }

          if (this.start !== undefined) {
            if ('number' !== typeof this.start) {
              throw TypeError('start must be a Number')
            }
            if (this.start < 0) {
              throw new Error('start must be >= zero')
            }

            this.pos = this.start
          }

          this.busy = false
          this._queue = []

          if (this.fd === null) {
            this._open = fs.open
            this._queue.push([
              this._open,
              this.path,
              this.flags,
              this.mode,
              undefined,
            ])
            this.flush()
          }
        }
      }

      /***/
    },

    /***/ 263: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var constants = __nccwpck_require__(7619)

      var origCwd = process.cwd
      var cwd = null

      var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform

      process.cwd = function () {
        if (!cwd) cwd = origCwd.call(process)
        return cwd
      }
      try {
        process.cwd()
      } catch (er) {}

      var chdir = process.chdir
      process.chdir = function (d) {
        cwd = null
        chdir.call(process, d)
      }

      module.exports = patch

      function patch(fs) {
        // (re-)implement some things that are known busted or missing.

        // lchmod, broken prior to 0.6.2
        // back-port the fix here.
        if (
          constants.hasOwnProperty('O_SYMLINK') &&
          process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)
        ) {
          patchLchmod(fs)
        }

        // lutimes implementation, or no-op
        if (!fs.lutimes) {
          patchLutimes(fs)
        }

        // https://github.com/isaacs/node-graceful-fs/issues/4
        // Chown should not fail on einval or eperm if non-root.
        // It should not fail on enosys ever, as this just indicates
        // that a fs doesn't support the intended operation.

        fs.chown = chownFix(fs.chown)
        fs.fchown = chownFix(fs.fchown)
        fs.lchown = chownFix(fs.lchown)

        fs.chmod = chmodFix(fs.chmod)
        fs.fchmod = chmodFix(fs.fchmod)
        fs.lchmod = chmodFix(fs.lchmod)

        fs.chownSync = chownFixSync(fs.chownSync)
        fs.fchownSync = chownFixSync(fs.fchownSync)
        fs.lchownSync = chownFixSync(fs.lchownSync)

        fs.chmodSync = chmodFixSync(fs.chmodSync)
        fs.fchmodSync = chmodFixSync(fs.fchmodSync)
        fs.lchmodSync = chmodFixSync(fs.lchmodSync)

        fs.stat = statFix(fs.stat)
        fs.fstat = statFix(fs.fstat)
        fs.lstat = statFix(fs.lstat)

        fs.statSync = statFixSync(fs.statSync)
        fs.fstatSync = statFixSync(fs.fstatSync)
        fs.lstatSync = statFixSync(fs.lstatSync)

        // if lchmod/lchown do not exist, then make them no-ops
        if (!fs.lchmod) {
          fs.lchmod = function (path, mode, cb) {
            if (cb) process.nextTick(cb)
          }
          fs.lchmodSync = function () {}
        }
        if (!fs.lchown) {
          fs.lchown = function (path, uid, gid, cb) {
            if (cb) process.nextTick(cb)
          }
          fs.lchownSync = function () {}
        }

        // on Windows, A/V software can lock the directory, causing this
        // to fail with an EACCES or EPERM if the directory contains newly
        // created files.  Try again on failure, for up to 60 seconds.

        // Set the timeout this long because some Windows Anti-Virus, such as Parity
        // bit9, may lock files for up to a minute, causing npm package install
        // failures. Also, take care to yield the scheduler. Windows scheduling gives
        // CPU to a busy looping process, which can cause the program causing the lock
        // contention to be starved of CPU by node, so the contention doesn't resolve.
        if (platform === 'win32') {
          fs.rename = (function (fs$rename) {
            return function (from, to, cb) {
              var start = Date.now()
              var backoff = 0
              fs$rename(from, to, function CB(er) {
                if (
                  er &&
                  (er.code === 'EACCES' || er.code === 'EPERM') &&
                  Date.now() - start < 60000
                ) {
                  setTimeout(function () {
                    fs.stat(to, function (stater, st) {
                      if (stater && stater.code === 'ENOENT')
                        fs$rename(from, to, CB)
                      else cb(er)
                    })
                  }, backoff)
                  if (backoff < 100) backoff += 10
                  return
                }
                if (cb) cb(er)
              })
            }
          })(fs.rename)
        }

        // if read() returns EAGAIN, then just try it again.
        fs.read = (function (fs$read) {
          return function (fd, buffer, offset, length, position, callback_) {
            var callback
            if (callback_ && typeof callback_ === 'function') {
              var eagCounter = 0
              callback = function (er, _, __) {
                if (er && er.code === 'EAGAIN' && eagCounter < 10) {
                  eagCounter++
                  return fs$read.call(
                    fs,
                    fd,
                    buffer,
                    offset,
                    length,
                    position,
                    callback
                  )
                }
                callback_.apply(this, arguments)
              }
            }
            return fs$read.call(
              fs,
              fd,
              buffer,
              offset,
              length,
              position,
              callback
            )
          }
        })(fs.read)

        fs.readSync = (function (fs$readSync) {
          return function (fd, buffer, offset, length, position) {
            var eagCounter = 0
            while (true) {
              try {
                return fs$readSync.call(
                  fs,
                  fd,
                  buffer,
                  offset,
                  length,
                  position
                )
              } catch (er) {
                if (er.code === 'EAGAIN' && eagCounter < 10) {
                  eagCounter++
                  continue
                }
                throw er
              }
            }
          }
        })(fs.readSync)

        function patchLchmod(fs) {
          fs.lchmod = function (path, mode, callback) {
            fs.open(
              path,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode,
              function (err, fd) {
                if (err) {
                  if (callback) callback(err)
                  return
                }
                // prefer to return the chmod error, if one occurs,
                // but still try to close, and report closing errors if they occur.
                fs.fchmod(fd, mode, function (err) {
                  fs.close(fd, function (err2) {
                    if (callback) callback(err || err2)
                  })
                })
              }
            )
          }

          fs.lchmodSync = function (path, mode) {
            var fd = fs.openSync(
              path,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode
            )

            // prefer to return the chmod error, if one occurs,
            // but still try to close, and report closing errors if they occur.
            var threw = true
            var ret
            try {
              ret = fs.fchmodSync(fd, mode)
              threw = false
            } finally {
              if (threw) {
                try {
                  fs.closeSync(fd)
                } catch (er) {}
              } else {
                fs.closeSync(fd)
              }
            }
            return ret
          }
        }

        function patchLutimes(fs) {
          if (constants.hasOwnProperty('O_SYMLINK')) {
            fs.lutimes = function (path, at, mt, cb) {
              fs.open(path, constants.O_SYMLINK, function (er, fd) {
                if (er) {
                  if (cb) cb(er)
                  return
                }
                fs.futimes(fd, at, mt, function (er) {
                  fs.close(fd, function (er2) {
                    if (cb) cb(er || er2)
                  })
                })
              })
            }

            fs.lutimesSync = function (path, at, mt) {
              var fd = fs.openSync(path, constants.O_SYMLINK)
              var ret
              var threw = true
              try {
                ret = fs.futimesSync(fd, at, mt)
                threw = false
              } finally {
                if (threw) {
                  try {
                    fs.closeSync(fd)
                  } catch (er) {}
                } else {
                  fs.closeSync(fd)
                }
              }
              return ret
            }
          } else {
            fs.lutimes = function (_a, _b, _c, cb) {
              if (cb) process.nextTick(cb)
            }
            fs.lutimesSync = function () {}
          }
        }

        function chmodFix(orig) {
          if (!orig) return orig
          return function (target, mode, cb) {
            return orig.call(fs, target, mode, function (er) {
              if (chownErOk(er)) er = null
              if (cb) cb.apply(this, arguments)
            })
          }
        }

        function chmodFixSync(orig) {
          if (!orig) return orig
          return function (target, mode) {
            try {
              return orig.call(fs, target, mode)
            } catch (er) {
              if (!chownErOk(er)) throw er
            }
          }
        }

        function chownFix(orig) {
          if (!orig) return orig
          return function (target, uid, gid, cb) {
            return orig.call(fs, target, uid, gid, function (er) {
              if (chownErOk(er)) er = null
              if (cb) cb.apply(this, arguments)
            })
          }
        }

        function chownFixSync(orig) {
          if (!orig) return orig
          return function (target, uid, gid) {
            try {
              return orig.call(fs, target, uid, gid)
            } catch (er) {
              if (!chownErOk(er)) throw er
            }
          }
        }

        function statFix(orig) {
          if (!orig) return orig
          // Older versions of Node erroneously returned signed integers for
          // uid + gid.
          return function (target, cb) {
            return orig.call(fs, target, function (er, stats) {
              if (!stats) return cb.apply(this, arguments)
              if (stats.uid < 0) stats.uid += 0x100000000
              if (stats.gid < 0) stats.gid += 0x100000000
              if (cb) cb.apply(this, arguments)
            })
          }
        }

        function statFixSync(orig) {
          if (!orig) return orig
          // Older versions of Node erroneously returned signed integers for
          // uid + gid.
          return function (target) {
            var stats = orig.call(fs, target)
            if (stats.uid < 0) stats.uid += 0x100000000
            if (stats.gid < 0) stats.gid += 0x100000000
            return stats
          }
        }

        // ENOSYS means that the fs doesn't support the op. Just ignore
        // that, because it doesn't matter.
        //
        // if there's no getuid, or if getuid() is something other
        // than 0, and the error is EINVAL or EPERM, then just ignore
        // it.
        //
        // This specific case is a silent failure in cp, install, tar,
        // and most other unix tools that manage permissions.
        //
        // When running as root, or if other types of errors are
        // encountered, then it's strict.
        function chownErOk(er) {
          if (!er) return true

          if (er.code === 'ENOSYS') return true

          var nonroot = !process.getuid || process.getuid() !== 0
          if (nonroot) {
            if (er.code === 'EINVAL' || er.code === 'EPERM') return true
          }

          return false
        }
      }

      /***/
    },

    /***/ 6160: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      var _fs
      try {
        _fs = __nccwpck_require__(7758)
      } catch (_) {
        _fs = __nccwpck_require__(5747)
      }

      function readFile(file, options, callback) {
        if (callback == null) {
          callback = options
          options = {}
        }

        if (typeof options === 'string') {
          options = { encoding: options }
        }

        options = options || {}
        var fs = options.fs || _fs

        var shouldThrow = true
        if ('throws' in options) {
          shouldThrow = options.throws
        }

        fs.readFile(file, options, function (err, data) {
          if (err) return callback(err)

          data = stripBom(data)

          var obj
          try {
            obj = JSON.parse(data, options ? options.reviver : null)
          } catch (err2) {
            if (shouldThrow) {
              err2.message = file + ': ' + err2.message
              return callback(err2)
            } else {
              return callback(null, null)
            }
          }

          callback(null, obj)
        })
      }

      function readFileSync(file, options) {
        options = options || {}
        if (typeof options === 'string') {
          options = { encoding: options }
        }

        var fs = options.fs || _fs

        var shouldThrow = true
        if ('throws' in options) {
          shouldThrow = options.throws
        }

        try {
          var content = fs.readFileSync(file, options)
          content = stripBom(content)
          return JSON.parse(content, options.reviver)
        } catch (err) {
          if (shouldThrow) {
            err.message = file + ': ' + err.message
            throw err
          } else {
            return null
          }
        }
      }

      function stringify(obj, options) {
        var spaces
        var EOL = '\n'
        if (typeof options === 'object' && options !== null) {
          if (options.spaces) {
            spaces = options.spaces
          }
          if (options.EOL) {
            EOL = options.EOL
          }
        }

        var str = JSON.stringify(obj, options ? options.replacer : null, spaces)

        return str.replace(/\n/g, EOL) + EOL
      }

      function writeFile(file, obj, options, callback) {
        if (callback == null) {
          callback = options
          options = {}
        }
        options = options || {}
        var fs = options.fs || _fs

        var str = ''
        try {
          str = stringify(obj, options)
        } catch (err) {
          // Need to return whether a callback was passed or not
          if (callback) callback(err, null)
          return
        }

        fs.writeFile(file, str, options, callback)
      }

      function writeFileSync(file, obj, options) {
        options = options || {}
        var fs = options.fs || _fs

        var str = stringify(obj, options)
        // not sure if fs.writeFileSync returns anything, but just in case
        return fs.writeFileSync(file, str, options)
      }

      function stripBom(content) {
        // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
        if (Buffer.isBuffer(content)) content = content.toString('utf8')
        content = content.replace(/^\uFEFF/, '')
        return content
      }

      var jsonfile = {
        readFile: readFile,
        readFileSync: readFileSync,
        writeFile: writeFile,
        writeFileSync: writeFileSync,
      }

      module.exports = jsonfile

      /***/
    },

    /***/ 7002: /***/ (module) => {
      /**
       * lodash (Custom Build) <https://lodash.com/>
       * Build: `lodash modularize exports="npm" -o ./`
       * Copyright jQuery Foundation and other contributors <https://jquery.org/>
       * Released under MIT license <https://lodash.com/license>
       * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
       * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
       */

      /** Used as references for various `Number` constants. */
      var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e308,
        NAN = 0 / 0

      /** `Object#toString` result references. */
      var symbolTag = '[object Symbol]'

      /** Used to match leading and trailing whitespace. */
      var reTrim = /^\s+|\s+$/g

      /** Used to detect bad signed hexadecimal string values. */
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i

      /** Used to detect binary string values. */
      var reIsBinary = /^0b[01]+$/i

      /** Used to detect octal string values. */
      var reIsOctal = /^0o[0-7]+$/i

      /** Used to compose unicode character classes. */
      var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
        rsComboSymbolsRange = '\\u20d0-\\u20f0',
        rsVarRange = '\\ufe0e\\ufe0f'

      /** Used to compose unicode capture groups. */
      var rsAstral = '[' + rsAstralRange + ']',
        rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsZWJ = '\\u200d'

      /** Used to compose unicode regexes. */
      var reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin =
          '(?:' +
          rsZWJ +
          '(?:' +
          [rsNonAstral, rsRegional, rsSurrPair].join('|') +
          ')' +
          rsOptVar +
          reOptMod +
          ')*',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsSymbol =
          '(?:' +
          [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral,
          ].join('|') +
          ')'

      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
      var reUnicode = RegExp(
        rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
        'g'
      )

      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
      var reHasUnicode = RegExp(
        '[' +
          rsZWJ +
          rsAstralRange +
          rsComboMarksRange +
          rsComboSymbolsRange +
          rsVarRange +
          ']'
      )

      /** Built-in method references without a dependency on `root`. */
      var freeParseInt = parseInt

      /** Detect free variable `global` from Node.js. */
      var freeGlobal =
        typeof global == 'object' &&
        global &&
        global.Object === Object &&
        global

      /** Detect free variable `self`. */
      var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self

      /** Used as a reference to the global object. */
      var root = freeGlobal || freeSelf || Function('return this')()

      /**
       * Gets the size of an ASCII `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      var asciiSize = baseProperty('length')

      /**
       * Converts an ASCII `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function asciiToArray(string) {
        return string.split('')
      }

      /**
       * The base implementation of `_.property` without support for deep paths.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function baseProperty(key) {
        return function (object) {
          return object == null ? undefined : object[key]
        }
      }

      /**
       * Checks if `string` contains Unicode symbols.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
       */
      function hasUnicode(string) {
        return reHasUnicode.test(string)
      }

      /**
       * Gets the number of symbols in `string`.
       *
       * @private
       * @param {string} string The string to inspect.
       * @returns {number} Returns the string size.
       */
      function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string)
      }

      /**
       * Converts `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function stringToArray(string) {
        return hasUnicode(string)
          ? unicodeToArray(string)
          : asciiToArray(string)
      }

      /**
       * Gets the size of a Unicode `string`.
       *
       * @private
       * @param {string} string The string inspect.
       * @returns {number} Returns the string size.
       */
      function unicodeSize(string) {
        var result = (reUnicode.lastIndex = 0)
        while (reUnicode.test(string)) {
          result++
        }
        return result
      }

      /**
       * Converts a Unicode `string` to an array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the converted array.
       */
      function unicodeToArray(string) {
        return string.match(reUnicode) || []
      }

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var objectToString = objectProto.toString

      /** Built-in value references. */
      var Symbol = root.Symbol

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
        nativeFloor = Math.floor

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = ''
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string
          }
          n = nativeFloor(n / 2)
          if (n) {
            string += string
          }
        } while (n)

        return result
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
          length = array.length

        if (start < 0) {
          start = -start > length ? 0 : length + start
        }
        end = end > length ? length : end
        if (end < 0) {
          end += length
        }
        length = start > end ? 0 : (end - start) >>> 0
        start >>>= 0

        var result = Array(length)
        while (++index < length) {
          result[index] = array[index + start]
        }
        return result
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : ''
        }
        var result = value + ''
        return result == '0' && 1 / value == -INFINITY ? '-0' : result
      }

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length
        end = end === undefined ? length : end
        return !start && end >= length ? array : baseSlice(array, start, end)
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars)

        var charsLength = chars.length
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)))
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length)
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value
        return !!value && (type == 'object' || type == 'function')
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return !!value && typeof value == 'object'
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return (
          typeof value == 'symbol' ||
          (isObjectLike(value) && objectToString.call(value) == symbolTag)
        )
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0
        }
        value = toNumber(value)
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1
          return sign * MAX_INTEGER
        }
        return value === value ? value : 0
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
          remainder = result % 1

        return result === result ? (remainder ? result - remainder : result) : 0
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value
        }
        if (isSymbol(value)) {
          return NAN
        }
        if (isObject(value)) {
          var other =
            typeof value.valueOf == 'function' ? value.valueOf() : value
          value = isObject(other) ? other + '' : other
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value
        }
        value = value.replace(reTrim, '')
        var isBinary = reIsBinary.test(value)
        return isBinary || reIsOctal.test(value)
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : reIsBadHex.test(value)
          ? NAN
          : +value
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value)
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string)
        length = toInteger(length)

        var strLength = length ? stringSize(string) : 0
        return length && strLength < length
          ? string + createPadding(length - strLength, chars)
          : string
      }

      module.exports = padEnd

      /***/
    },

    /***/ 250: /***/ function (module, exports, __nccwpck_require__) {
      /* module decorator */ module = __nccwpck_require__.nmd(module)
      /**
       * @license
       * Lodash <https://lodash.com/>
       * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
       * Released under MIT license <https://lodash.com/license>
       * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
       * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
       */
      ;(function () {
        /** Used as a safe reference for `undefined` in pre-ES5 environments. */
        var undefined

        /** Used as the semantic version number. */
        var VERSION = '4.17.20'

        /** Used as the size to enable large array optimizations. */
        var LARGE_ARRAY_SIZE = 200

        /** Error message constants. */
        var CORE_ERROR_TEXT =
            'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          FUNC_ERROR_TEXT = 'Expected a function'

        /** Used to stand-in for `undefined` hash values. */
        var HASH_UNDEFINED = '__lodash_hash_undefined__'

        /** Used as the maximum memoize cache size. */
        var MAX_MEMOIZE_SIZE = 500

        /** Used as the internal argument placeholder. */
        var PLACEHOLDER = '__lodash_placeholder__'

        /** Used to compose bitmasks for cloning. */
        var CLONE_DEEP_FLAG = 1,
          CLONE_FLAT_FLAG = 2,
          CLONE_SYMBOLS_FLAG = 4

        /** Used to compose bitmasks for value comparisons. */
        var COMPARE_PARTIAL_FLAG = 1,
          COMPARE_UNORDERED_FLAG = 2

        /** Used to compose bitmasks for function metadata. */
        var WRAP_BIND_FLAG = 1,
          WRAP_BIND_KEY_FLAG = 2,
          WRAP_CURRY_BOUND_FLAG = 4,
          WRAP_CURRY_FLAG = 8,
          WRAP_CURRY_RIGHT_FLAG = 16,
          WRAP_PARTIAL_FLAG = 32,
          WRAP_PARTIAL_RIGHT_FLAG = 64,
          WRAP_ARY_FLAG = 128,
          WRAP_REARG_FLAG = 256,
          WRAP_FLIP_FLAG = 512

        /** Used as default options for `_.truncate`. */
        var DEFAULT_TRUNC_LENGTH = 30,
          DEFAULT_TRUNC_OMISSION = '...'

        /** Used to detect hot functions by number of calls within a span of milliseconds. */
        var HOT_COUNT = 800,
          HOT_SPAN = 16

        /** Used to indicate the type of lazy iteratees. */
        var LAZY_FILTER_FLAG = 1,
          LAZY_MAP_FLAG = 2,
          LAZY_WHILE_FLAG = 3

        /** Used as references for various `Number` constants. */
        var INFINITY = 1 / 0,
          MAX_SAFE_INTEGER = 9007199254740991,
          MAX_INTEGER = 1.7976931348623157e308,
          NAN = 0 / 0

        /** Used as references for the maximum length and index of an array. */
        var MAX_ARRAY_LENGTH = 4294967295,
          MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
          HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1

        /** Used to associate wrap methods with their bit flags. */
        var wrapFlags = [
          ['ary', WRAP_ARY_FLAG],
          ['bind', WRAP_BIND_FLAG],
          ['bindKey', WRAP_BIND_KEY_FLAG],
          ['curry', WRAP_CURRY_FLAG],
          ['curryRight', WRAP_CURRY_RIGHT_FLAG],
          ['flip', WRAP_FLIP_FLAG],
          ['partial', WRAP_PARTIAL_FLAG],
          ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
          ['rearg', WRAP_REARG_FLAG],
        ]

        /** `Object#toString` result references. */
        var argsTag = '[object Arguments]',
          arrayTag = '[object Array]',
          asyncTag = '[object AsyncFunction]',
          boolTag = '[object Boolean]',
          dateTag = '[object Date]',
          domExcTag = '[object DOMException]',
          errorTag = '[object Error]',
          funcTag = '[object Function]',
          genTag = '[object GeneratorFunction]',
          mapTag = '[object Map]',
          numberTag = '[object Number]',
          nullTag = '[object Null]',
          objectTag = '[object Object]',
          promiseTag = '[object Promise]',
          proxyTag = '[object Proxy]',
          regexpTag = '[object RegExp]',
          setTag = '[object Set]',
          stringTag = '[object String]',
          symbolTag = '[object Symbol]',
          undefinedTag = '[object Undefined]',
          weakMapTag = '[object WeakMap]',
          weakSetTag = '[object WeakSet]'

        var arrayBufferTag = '[object ArrayBuffer]',
          dataViewTag = '[object DataView]',
          float32Tag = '[object Float32Array]',
          float64Tag = '[object Float64Array]',
          int8Tag = '[object Int8Array]',
          int16Tag = '[object Int16Array]',
          int32Tag = '[object Int32Array]',
          uint8Tag = '[object Uint8Array]',
          uint8ClampedTag = '[object Uint8ClampedArray]',
          uint16Tag = '[object Uint16Array]',
          uint32Tag = '[object Uint32Array]'

        /** Used to match empty string literals in compiled template source. */
        var reEmptyStringLeading = /\b__p \+= '';/g,
          reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
          reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g

        /** Used to match HTML entities and HTML characters. */
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
          reUnescapedHtml = /[&<>"']/g,
          reHasEscapedHtml = RegExp(reEscapedHtml.source),
          reHasUnescapedHtml = RegExp(reUnescapedHtml.source)

        /** Used to match template delimiters. */
        var reEscape = /<%-([\s\S]+?)%>/g,
          reEvaluate = /<%([\s\S]+?)%>/g,
          reInterpolate = /<%=([\s\S]+?)%>/g

        /** Used to match property names within property paths. */
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          reIsPlainProp = /^\w*$/,
          rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g

        /**
         * Used to match `RegExp`
         * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
         */
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
          reHasRegExpChar = RegExp(reRegExpChar.source)

        /** Used to match leading and trailing whitespace. */
        var reTrim = /^\s+|\s+$/g,
          reTrimStart = /^\s+/,
          reTrimEnd = /\s+$/

        /** Used to match wrap detail comments. */
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
          reSplitDetails = /,? & /

        /** Used to match words composed of alphanumeric characters. */
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g

        /** Used to match backslashes in property paths. */
        var reEscapeChar = /\\(\\)?/g

        /**
         * Used to match
         * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
         */
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g

        /** Used to match `RegExp` flags from their coerced string values. */
        var reFlags = /\w*$/

        /** Used to detect bad signed hexadecimal string values. */
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i

        /** Used to detect binary string values. */
        var reIsBinary = /^0b[01]+$/i

        /** Used to detect host constructors (Safari). */
        var reIsHostCtor = /^\[object .+?Constructor\]$/

        /** Used to detect octal string values. */
        var reIsOctal = /^0o[0-7]+$/i

        /** Used to detect unsigned integer values. */
        var reIsUint = /^(?:0|[1-9]\d*)$/

        /** Used to match Latin Unicode letters (excluding mathematical operators). */
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g

        /** Used to ensure capturing order of template delimiters. */
        var reNoMatch = /($^)/

        /** Used to match unescaped characters in compiled string literals. */
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g

        /** Used to compose unicode character classes. */
        var rsAstralRange = '\\ud800-\\udfff',
          rsComboMarksRange = '\\u0300-\\u036f',
          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
          rsComboSymbolsRange = '\\u20d0-\\u20ff',
          rsComboRange =
            rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
          rsDingbatRange = '\\u2700-\\u27bf',
          rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
          rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
          rsPunctuationRange = '\\u2000-\\u206f',
          rsSpaceRange =
            ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          rsVarRange = '\\ufe0e\\ufe0f',
          rsBreakRange =
            rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange

        /** Used to compose unicode capture groups. */
        var rsApos = "['\u2019]",
          rsAstral = '[' + rsAstralRange + ']',
          rsBreak = '[' + rsBreakRange + ']',
          rsCombo = '[' + rsComboRange + ']',
          rsDigits = '\\d+',
          rsDingbat = '[' + rsDingbatRange + ']',
          rsLower = '[' + rsLowerRange + ']',
          rsMisc =
            '[^' +
            rsAstralRange +
            rsBreakRange +
            rsDigits +
            rsDingbatRange +
            rsLowerRange +
            rsUpperRange +
            ']',
          rsFitz = '\\ud83c[\\udffb-\\udfff]',
          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
          rsNonAstral = '[^' + rsAstralRange + ']',
          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          rsUpper = '[' + rsUpperRange + ']',
          rsZWJ = '\\u200d'

        /** Used to compose unicode regexes. */
        var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
          rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
          rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
          rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
          reOptMod = rsModifier + '?',
          rsOptVar = '[' + rsVarRange + ']?',
          rsOptJoin =
            '(?:' +
            rsZWJ +
            '(?:' +
            [rsNonAstral, rsRegional, rsSurrPair].join('|') +
            ')' +
            rsOptVar +
            reOptMod +
            ')*',
          rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
          rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
          rsSeq = rsOptVar + reOptMod + rsOptJoin,
          rsEmoji =
            '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
          rsSymbol =
            '(?:' +
            [
              rsNonAstral + rsCombo + '?',
              rsCombo,
              rsRegional,
              rsSurrPair,
              rsAstral,
            ].join('|') +
            ')'

        /** Used to match apostrophes. */
        var reApos = RegExp(rsApos, 'g')

        /**
         * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
         * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
         */
        var reComboMark = RegExp(rsCombo, 'g')

        /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
        var reUnicode = RegExp(
          rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq,
          'g'
        )

        /** Used to match complex or compound words. */
        var reUnicodeWord = RegExp(
          [
            rsUpper +
              '?' +
              rsLower +
              '+' +
              rsOptContrLower +
              '(?=' +
              [rsBreak, rsUpper, '$'].join('|') +
              ')',
            rsMiscUpper +
              '+' +
              rsOptContrUpper +
              '(?=' +
              [rsBreak, rsUpper + rsMiscLower, '$'].join('|') +
              ')',
            rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
            rsUpper + '+' + rsOptContrUpper,
            rsOrdUpper,
            rsOrdLower,
            rsDigits,
            rsEmoji,
          ].join('|'),
          'g'
        )

        /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
        var reHasUnicode = RegExp(
          '[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']'
        )

        /** Used to detect strings that need a more robust regexp to match words. */
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/

        /** Used to assign default `context` object properties. */
        var contextProps = [
          'Array',
          'Buffer',
          'DataView',
          'Date',
          'Error',
          'Float32Array',
          'Float64Array',
          'Function',
          'Int8Array',
          'Int16Array',
          'Int32Array',
          'Map',
          'Math',
          'Object',
          'Promise',
          'RegExp',
          'Set',
          'String',
          'Symbol',
          'TypeError',
          'Uint8Array',
          'Uint8ClampedArray',
          'Uint16Array',
          'Uint32Array',
          'WeakMap',
          '_',
          'clearTimeout',
          'isFinite',
          'parseInt',
          'setTimeout',
        ]

        /** Used to make template sourceURLs easier to identify. */
        var templateCounter = -1

        /** Used to identify `toStringTag` values of typed arrays. */
        var typedArrayTags = {}
        typedArrayTags[float32Tag] = typedArrayTags[
          float64Tag
        ] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[
          int32Tag
        ] = typedArrayTags[uint8Tag] = typedArrayTags[
          uint8ClampedTag
        ] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[
          arrayBufferTag
        ] = typedArrayTags[boolTag] = typedArrayTags[
          dataViewTag
        ] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[
          funcTag
        ] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[
          objectTag
        ] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[
          stringTag
        ] = typedArrayTags[weakMapTag] = false

        /** Used to identify `toStringTag` values supported by `_.clone`. */
        var cloneableTags = {}
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[
          arrayBufferTag
        ] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[
          dateTag
        ] = cloneableTags[float32Tag] = cloneableTags[
          float64Tag
        ] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[
          int32Tag
        ] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[
          objectTag
        ] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[
          stringTag
        ] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[
          uint8ClampedTag
        ] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[
          weakMapTag
        ] = false

        /** Used to map Latin Unicode letters to basic Latin letters. */
        var deburredLetters = {
          // Latin-1 Supplement block.
          '\xc0': 'A',
          '\xc1': 'A',
          '\xc2': 'A',
          '\xc3': 'A',
          '\xc4': 'A',
          '\xc5': 'A',
          '\xe0': 'a',
          '\xe1': 'a',
          '\xe2': 'a',
          '\xe3': 'a',
          '\xe4': 'a',
          '\xe5': 'a',
          '\xc7': 'C',
          '\xe7': 'c',
          '\xd0': 'D',
          '\xf0': 'd',
          '\xc8': 'E',
          '\xc9': 'E',
          '\xca': 'E',
          '\xcb': 'E',
          '\xe8': 'e',
          '\xe9': 'e',
          '\xea': 'e',
          '\xeb': 'e',
          '\xcc': 'I',
          '\xcd': 'I',
          '\xce': 'I',
          '\xcf': 'I',
          '\xec': 'i',
          '\xed': 'i',
          '\xee': 'i',
          '\xef': 'i',
          '\xd1': 'N',
          '\xf1': 'n',
          '\xd2': 'O',
          '\xd3': 'O',
          '\xd4': 'O',
          '\xd5': 'O',
          '\xd6': 'O',
          '\xd8': 'O',
          '\xf2': 'o',
          '\xf3': 'o',
          '\xf4': 'o',
          '\xf5': 'o',
          '\xf6': 'o',
          '\xf8': 'o',
          '\xd9': 'U',
          '\xda': 'U',
          '\xdb': 'U',
          '\xdc': 'U',
          '\xf9': 'u',
          '\xfa': 'u',
          '\xfb': 'u',
          '\xfc': 'u',
          '\xdd': 'Y',
          '\xfd': 'y',
          '\xff': 'y',
          '\xc6': 'Ae',
          '\xe6': 'ae',
          '\xde': 'Th',
          '\xfe': 'th',
          '\xdf': 'ss',
          // Latin Extended-A block.
          '\u0100': 'A',
          '\u0102': 'A',
          '\u0104': 'A',
          '\u0101': 'a',
          '\u0103': 'a',
          '\u0105': 'a',
          '\u0106': 'C',
          '\u0108': 'C',
          '\u010a': 'C',
          '\u010c': 'C',
          '\u0107': 'c',
          '\u0109': 'c',
          '\u010b': 'c',
          '\u010d': 'c',
          '\u010e': 'D',
          '\u0110': 'D',
          '\u010f': 'd',
          '\u0111': 'd',
          '\u0112': 'E',
          '\u0114': 'E',
          '\u0116': 'E',
          '\u0118': 'E',
          '\u011a': 'E',
          '\u0113': 'e',
          '\u0115': 'e',
          '\u0117': 'e',
          '\u0119': 'e',
          '\u011b': 'e',
          '\u011c': 'G',
          '\u011e': 'G',
          '\u0120': 'G',
          '\u0122': 'G',
          '\u011d': 'g',
          '\u011f': 'g',
          '\u0121': 'g',
          '\u0123': 'g',
          '\u0124': 'H',
          '\u0126': 'H',
          '\u0125': 'h',
          '\u0127': 'h',
          '\u0128': 'I',
          '\u012a': 'I',
          '\u012c': 'I',
          '\u012e': 'I',
          '\u0130': 'I',
          '\u0129': 'i',
          '\u012b': 'i',
          '\u012d': 'i',
          '\u012f': 'i',
          '\u0131': 'i',
          '\u0134': 'J',
          '\u0135': 'j',
          '\u0136': 'K',
          '\u0137': 'k',
          '\u0138': 'k',
          '\u0139': 'L',
          '\u013b': 'L',
          '\u013d': 'L',
          '\u013f': 'L',
          '\u0141': 'L',
          '\u013a': 'l',
          '\u013c': 'l',
          '\u013e': 'l',
          '\u0140': 'l',
          '\u0142': 'l',
          '\u0143': 'N',
          '\u0145': 'N',
          '\u0147': 'N',
          '\u014a': 'N',
          '\u0144': 'n',
          '\u0146': 'n',
          '\u0148': 'n',
          '\u014b': 'n',
          '\u014c': 'O',
          '\u014e': 'O',
          '\u0150': 'O',
          '\u014d': 'o',
          '\u014f': 'o',
          '\u0151': 'o',
          '\u0154': 'R',
          '\u0156': 'R',
          '\u0158': 'R',
          '\u0155': 'r',
          '\u0157': 'r',
          '\u0159': 'r',
          '\u015a': 'S',
          '\u015c': 'S',
          '\u015e': 'S',
          '\u0160': 'S',
          '\u015b': 's',
          '\u015d': 's',
          '\u015f': 's',
          '\u0161': 's',
          '\u0162': 'T',
          '\u0164': 'T',
          '\u0166': 'T',
          '\u0163': 't',
          '\u0165': 't',
          '\u0167': 't',
          '\u0168': 'U',
          '\u016a': 'U',
          '\u016c': 'U',
          '\u016e': 'U',
          '\u0170': 'U',
          '\u0172': 'U',
          '\u0169': 'u',
          '\u016b': 'u',
          '\u016d': 'u',
          '\u016f': 'u',
          '\u0171': 'u',
          '\u0173': 'u',
          '\u0174': 'W',
          '\u0175': 'w',
          '\u0176': 'Y',
          '\u0177': 'y',
          '\u0178': 'Y',
          '\u0179': 'Z',
          '\u017b': 'Z',
          '\u017d': 'Z',
          '\u017a': 'z',
          '\u017c': 'z',
          '\u017e': 'z',
          '\u0132': 'IJ',
          '\u0133': 'ij',
          '\u0152': 'Oe',
          '\u0153': 'oe',
          '\u0149': "'n",
          '\u017f': 's',
        }

        /** Used to map characters to HTML entities. */
        var htmlEscapes = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#39;',
        }

        /** Used to map HTML entities to characters. */
        var htmlUnescapes = {
          '&amp;': '&',
          '&lt;': '<',
          '&gt;': '>',
          '&quot;': '"',
          '&#39;': "'",
        }

        /** Used to escape characters for inclusion in compiled string literals. */
        var stringEscapes = {
          '\\': '\\',
          "'": "'",
          '\n': 'n',
          '\r': 'r',
          '\u2028': 'u2028',
          '\u2029': 'u2029',
        }

        /** Built-in method references without a dependency on `root`. */
        var freeParseFloat = parseFloat,
          freeParseInt = parseInt

        /** Detect free variable `global` from Node.js. */
        var freeGlobal =
          typeof global == 'object' &&
          global &&
          global.Object === Object &&
          global

        /** Detect free variable `self`. */
        var freeSelf =
          typeof self == 'object' && self && self.Object === Object && self

        /** Used as a reference to the global object. */
        var root = freeGlobal || freeSelf || Function('return this')()

        /** Detect free variable `exports`. */
        var freeExports = true && exports && !exports.nodeType && exports

        /** Detect free variable `module`. */
        var freeModule =
          freeExports &&
          'object' == 'object' &&
          module &&
          !module.nodeType &&
          module

        /** Detect the popular CommonJS extension `module.exports`. */
        var moduleExports = freeModule && freeModule.exports === freeExports

        /** Detect free variable `process` from Node.js. */
        var freeProcess = moduleExports && freeGlobal.process

        /** Used to access faster Node.js helpers. */
        var nodeUtil = (function () {
          try {
            // Use `util.types` for Node.js 10+.
            var types =
              freeModule &&
              freeModule.require &&
              freeModule.require('util').types

            if (types) {
              return types
            }

            // Legacy `process.binding('util')` for Node.js < 10.
            return (
              freeProcess && freeProcess.binding && freeProcess.binding('util')
            )
          } catch (e) {}
        })()

        /* Node.js helper references. */
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
          nodeIsDate = nodeUtil && nodeUtil.isDate,
          nodeIsMap = nodeUtil && nodeUtil.isMap,
          nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
          nodeIsSet = nodeUtil && nodeUtil.isSet,
          nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray

        /*--------------------------------------------------------------------------*/

        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg)
            case 1:
              return func.call(thisArg, args[0])
            case 2:
              return func.call(thisArg, args[0], args[1])
            case 3:
              return func.call(thisArg, args[0], args[1], args[2])
          }
          return func.apply(thisArg, args)
        }

        /**
         * A specialized version of `baseAggregator` for arrays.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} setter The function to set `accumulator` values.
         * @param {Function} iteratee The iteratee to transform keys.
         * @param {Object} accumulator The initial aggregated object.
         * @returns {Function} Returns `accumulator`.
         */
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            var value = array[index]
            setter(accumulator, value, iteratee(value), array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEach(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break
            }
          }
          return array
        }

        /**
         * A specialized version of `_.forEachRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length

          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break
            }
          }
          return array
        }

        /**
         * A specialized version of `_.every` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if all elements pass the predicate check,
         *  else `false`.
         */
        function arrayEvery(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false
            }
          }
          return true
        }

        /**
         * A specialized version of `_.filter` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {Array} Returns the new filtered array.
         */
        function arrayFilter(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = []

          while (++index < length) {
            var value = array[index]
            if (predicate(value, index, array)) {
              result[resIndex++] = value
            }
          }
          return result
        }

        /**
         * A specialized version of `_.includes` for arrays without support for
         * specifying an index to search from.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length
          return !!length && baseIndexOf(array, value, 0) > -1
        }

        /**
         * This function is like `arrayIncludes` except that it accepts a comparator.
         *
         * @private
         * @param {Array} [array] The array to inspect.
         * @param {*} target The value to search for.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {boolean} Returns `true` if `target` is found, else `false`.
         */
        function arrayIncludesWith(array, value, comparator) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (comparator(value, array[index])) {
              return true
            }
          }
          return false
        }

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */
        function arrayMap(array, iteratee) {
          var index = -1,
            length = array == null ? 0 : array.length,
            result = Array(length)

          while (++index < length) {
            result[index] = iteratee(array[index], index, array)
          }
          return result
        }

        /**
         * Appends the elements of `values` to `array`.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {Array} values The values to append.
         * @returns {Array} Returns `array`.
         */
        function arrayPush(array, values) {
          var index = -1,
            length = values.length,
            offset = array.length

          while (++index < length) {
            array[offset + index] = values[index]
          }
          return array
        }

        /**
         * A specialized version of `_.reduce` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the first element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1,
            length = array == null ? 0 : array.length

          if (initAccum && length) {
            accumulator = array[++index]
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.reduceRight` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} [accumulator] The initial value.
         * @param {boolean} [initAccum] Specify using the last element of `array` as
         *  the initial value.
         * @returns {*} Returns the accumulated value.
         */
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length
          if (initAccum && length) {
            accumulator = array[--length]
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array)
          }
          return accumulator
        }

        /**
         * A specialized version of `_.some` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} predicate The function invoked per iteration.
         * @returns {boolean} Returns `true` if any element passes the predicate check,
         *  else `false`.
         */
        function arraySome(array, predicate) {
          var index = -1,
            length = array == null ? 0 : array.length

          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true
            }
          }
          return false
        }

        /**
         * Gets the size of an ASCII `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        var asciiSize = baseProperty('length')

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function asciiToArray(string) {
          return string.split('')
        }

        /**
         * Splits an ASCII `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function asciiWords(string) {
          return string.match(reAsciiWord) || []
        }

        /**
         * The base implementation of methods like `_.findKey` and `_.findLastKey`,
         * without support for iteratee shorthands, which iterates over `collection`
         * using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the found element or its key, else `undefined`.
         */
        function baseFindKey(collection, predicate, eachFunc) {
          var result
          eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
              result = key
              return false
            }
          })
          return result
        }

        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
            index = fromIndex + (fromRight ? 1 : -1)

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index
            }
          }
          return -1
        }

        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOf(array, value, fromIndex) {
          return value === value
            ? strictIndexOf(array, value, fromIndex)
            : baseFindIndex(array, baseIsNaN, fromIndex)
        }

        /**
         * This function is like `baseIndexOf` except that it accepts a comparator.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @param {Function} comparator The comparator invoked per element.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1,
            length = array.length

          while (++index < length) {
            if (comparator(array[index], value)) {
              return index
            }
          }
          return -1
        }

        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */
        function baseIsNaN(value) {
          return value !== value
        }

        /**
         * The base implementation of `_.mean` and `_.meanBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the mean.
         */
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length
          return length ? baseSum(array, iteratee) / length : NAN
        }

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */
        function baseProperty(key) {
          return function (object) {
            return object == null ? undefined : object[key]
          }
        }

        /**
         * The base implementation of `_.propertyOf` without support for deep paths.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Function} Returns the new accessor function.
         */
        function basePropertyOf(object) {
          return function (key) {
            return object == null ? undefined : object[key]
          }
        }

        /**
         * The base implementation of `_.reduce` and `_.reduceRight`, without support
         * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
         *
         * @private
         * @param {Array|Object} collection The collection to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {*} accumulator The initial value.
         * @param {boolean} initAccum Specify using the first or last element of
         *  `collection` as the initial value.
         * @param {Function} eachFunc The function to iterate over `collection`.
         * @returns {*} Returns the accumulated value.
         */
        function baseReduce(
          collection,
          iteratee,
          accumulator,
          initAccum,
          eachFunc
        ) {
          eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum
              ? ((initAccum = false), value)
              : iteratee(accumulator, value, index, collection)
          })
          return accumulator
        }

        /**
         * The base implementation of `_.sortBy` which uses `comparer` to define the
         * sort order of `array` and replaces criteria objects with their corresponding
         * values.
         *
         * @private
         * @param {Array} array The array to sort.
         * @param {Function} comparer The function to define sort order.
         * @returns {Array} Returns `array`.
         */
        function baseSortBy(array, comparer) {
          var length = array.length

          array.sort(comparer)
          while (length--) {
            array[length] = array[length].value
          }
          return array
        }

        /**
         * The base implementation of `_.sum` and `_.sumBy` without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {number} Returns the sum.
         */
        function baseSum(array, iteratee) {
          var result,
            index = -1,
            length = array.length

          while (++index < length) {
            var current = iteratee(array[index])
            if (current !== undefined) {
              result = result === undefined ? current : result + current
            }
          }
          return result
        }

        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */
        function baseTimes(n, iteratee) {
          var index = -1,
            result = Array(n)

          while (++index < n) {
            result[index] = iteratee(index)
          }
          return result
        }

        /**
         * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
         * of key-value pairs for `object` corresponding to the property names of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the key-value pairs.
         */
        function baseToPairs(object, props) {
          return arrayMap(props, function (key) {
            return [key, object[key]]
          })
        }

        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */
        function baseUnary(func) {
          return function (value) {
            return func(value)
          }
        }

        /**
         * The base implementation of `_.values` and `_.valuesIn` which creates an
         * array of `object` property values corresponding to the property names
         * of `props`.
         *
         * @private
         * @param {Object} object The object to query.
         * @param {Array} props The property names to get values for.
         * @returns {Object} Returns the array of property values.
         */
        function baseValues(object, props) {
          return arrayMap(props, function (key) {
            return object[key]
          })
        }

        /**
         * Checks if a `cache` value for `key` exists.
         *
         * @private
         * @param {Object} cache The cache to query.
         * @param {string} key The key of the entry to check.
         * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
         */
        function cacheHas(cache, key) {
          return cache.has(key)
        }

        /**
         * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the first unmatched string symbol.
         */
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1,
            length = strSymbols.length

          while (
            ++index < length &&
            baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
          ) {}
          return index
        }

        /**
         * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
         * that is not found in the character symbols.
         *
         * @private
         * @param {Array} strSymbols The string symbols to inspect.
         * @param {Array} chrSymbols The character symbols to find.
         * @returns {number} Returns the index of the last unmatched string symbol.
         */
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length

          while (
            index-- &&
            baseIndexOf(chrSymbols, strSymbols[index], 0) > -1
          ) {}
          return index
        }

        /**
         * Gets the number of `placeholder` occurrences in `array`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} placeholder The placeholder to search for.
         * @returns {number} Returns the placeholder count.
         */
        function countHolders(array, placeholder) {
          var length = array.length,
            result = 0

          while (length--) {
            if (array[length] === placeholder) {
              ++result
            }
          }
          return result
        }

        /**
         * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
         * letters to basic Latin letters.
         *
         * @private
         * @param {string} letter The matched letter to deburr.
         * @returns {string} Returns the deburred letter.
         */
        var deburrLetter = basePropertyOf(deburredLetters)

        /**
         * Used by `_.escape` to convert characters to HTML entities.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        var escapeHtmlChar = basePropertyOf(htmlEscapes)

        /**
         * Used by `_.template` to escape characters for inclusion in compiled string literals.
         *
         * @private
         * @param {string} chr The matched character to escape.
         * @returns {string} Returns the escaped character.
         */
        function escapeStringChar(chr) {
          return '\\' + stringEscapes[chr]
        }

        /**
         * Gets the value at `key` of `object`.
         *
         * @private
         * @param {Object} [object] The object to query.
         * @param {string} key The key of the property to get.
         * @returns {*} Returns the property value.
         */
        function getValue(object, key) {
          return object == null ? undefined : object[key]
        }

        /**
         * Checks if `string` contains Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a symbol is found, else `false`.
         */
        function hasUnicode(string) {
          return reHasUnicode.test(string)
        }

        /**
         * Checks if `string` contains a word composed of Unicode symbols.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {boolean} Returns `true` if a word is found, else `false`.
         */
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string)
        }

        /**
         * Converts `iterator` to an array.
         *
         * @private
         * @param {Object} iterator The iterator to convert.
         * @returns {Array} Returns the converted array.
         */
        function iteratorToArray(iterator) {
          var data,
            result = []

          while (!(data = iterator.next()).done) {
            result.push(data.value)
          }
          return result
        }

        /**
         * Converts `map` to its key-value pairs.
         *
         * @private
         * @param {Object} map The map to convert.
         * @returns {Array} Returns the key-value pairs.
         */
        function mapToArray(map) {
          var index = -1,
            result = Array(map.size)

          map.forEach(function (value, key) {
            result[++index] = [key, value]
          })
          return result
        }

        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */
        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg))
          }
        }

        /**
         * Replaces all `placeholder` elements in `array` with an internal placeholder
         * and returns an array of their indexes.
         *
         * @private
         * @param {Array} array The array to modify.
         * @param {*} placeholder The placeholder to replace.
         * @returns {Array} Returns the new array of placeholder indexes.
         */
        function replaceHolders(array, placeholder) {
          var index = -1,
            length = array.length,
            resIndex = 0,
            result = []

          while (++index < length) {
            var value = array[index]
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER
              result[resIndex++] = index
            }
          }
          return result
        }

        /**
         * Converts `set` to an array of its values.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the values.
         */
        function setToArray(set) {
          var index = -1,
            result = Array(set.size)

          set.forEach(function (value) {
            result[++index] = value
          })
          return result
        }

        /**
         * Converts `set` to its value-value pairs.
         *
         * @private
         * @param {Object} set The set to convert.
         * @returns {Array} Returns the value-value pairs.
         */
        function setToPairs(set) {
          var index = -1,
            result = Array(set.size)

          set.forEach(function (value) {
            result[++index] = [value, value]
          })
          return result
        }

        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
            length = array.length

          while (++index < length) {
            if (array[index] === value) {
              return index
            }
          }
          return -1
        }

        /**
         * A specialized version of `_.lastIndexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1
          while (index--) {
            if (array[index] === value) {
              return index
            }
          }
          return index
        }

        /**
         * Gets the number of symbols in `string`.
         *
         * @private
         * @param {string} string The string to inspect.
         * @returns {number} Returns the string size.
         */
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string)
        }

        /**
         * Converts `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function stringToArray(string) {
          return hasUnicode(string)
            ? unicodeToArray(string)
            : asciiToArray(string)
        }

        /**
         * Used by `_.unescape` to convert HTML entities to characters.
         *
         * @private
         * @param {string} chr The matched character to unescape.
         * @returns {string} Returns the unescaped character.
         */
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes)

        /**
         * Gets the size of a Unicode `string`.
         *
         * @private
         * @param {string} string The string inspect.
         * @returns {number} Returns the string size.
         */
        function unicodeSize(string) {
          var result = (reUnicode.lastIndex = 0)
          while (reUnicode.test(string)) {
            ++result
          }
          return result
        }

        /**
         * Converts a Unicode `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */
        function unicodeToArray(string) {
          return string.match(reUnicode) || []
        }

        /**
         * Splits a Unicode `string` into an array of its words.
         *
         * @private
         * @param {string} The string to inspect.
         * @returns {Array} Returns the words of `string`.
         */
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || []
        }

        /*--------------------------------------------------------------------------*/

        /**
         * Create a new pristine `lodash` function using the `context` object.
         *
         * @static
         * @memberOf _
         * @since 1.1.0
         * @category Util
         * @param {Object} [context=root] The context object.
         * @returns {Function} Returns a new `lodash` function.
         * @example
         *
         * _.mixin({ 'foo': _.constant('foo') });
         *
         * var lodash = _.runInContext();
         * lodash.mixin({ 'bar': lodash.constant('bar') });
         *
         * _.isFunction(_.foo);
         * // => true
         * _.isFunction(_.bar);
         * // => false
         *
         * lodash.isFunction(lodash.foo);
         * // => false
         * lodash.isFunction(lodash.bar);
         * // => true
         *
         * // Create a suped-up `defer` in Node.js.
         * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
         */
        var runInContext = function runInContext(context) {
          context =
            context == null
              ? root
              : _.defaults(root.Object(), context, _.pick(root, contextProps))

          /** Built-in constructor references. */
          var Array = context.Array,
            Date = context.Date,
            Error = context.Error,
            Function = context.Function,
            Math = context.Math,
            Object = context.Object,
            RegExp = context.RegExp,
            String = context.String,
            TypeError = context.TypeError

          /** Used for built-in method references. */
          var arrayProto = Array.prototype,
            funcProto = Function.prototype,
            objectProto = Object.prototype

          /** Used to detect overreaching core-js shims. */
          var coreJsData = context['__core-js_shared__']

          /** Used to resolve the decompiled source of functions. */
          var funcToString = funcProto.toString

          /** Used to check objects for own properties. */
          var hasOwnProperty = objectProto.hasOwnProperty

          /** Used to generate unique IDs. */
          var idCounter = 0

          /** Used to detect methods masquerading as native. */
          var maskSrcKey = (function () {
            var uid = /[^.]+$/.exec(
              (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
            )
            return uid ? 'Symbol(src)_1.' + uid : ''
          })()

          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */
          var nativeObjectToString = objectProto.toString

          /** Used to infer the `Object` constructor. */
          var objectCtorString = funcToString.call(Object)

          /** Used to restore the original `_` reference in `_.noConflict`. */
          var oldDash = root._

          /** Used to detect if a method is native. */
          var reIsNative = RegExp(
            '^' +
              funcToString
                .call(hasOwnProperty)
                .replace(reRegExpChar, '\\$&')
                .replace(
                  /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                  '$1.*?'
                ) +
              '$'
          )

          /** Built-in value references. */
          var Buffer = moduleExports ? context.Buffer : undefined,
            Symbol = context.Symbol,
            Uint8Array = context.Uint8Array,
            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
            getPrototype = overArg(Object.getPrototypeOf, Object),
            objectCreate = Object.create,
            propertyIsEnumerable = objectProto.propertyIsEnumerable,
            splice = arrayProto.splice,
            spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
            symIterator = Symbol ? Symbol.iterator : undefined,
            symToStringTag = Symbol ? Symbol.toStringTag : undefined

          var defineProperty = (function () {
            try {
              var func = getNative(Object, 'defineProperty')
              func({}, '', {})
              return func
            } catch (e) {}
          })()

          /** Mocked built-ins. */
          var ctxClearTimeout =
              context.clearTimeout !== root.clearTimeout &&
              context.clearTimeout,
            ctxNow = Date && Date.now !== root.Date.now && Date.now,
            ctxSetTimeout =
              context.setTimeout !== root.setTimeout && context.setTimeout

          /* Built-in method references for those with the same name as other `lodash` methods. */
          var nativeCeil = Math.ceil,
            nativeFloor = Math.floor,
            nativeGetSymbols = Object.getOwnPropertySymbols,
            nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
            nativeIsFinite = context.isFinite,
            nativeJoin = arrayProto.join,
            nativeKeys = overArg(Object.keys, Object),
            nativeMax = Math.max,
            nativeMin = Math.min,
            nativeNow = Date.now,
            nativeParseInt = context.parseInt,
            nativeRandom = Math.random,
            nativeReverse = arrayProto.reverse

          /* Built-in method references that are verified to be native. */
          var DataView = getNative(context, 'DataView'),
            Map = getNative(context, 'Map'),
            Promise = getNative(context, 'Promise'),
            Set = getNative(context, 'Set'),
            WeakMap = getNative(context, 'WeakMap'),
            nativeCreate = getNative(Object, 'create')

          /** Used to store function metadata. */
          var metaMap = WeakMap && new WeakMap()

          /** Used to lookup unminified function names. */
          var realNames = {}

          /** Used to detect maps, sets, and weakmaps. */
          var dataViewCtorString = toSource(DataView),
            mapCtorString = toSource(Map),
            promiseCtorString = toSource(Promise),
            setCtorString = toSource(Set),
            weakMapCtorString = toSource(WeakMap)

          /** Used to convert symbols to primitives and strings. */
          var symbolProto = Symbol ? Symbol.prototype : undefined,
            symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
            symbolToString = symbolProto ? symbolProto.toString : undefined

          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` object which wraps `value` to enable implicit method
           * chain sequences. Methods that operate on and return arrays, collections,
           * and functions can be chained together. Methods that retrieve a single value
           * or may return a primitive value will automatically end the chain sequence
           * and return the unwrapped value. Otherwise, the value must be unwrapped
           * with `_#value`.
           *
           * Explicit chain sequences, which must be unwrapped with `_#value`, may be
           * enabled using `_.chain`.
           *
           * The execution of chained methods is lazy, that is, it's deferred until
           * `_#value` is implicitly or explicitly called.
           *
           * Lazy evaluation allows several methods to support shortcut fusion.
           * Shortcut fusion is an optimization to merge iteratee calls; this avoids
           * the creation of intermediate arrays and can greatly reduce the number of
           * iteratee executions. Sections of a chain sequence qualify for shortcut
           * fusion if the section is applied to an array and iteratees accept only
           * one argument. The heuristic for whether a section qualifies for shortcut
           * fusion is subject to change.
           *
           * Chaining is supported in custom builds as long as the `_#value` method is
           * directly or indirectly included in the build.
           *
           * In addition to lodash methods, wrappers have `Array` and `String` methods.
           *
           * The wrapper `Array` methods are:
           * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
           *
           * The wrapper `String` methods are:
           * `replace` and `split`
           *
           * The wrapper methods that support shortcut fusion are:
           * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
           * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
           * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
           *
           * The chainable wrapper methods are:
           * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
           * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
           * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
           * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
           * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
           * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
           * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
           * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
           * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
           * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
           * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
           * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
           * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
           * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
           * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
           * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
           * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
           * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
           * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
           * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
           * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
           * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
           * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
           * `zipObject`, `zipObjectDeep`, and `zipWith`
           *
           * The wrapper methods that are **not** chainable by default are:
           * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
           * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
           * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
           * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
           * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
           * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
           * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
           * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
           * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
           * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
           * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
           * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
           * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
           * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
           * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
           * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
           * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
           * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
           * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
           * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
           * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
           * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
           * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
           * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
           * `upperFirst`, `value`, and `words`
           *
           * @name _
           * @constructor
           * @category Seq
           * @param {*} value The value to wrap in a `lodash` instance.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2, 3]);
           *
           * // Returns an unwrapped value.
           * wrapped.reduce(_.add);
           * // => 6
           *
           * // Returns a wrapped value.
           * var squares = wrapped.map(square);
           *
           * _.isArray(squares);
           * // => false
           *
           * _.isArray(squares.value());
           * // => true
           */
          function lodash(value) {
            if (
              isObjectLike(value) &&
              !isArray(value) &&
              !(value instanceof LazyWrapper)
            ) {
              if (value instanceof LodashWrapper) {
                return value
              }
              if (hasOwnProperty.call(value, '__wrapped__')) {
                return wrapperClone(value)
              }
            }
            return new LodashWrapper(value)
          }

          /**
           * The base implementation of `_.create` without support for assigning
           * properties to the created object.
           *
           * @private
           * @param {Object} proto The object to inherit from.
           * @returns {Object} Returns the new object.
           */
          var baseCreate = (function () {
            function object() {}
            return function (proto) {
              if (!isObject(proto)) {
                return {}
              }
              if (objectCreate) {
                return objectCreate(proto)
              }
              object.prototype = proto
              var result = new object()
              object.prototype = undefined
              return result
            }
          })()

          /**
           * The function whose prototype chain sequence wrappers inherit from.
           *
           * @private
           */
          function baseLodash() {
            // No operation performed.
          }

          /**
           * The base constructor for creating `lodash` wrapper objects.
           *
           * @private
           * @param {*} value The value to wrap.
           * @param {boolean} [chainAll] Enable explicit method chain sequences.
           */
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value
            this.__actions__ = []
            this.__chain__ = !!chainAll
            this.__index__ = 0
            this.__values__ = undefined
          }

          /**
           * By default, the template delimiters used by lodash are like those in
           * embedded Ruby (ERB) as well as ES2015 template strings. Change the
           * following template settings to use alternative delimiters.
           *
           * @static
           * @memberOf _
           * @type {Object}
           */
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            escape: reEscape,

            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            evaluate: reEvaluate,

            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            interpolate: reInterpolate,

            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            variable: '',

            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            imports: {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              _: lodash,
            },
          }

          // Ensure wrappers are instances of `baseLodash`.
          lodash.prototype = baseLodash.prototype
          lodash.prototype.constructor = lodash

          LodashWrapper.prototype = baseCreate(baseLodash.prototype)
          LodashWrapper.prototype.constructor = LodashWrapper

          /*------------------------------------------------------------------------*/

          /**
           * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
           *
           * @private
           * @constructor
           * @param {*} value The value to wrap.
           */
          function LazyWrapper(value) {
            this.__wrapped__ = value
            this.__actions__ = []
            this.__dir__ = 1
            this.__filtered__ = false
            this.__iteratees__ = []
            this.__takeCount__ = MAX_ARRAY_LENGTH
            this.__views__ = []
          }

          /**
           * Creates a clone of the lazy wrapper object.
           *
           * @private
           * @name clone
           * @memberOf LazyWrapper
           * @returns {Object} Returns the cloned `LazyWrapper` object.
           */
          function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__)
            result.__actions__ = copyArray(this.__actions__)
            result.__dir__ = this.__dir__
            result.__filtered__ = this.__filtered__
            result.__iteratees__ = copyArray(this.__iteratees__)
            result.__takeCount__ = this.__takeCount__
            result.__views__ = copyArray(this.__views__)
            return result
          }

          /**
           * Reverses the direction of lazy iteration.
           *
           * @private
           * @name reverse
           * @memberOf LazyWrapper
           * @returns {Object} Returns the new reversed `LazyWrapper` object.
           */
          function lazyReverse() {
            if (this.__filtered__) {
              var result = new LazyWrapper(this)
              result.__dir__ = -1
              result.__filtered__ = true
            } else {
              result = this.clone()
              result.__dir__ *= -1
            }
            return result
          }

          /**
           * Extracts the unwrapped value from its lazy wrapper.
           *
           * @private
           * @name value
           * @memberOf LazyWrapper
           * @returns {*} Returns the unwrapped value.
           */
          function lazyValue() {
            var array = this.__wrapped__.value(),
              dir = this.__dir__,
              isArr = isArray(array),
              isRight = dir < 0,
              arrLength = isArr ? array.length : 0,
              view = getView(0, arrLength, this.__views__),
              start = view.start,
              end = view.end,
              length = end - start,
              index = isRight ? end : start - 1,
              iteratees = this.__iteratees__,
              iterLength = iteratees.length,
              resIndex = 0,
              takeCount = nativeMin(length, this.__takeCount__)

            if (
              !isArr ||
              (!isRight && arrLength == length && takeCount == length)
            ) {
              return baseWrapperValue(array, this.__actions__)
            }
            var result = []

            outer: while (length-- && resIndex < takeCount) {
              index += dir

              var iterIndex = -1,
                value = array[index]

              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex],
                  iteratee = data.iteratee,
                  type = data.type,
                  computed = iteratee(value)

                if (type == LAZY_MAP_FLAG) {
                  value = computed
                } else if (!computed) {
                  if (type == LAZY_FILTER_FLAG) {
                    continue outer
                  } else {
                    break outer
                  }
                }
              }
              result[resIndex++] = value
            }
            return result
          }

          // Ensure `LazyWrapper` is an instance of `baseLodash`.
          LazyWrapper.prototype = baseCreate(baseLodash.prototype)
          LazyWrapper.prototype.constructor = LazyWrapper

          /*------------------------------------------------------------------------*/

          /**
           * Creates a hash object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Hash(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the hash.
           *
           * @private
           * @name clear
           * @memberOf Hash
           */
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {}
            this.size = 0
          }

          /**
           * Removes `key` and its value from the hash.
           *
           * @private
           * @name delete
           * @memberOf Hash
           * @param {Object} hash The hash to modify.
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key]
            this.size -= result ? 1 : 0
            return result
          }

          /**
           * Gets the hash value for `key`.
           *
           * @private
           * @name get
           * @memberOf Hash
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function hashGet(key) {
            var data = this.__data__
            if (nativeCreate) {
              var result = data[key]
              return result === HASH_UNDEFINED ? undefined : result
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined
          }

          /**
           * Checks if a hash value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Hash
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function hashHas(key) {
            var data = this.__data__
            return nativeCreate
              ? data[key] !== undefined
              : hasOwnProperty.call(data, key)
          }

          /**
           * Sets the hash `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Hash
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the hash instance.
           */
          function hashSet(key, value) {
            var data = this.__data__
            this.size += this.has(key) ? 0 : 1
            data[key] =
              nativeCreate && value === undefined ? HASH_UNDEFINED : value
            return this
          }

          // Add methods to `Hash`.
          Hash.prototype.clear = hashClear
          Hash.prototype['delete'] = hashDelete
          Hash.prototype.get = hashGet
          Hash.prototype.has = hashHas
          Hash.prototype.set = hashSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates an list cache object.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function ListCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the list cache.
           *
           * @private
           * @name clear
           * @memberOf ListCache
           */
          function listCacheClear() {
            this.__data__ = []
            this.size = 0
          }

          /**
           * Removes `key` and its value from the list cache.
           *
           * @private
           * @name delete
           * @memberOf ListCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function listCacheDelete(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            if (index < 0) {
              return false
            }
            var lastIndex = data.length - 1
            if (index == lastIndex) {
              data.pop()
            } else {
              splice.call(data, index, 1)
            }
            --this.size
            return true
          }

          /**
           * Gets the list cache value for `key`.
           *
           * @private
           * @name get
           * @memberOf ListCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function listCacheGet(key) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            return index < 0 ? undefined : data[index][1]
          }

          /**
           * Checks if a list cache value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf ListCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1
          }

          /**
           * Sets the list cache `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf ListCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the list cache instance.
           */
          function listCacheSet(key, value) {
            var data = this.__data__,
              index = assocIndexOf(data, key)

            if (index < 0) {
              ++this.size
              data.push([key, value])
            } else {
              data[index][1] = value
            }
            return this
          }

          // Add methods to `ListCache`.
          ListCache.prototype.clear = listCacheClear
          ListCache.prototype['delete'] = listCacheDelete
          ListCache.prototype.get = listCacheGet
          ListCache.prototype.has = listCacheHas
          ListCache.prototype.set = listCacheSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates a map cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function MapCache(entries) {
            var index = -1,
              length = entries == null ? 0 : entries.length

            this.clear()
            while (++index < length) {
              var entry = entries[index]
              this.set(entry[0], entry[1])
            }
          }

          /**
           * Removes all key-value entries from the map.
           *
           * @private
           * @name clear
           * @memberOf MapCache
           */
          function mapCacheClear() {
            this.size = 0
            this.__data__ = {
              hash: new Hash(),
              map: new (Map || ListCache)(),
              string: new Hash(),
            }
          }

          /**
           * Removes `key` and its value from the map.
           *
           * @private
           * @name delete
           * @memberOf MapCache
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key)
            this.size -= result ? 1 : 0
            return result
          }

          /**
           * Gets the map value for `key`.
           *
           * @private
           * @name get
           * @memberOf MapCache
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function mapCacheGet(key) {
            return getMapData(this, key).get(key)
          }

          /**
           * Checks if a map value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf MapCache
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function mapCacheHas(key) {
            return getMapData(this, key).has(key)
          }

          /**
           * Sets the map `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf MapCache
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the map cache instance.
           */
          function mapCacheSet(key, value) {
            var data = getMapData(this, key),
              size = data.size

            data.set(key, value)
            this.size += data.size == size ? 0 : 1
            return this
          }

          // Add methods to `MapCache`.
          MapCache.prototype.clear = mapCacheClear
          MapCache.prototype['delete'] = mapCacheDelete
          MapCache.prototype.get = mapCacheGet
          MapCache.prototype.has = mapCacheHas
          MapCache.prototype.set = mapCacheSet

          /*------------------------------------------------------------------------*/

          /**
           *
           * Creates an array cache object to store unique values.
           *
           * @private
           * @constructor
           * @param {Array} [values] The values to cache.
           */
          function SetCache(values) {
            var index = -1,
              length = values == null ? 0 : values.length

            this.__data__ = new MapCache()
            while (++index < length) {
              this.add(values[index])
            }
          }

          /**
           * Adds `value` to the array cache.
           *
           * @private
           * @name add
           * @memberOf SetCache
           * @alias push
           * @param {*} value The value to cache.
           * @returns {Object} Returns the cache instance.
           */
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED)
            return this
          }

          /**
           * Checks if `value` is in the array cache.
           *
           * @private
           * @name has
           * @memberOf SetCache
           * @param {*} value The value to search for.
           * @returns {number} Returns `true` if `value` is found, else `false`.
           */
          function setCacheHas(value) {
            return this.__data__.has(value)
          }

          // Add methods to `SetCache`.
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd
          SetCache.prototype.has = setCacheHas

          /*------------------------------------------------------------------------*/

          /**
           * Creates a stack cache object to store key-value pairs.
           *
           * @private
           * @constructor
           * @param {Array} [entries] The key-value pairs to cache.
           */
          function Stack(entries) {
            var data = (this.__data__ = new ListCache(entries))
            this.size = data.size
          }

          /**
           * Removes all key-value entries from the stack.
           *
           * @private
           * @name clear
           * @memberOf Stack
           */
          function stackClear() {
            this.__data__ = new ListCache()
            this.size = 0
          }

          /**
           * Removes `key` and its value from the stack.
           *
           * @private
           * @name delete
           * @memberOf Stack
           * @param {string} key The key of the value to remove.
           * @returns {boolean} Returns `true` if the entry was removed, else `false`.
           */
          function stackDelete(key) {
            var data = this.__data__,
              result = data['delete'](key)

            this.size = data.size
            return result
          }

          /**
           * Gets the stack value for `key`.
           *
           * @private
           * @name get
           * @memberOf Stack
           * @param {string} key The key of the value to get.
           * @returns {*} Returns the entry value.
           */
          function stackGet(key) {
            return this.__data__.get(key)
          }

          /**
           * Checks if a stack value for `key` exists.
           *
           * @private
           * @name has
           * @memberOf Stack
           * @param {string} key The key of the entry to check.
           * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
           */
          function stackHas(key) {
            return this.__data__.has(key)
          }

          /**
           * Sets the stack `key` to `value`.
           *
           * @private
           * @name set
           * @memberOf Stack
           * @param {string} key The key of the value to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns the stack cache instance.
           */
          function stackSet(key, value) {
            var data = this.__data__
            if (data instanceof ListCache) {
              var pairs = data.__data__
              if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value])
                this.size = ++data.size
                return this
              }
              data = this.__data__ = new MapCache(pairs)
            }
            data.set(key, value)
            this.size = data.size
            return this
          }

          // Add methods to `Stack`.
          Stack.prototype.clear = stackClear
          Stack.prototype['delete'] = stackDelete
          Stack.prototype.get = stackGet
          Stack.prototype.has = stackHas
          Stack.prototype.set = stackSet

          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of the enumerable property names of the array-like `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @param {boolean} inherited Specify returning inherited property names.
           * @returns {Array} Returns the array of property names.
           */
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length

            for (var key in value) {
              if (
                (inherited || hasOwnProperty.call(value, key)) &&
                !(
                  skipIndexes &&
                  // Safari 9 has enumerable `arguments.length` in strict mode.
                  (key == 'length' ||
                    // Node.js 0.10 has enumerable non-index properties on buffers.
                    (isBuff && (key == 'offset' || key == 'parent')) ||
                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                    (isType &&
                      (key == 'buffer' ||
                        key == 'byteLength' ||
                        key == 'byteOffset')) ||
                    // Skip index properties.
                    isIndex(key, length))
                )
              ) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * A specialized version of `_.sample` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @returns {*} Returns the random element.
           */
          function arraySample(array) {
            var length = array.length
            return length ? array[baseRandom(0, length - 1)] : undefined
          }

          /**
           * A specialized version of `_.sampleSize` for arrays.
           *
           * @private
           * @param {Array} array The array to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length))
          }

          /**
           * A specialized version of `_.shuffle` for arrays.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array))
          }

          /**
           * This function is like `assignValue` except that it doesn't assign
           * `undefined` values.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function assignMergeValue(object, key, value) {
            if (
              (value !== undefined && !eq(object[key], value)) ||
              (value === undefined && !(key in object))
            ) {
              baseAssignValue(object, key, value)
            }
          }

          /**
           * Assigns `value` to `key` of `object` if the existing value is not equivalent
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function assignValue(object, key, value) {
            var objValue = object[key]
            if (
              !(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
              (value === undefined && !(key in object))
            ) {
              baseAssignValue(object, key, value)
            }
          }

          /**
           * Gets the index at which the `key` is found in `array` of key-value pairs.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {*} key The key to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           */
          function assocIndexOf(array, key) {
            var length = array.length
            while (length--) {
              if (eq(array[length][0], key)) {
                return length
              }
            }
            return -1
          }

          /**
           * Aggregates elements of `collection` on `accumulator` with keys transformed
           * by `iteratee` and values set by `setter`.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform keys.
           * @param {Object} accumulator The initial aggregated object.
           * @returns {Function} Returns `accumulator`.
           */
          function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
              setter(accumulator, value, iteratee(value), collection)
            })
            return accumulator
          }

          /**
           * The base implementation of `_.assign` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object)
          }

          /**
           * The base implementation of `_.assignIn` without support for multiple sources
           * or `customizer` functions.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @returns {Object} Returns `object`.
           */
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object)
          }

          /**
           * The base implementation of `assignValue` and `assignMergeValue` without
           * value checks.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {string} key The key of the property to assign.
           * @param {*} value The value to assign.
           */
          function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) {
              defineProperty(object, key, {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true,
              })
            } else {
              object[key] = value
            }
          }

          /**
           * The base implementation of `_.at` without support for individual paths.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {string[]} paths The property paths to pick.
           * @returns {Array} Returns the picked elements.
           */
          function baseAt(object, paths) {
            var index = -1,
              length = paths.length,
              result = Array(length),
              skip = object == null

            while (++index < length) {
              result[index] = skip ? undefined : get(object, paths[index])
            }
            return result
          }

          /**
           * The base implementation of `_.clamp` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           */
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined) {
                number = number <= upper ? number : upper
              }
              if (lower !== undefined) {
                number = number >= lower ? number : lower
              }
            }
            return number
          }

          /**
           * The base implementation of `_.clone` and `_.cloneDeep` which tracks
           * traversed objects.
           *
           * @private
           * @param {*} value The value to clone.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Deep clone
           *  2 - Flatten inherited properties
           *  4 - Clone symbols
           * @param {Function} [customizer] The function to customize cloning.
           * @param {string} [key] The key of `value`.
           * @param {Object} [object] The parent object of `value`.
           * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
           * @returns {*} Returns the cloned value.
           */
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result,
              isDeep = bitmask & CLONE_DEEP_FLAG,
              isFlat = bitmask & CLONE_FLAT_FLAG,
              isFull = bitmask & CLONE_SYMBOLS_FLAG

            if (customizer) {
              result = object
                ? customizer(value, key, object, stack)
                : customizer(value)
            }
            if (result !== undefined) {
              return result
            }
            if (!isObject(value)) {
              return value
            }
            var isArr = isArray(value)
            if (isArr) {
              result = initCloneArray(value)
              if (!isDeep) {
                return copyArray(value, result)
              }
            } else {
              var tag = getTag(value),
                isFunc = tag == funcTag || tag == genTag

              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep)
              }
              if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                result = isFlat || isFunc ? {} : initCloneObject(value)
                if (!isDeep) {
                  return isFlat
                    ? copySymbolsIn(value, baseAssignIn(result, value))
                    : copySymbols(value, baseAssign(result, value))
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {}
                }
                result = initCloneByTag(value, tag, isDeep)
              }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack())
            var stacked = stack.get(value)
            if (stacked) {
              return stacked
            }
            stack.set(value, result)

            if (isSet(value)) {
              value.forEach(function (subValue) {
                result.add(
                  baseClone(
                    subValue,
                    bitmask,
                    customizer,
                    subValue,
                    value,
                    stack
                  )
                )
              })
            } else if (isMap(value)) {
              value.forEach(function (subValue, key) {
                result.set(
                  key,
                  baseClone(subValue, bitmask, customizer, key, value, stack)
                )
              })
            }

            var keysFunc = isFull
              ? isFlat
                ? getAllKeysIn
                : getAllKeys
              : isFlat
              ? keysIn
              : keys

            var props = isArr ? undefined : keysFunc(value)
            arrayEach(props || value, function (subValue, key) {
              if (props) {
                key = subValue
                subValue = value[key]
              }
              // Recursively populate clone (susceptible to call stack limits).
              assignValue(
                result,
                key,
                baseClone(subValue, bitmask, customizer, key, value, stack)
              )
            })
            return result
          }

          /**
           * The base implementation of `_.conforms` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           */
          function baseConforms(source) {
            var props = keys(source)
            return function (object) {
              return baseConformsTo(object, source, props)
            }
          }

          /**
           * The base implementation of `_.conformsTo` which accepts `props` to check.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           */
          function baseConformsTo(object, source, props) {
            var length = props.length
            if (object == null) {
              return !length
            }
            object = Object(object)
            while (length--) {
              var key = props[length],
                predicate = source[key],
                value = object[key]

              if (
                (value === undefined && !(key in object)) ||
                !predicate(value)
              ) {
                return false
              }
            }
            return true
          }

          /**
           * The base implementation of `_.delay` and `_.defer` which accepts `args`
           * to provide to `func`.
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {Array} args The arguments to provide to `func`.
           * @returns {number|Object} Returns the timer id or timeout object.
           */
          function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            return setTimeout(function () {
              func.apply(undefined, args)
            }, wait)
          }

          /**
           * The base implementation of methods like `_.difference` without support
           * for excluding multiple arrays or iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Array} values The values to exclude.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           */
          function baseDifference(array, values, iteratee, comparator) {
            var index = -1,
              includes = arrayIncludes,
              isCommon = true,
              length = array.length,
              result = [],
              valuesLength = values.length

            if (!length) {
              return result
            }
            if (iteratee) {
              values = arrayMap(values, baseUnary(iteratee))
            }
            if (comparator) {
              includes = arrayIncludesWith
              isCommon = false
            } else if (values.length >= LARGE_ARRAY_SIZE) {
              includes = cacheHas
              isCommon = false
              values = new SetCache(values)
            }
            outer: while (++index < length) {
              var value = array[index],
                computed = iteratee == null ? value : iteratee(value)

              value = comparator || value !== 0 ? value : 0
              if (isCommon && computed === computed) {
                var valuesIndex = valuesLength
                while (valuesIndex--) {
                  if (values[valuesIndex] === computed) {
                    continue outer
                  }
                }
                result.push(value)
              } else if (!includes(values, computed, comparator)) {
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.forEach` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */
          var baseEach = createBaseEach(baseForOwn)

          /**
           * The base implementation of `_.forEachRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           */
          var baseEachRight = createBaseEach(baseForOwnRight, true)

          /**
           * The base implementation of `_.every` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`
           */
          function baseEvery(collection, predicate) {
            var result = true
            baseEach(collection, function (value, index, collection) {
              result = !!predicate(value, index, collection)
              return result
            })
            return result
          }

          /**
           * The base implementation of methods like `_.max` and `_.min` which accepts a
           * `comparator` to determine the extremum value.
           *
           * @private
           * @param {Array} array The array to iterate over.
           * @param {Function} iteratee The iteratee invoked per iteration.
           * @param {Function} comparator The comparator used to compare values.
           * @returns {*} Returns the extremum value.
           */
          function baseExtremum(array, iteratee, comparator) {
            var index = -1,
              length = array.length

            while (++index < length) {
              var value = array[index],
                current = iteratee(value)

              if (
                current != null &&
                (computed === undefined
                  ? current === current && !isSymbol(current)
                  : comparator(current, computed))
              ) {
                var computed = current,
                  result = value
              }
            }
            return result
          }

          /**
           * The base implementation of `_.fill` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           */
          function baseFill(array, value, start, end) {
            var length = array.length

            start = toInteger(start)
            if (start < 0) {
              start = -start > length ? 0 : length + start
            }
            end = end === undefined || end > length ? length : toInteger(end)
            if (end < 0) {
              end += length
            }
            end = start > end ? 0 : toLength(end)
            while (start < end) {
              array[start++] = value
            }
            return array
          }

          /**
           * The base implementation of `_.filter` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           */
          function baseFilter(collection, predicate) {
            var result = []
            baseEach(collection, function (value, index, collection) {
              if (predicate(value, index, collection)) {
                result.push(value)
              }
            })
            return result
          }

          /**
           * The base implementation of `_.flatten` with support for restricting flattening.
           *
           * @private
           * @param {Array} array The array to flatten.
           * @param {number} depth The maximum recursion depth.
           * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
           * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
           * @param {Array} [result=[]] The initial result value.
           * @returns {Array} Returns the new flattened array.
           */
          function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1,
              length = array.length

            predicate || (predicate = isFlattenable)
            result || (result = [])

            while (++index < length) {
              var value = array[index]
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  // Recursively flatten arrays (susceptible to call stack limits).
                  baseFlatten(value, depth - 1, predicate, isStrict, result)
                } else {
                  arrayPush(result, value)
                }
              } else if (!isStrict) {
                result[result.length] = value
              }
            }
            return result
          }

          /**
           * The base implementation of `baseForOwn` which iterates over `object`
           * properties returned by `keysFunc` and invokes `iteratee` for each property.
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */
          var baseFor = createBaseFor()

          /**
           * This function is like `baseFor` except that it iterates over properties
           * in the opposite order.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @returns {Object} Returns `object`.
           */
          var baseForRight = createBaseFor(true)

          /**
           * The base implementation of `_.forOwn` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */
          function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys)
          }

          /**
           * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Object} Returns `object`.
           */
          function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys)
          }

          /**
           * The base implementation of `_.functions` which creates an array of
           * `object` function property names filtered from `props`.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Array} props The property names to filter.
           * @returns {Array} Returns the function names.
           */
          function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
              return isFunction(object[key])
            })
          }

          /**
           * The base implementation of `_.get` without support for default values.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @returns {*} Returns the resolved value.
           */
          function baseGet(object, path) {
            path = castPath(path, object)

            var index = 0,
              length = path.length

            while (object != null && index < length) {
              object = object[toKey(path[index++])]
            }
            return index && index == length ? object : undefined
          }

          /**
           * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
           * `keysFunc` and `symbolsFunc` to get the enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Function} keysFunc The function to get the keys of `object`.
           * @param {Function} symbolsFunc The function to get the symbols of `object`.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object)
            return isArray(object)
              ? result
              : arrayPush(result, symbolsFunc(object))
          }

          /**
           * The base implementation of `getTag` without fallbacks for buggy environments.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined ? undefinedTag : nullTag
            }
            return symToStringTag && symToStringTag in Object(value)
              ? getRawTag(value)
              : objectToString(value)
          }

          /**
           * The base implementation of `_.gt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           */
          function baseGt(value, other) {
            return value > other
          }

          /**
           * The base implementation of `_.has` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key)
          }

          /**
           * The base implementation of `_.hasIn` without support for deep paths.
           *
           * @private
           * @param {Object} [object] The object to query.
           * @param {Array|string} key The key to check.
           * @returns {boolean} Returns `true` if `key` exists, else `false`.
           */
          function baseHasIn(object, key) {
            return object != null && key in Object(object)
          }

          /**
           * The base implementation of `_.inRange` which doesn't coerce arguments.
           *
           * @private
           * @param {number} number The number to check.
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           */
          function baseInRange(number, start, end) {
            return (
              number >= nativeMin(start, end) && number < nativeMax(start, end)
            )
          }

          /**
           * The base implementation of methods like `_.intersection`, without support
           * for iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of shared values.
           */
          function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes,
              length = arrays[0].length,
              othLength = arrays.length,
              othIndex = othLength,
              caches = Array(othLength),
              maxLength = Infinity,
              result = []

            while (othIndex--) {
              var array = arrays[othIndex]
              if (othIndex && iteratee) {
                array = arrayMap(array, baseUnary(iteratee))
              }
              maxLength = nativeMin(array.length, maxLength)
              caches[othIndex] =
                !comparator &&
                (iteratee || (length >= 120 && array.length >= 120))
                  ? new SetCache(othIndex && array)
                  : undefined
            }
            array = arrays[0]

            var index = -1,
              seen = caches[0]

            outer: while (++index < length && result.length < maxLength) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              value = comparator || value !== 0 ? value : 0
              if (
                !(seen
                  ? cacheHas(seen, computed)
                  : includes(result, computed, comparator))
              ) {
                othIndex = othLength
                while (--othIndex) {
                  var cache = caches[othIndex]
                  if (
                    !(cache
                      ? cacheHas(cache, computed)
                      : includes(arrays[othIndex], computed, comparator))
                  ) {
                    continue outer
                  }
                }
                if (seen) {
                  seen.push(computed)
                }
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.invert` and `_.invertBy` which inverts
           * `object` with values transformed by `iteratee` and set by `setter`.
           *
           * @private
           * @param {Object} object The object to iterate over.
           * @param {Function} setter The function to set `accumulator` values.
           * @param {Function} iteratee The iteratee to transform values.
           * @param {Object} accumulator The initial inverted object.
           * @returns {Function} Returns `accumulator`.
           */
          function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
              setter(accumulator, iteratee(value), key, object)
            })
            return accumulator
          }

          /**
           * The base implementation of `_.invoke` without support for individual
           * method arguments.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {Array} args The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           */
          function baseInvoke(object, path, args) {
            path = castPath(path, object)
            object = parent(object, path)
            var func = object == null ? object : object[toKey(last(path))]
            return func == null ? undefined : apply(func, object, args)
          }

          /**
           * The base implementation of `_.isArguments`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           */
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag
          }

          /**
           * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           */
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag
          }

          /**
           * The base implementation of `_.isDate` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           */
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag
          }

          /**
           * The base implementation of `_.isEqual` which supports partial comparisons
           * and tracks traversed objects.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {boolean} bitmask The bitmask flags.
           *  1 - Unordered comparison
           *  2 - Partial comparison
           * @param {Function} [customizer] The function to customize comparisons.
           * @param {Object} [stack] Tracks traversed `value` and `other` objects.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           */
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true
            }
            if (
              value == null ||
              other == null ||
              (!isObjectLike(value) && !isObjectLike(other))
            ) {
              return value !== value && other !== other
            }
            return baseIsEqualDeep(
              value,
              other,
              bitmask,
              customizer,
              baseIsEqual,
              stack
            )
          }

          /**
           * A specialized version of `baseIsEqual` for arrays and objects which performs
           * deep comparisons and tracks traversed objects enabling objects with circular
           * references to be compared.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} [stack] Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function baseIsEqualDeep(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var objIsArr = isArray(object),
              othIsArr = isArray(other),
              objTag = objIsArr ? arrayTag : getTag(object),
              othTag = othIsArr ? arrayTag : getTag(other)

            objTag = objTag == argsTag ? objectTag : objTag
            othTag = othTag == argsTag ? objectTag : othTag

            var objIsObj = objTag == objectTag,
              othIsObj = othTag == objectTag,
              isSameTag = objTag == othTag

            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false
              }
              objIsArr = true
              objIsObj = false
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack())
              return objIsArr || isTypedArray(object)
                ? equalArrays(
                    object,
                    other,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  )
                : equalByTag(
                    object,
                    other,
                    objTag,
                    bitmask,
                    customizer,
                    equalFunc,
                    stack
                  )
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped =
                  objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                othIsWrapped =
                  othIsObj && hasOwnProperty.call(other, '__wrapped__')

              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object,
                  othUnwrapped = othIsWrapped ? other.value() : other

                stack || (stack = new Stack())
                return equalFunc(
                  objUnwrapped,
                  othUnwrapped,
                  bitmask,
                  customizer,
                  stack
                )
              }
            }
            if (!isSameTag) {
              return false
            }
            stack || (stack = new Stack())
            return equalObjects(
              object,
              other,
              bitmask,
              customizer,
              equalFunc,
              stack
            )
          }

          /**
           * The base implementation of `_.isMap` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           */
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag
          }

          /**
           * The base implementation of `_.isMatch` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Array} matchData The property names, values, and compare flags to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           */
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length,
              length = index,
              noCustomizer = !customizer

            if (object == null) {
              return !length
            }
            object = Object(object)
            while (index--) {
              var data = matchData[index]
              if (
                noCustomizer && data[2]
                  ? data[1] !== object[data[0]]
                  : !(data[0] in object)
              ) {
                return false
              }
            }
            while (++index < length) {
              data = matchData[index]
              var key = data[0],
                objValue = object[key],
                srcValue = data[1]

              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false
                }
              } else {
                var stack = new Stack()
                if (customizer) {
                  var result = customizer(
                    objValue,
                    srcValue,
                    key,
                    object,
                    source,
                    stack
                  )
                }
                if (
                  !(result === undefined
                    ? baseIsEqual(
                        srcValue,
                        objValue,
                        COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG,
                        customizer,
                        stack
                      )
                    : result)
                ) {
                  return false
                }
              }
            }
            return true
          }

          /**
           * The base implementation of `_.isNative` without bad shim checks.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           */
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor
            return pattern.test(toSource(value))
          }

          /**
           * The base implementation of `_.isRegExp` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           */
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag
          }

          /**
           * The base implementation of `_.isSet` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           */
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag
          }

          /**
           * The base implementation of `_.isTypedArray` without Node.js optimizations.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           */
          function baseIsTypedArray(value) {
            return (
              isObjectLike(value) &&
              isLength(value.length) &&
              !!typedArrayTags[baseGetTag(value)]
            )
          }

          /**
           * The base implementation of `_.iteratee`.
           *
           * @private
           * @param {*} [value=_.identity] The value to convert to an iteratee.
           * @returns {Function} Returns the iteratee.
           */
          function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') {
              return value
            }
            if (value == null) {
              return identity
            }
            if (typeof value == 'object') {
              return isArray(value)
                ? baseMatchesProperty(value[0], value[1])
                : baseMatches(value)
            }
            return property(value)
          }

          /**
           * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object)
            }
            var result = []
            for (var key in Object(object)) {
              if (hasOwnProperty.call(object, key) && key != 'constructor') {
                result.push(key)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object)
            }
            var isProto = isPrototype(object),
              result = []

            for (var key in object) {
              if (
                !(
                  key == 'constructor' &&
                  (isProto || !hasOwnProperty.call(object, key))
                )
              ) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.lt` which doesn't coerce arguments.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           */
          function baseLt(value, other) {
            return value < other
          }

          /**
           * The base implementation of `_.map` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} iteratee The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           */
          function baseMap(collection, iteratee) {
            var index = -1,
              result = isArrayLike(collection) ? Array(collection.length) : []

            baseEach(collection, function (value, key, collection) {
              result[++index] = iteratee(value, key, collection)
            })
            return result
          }

          /**
           * The base implementation of `_.matches` which doesn't clone `source`.
           *
           * @private
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatches(source) {
            var matchData = getMatchData(source)
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1])
            }
            return function (object) {
              return object === source || baseIsMatch(object, source, matchData)
            }
          }

          /**
           * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
           *
           * @private
           * @param {string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue)
            }
            return function (object) {
              var objValue = get(object, path)
              return objValue === undefined && objValue === srcValue
                ? hasIn(object, path)
                : baseIsEqual(
                    srcValue,
                    objValue,
                    COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
                  )
            }
          }

          /**
           * The base implementation of `_.merge` without support for multiple sources.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} [customizer] The function to customize merged values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return
            }
            baseFor(
              source,
              function (srcValue, key) {
                stack || (stack = new Stack())
                if (isObject(srcValue)) {
                  baseMergeDeep(
                    object,
                    source,
                    key,
                    srcIndex,
                    baseMerge,
                    customizer,
                    stack
                  )
                } else {
                  var newValue = customizer
                    ? customizer(
                        safeGet(object, key),
                        srcValue,
                        key + '',
                        object,
                        source,
                        stack
                      )
                    : undefined

                  if (newValue === undefined) {
                    newValue = srcValue
                  }
                  assignMergeValue(object, key, newValue)
                }
              },
              keysIn
            )
          }

          /**
           * A specialized version of `baseMerge` for arrays and objects which performs
           * deep merges and tracks traversed objects enabling objects with circular
           * references to be merged.
           *
           * @private
           * @param {Object} object The destination object.
           * @param {Object} source The source object.
           * @param {string} key The key of the value to merge.
           * @param {number} srcIndex The index of `source`.
           * @param {Function} mergeFunc The function to merge values.
           * @param {Function} [customizer] The function to customize assigned values.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           */
          function baseMergeDeep(
            object,
            source,
            key,
            srcIndex,
            mergeFunc,
            customizer,
            stack
          ) {
            var objValue = safeGet(object, key),
              srcValue = safeGet(source, key),
              stacked = stack.get(srcValue)

            if (stacked) {
              assignMergeValue(object, key, stacked)
              return
            }
            var newValue = customizer
              ? customizer(objValue, srcValue, key + '', object, source, stack)
              : undefined

            var isCommon = newValue === undefined

            if (isCommon) {
              var isArr = isArray(srcValue),
                isBuff = !isArr && isBuffer(srcValue),
                isTyped = !isArr && !isBuff && isTypedArray(srcValue)

              newValue = srcValue
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue)
                } else if (isBuff) {
                  isCommon = false
                  newValue = cloneBuffer(srcValue, true)
                } else if (isTyped) {
                  isCommon = false
                  newValue = cloneTypedArray(srcValue, true)
                } else {
                  newValue = []
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue)
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue)
                }
              } else {
                isCommon = false
              }
            }
            if (isCommon) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, newValue)
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack)
              stack['delete'](srcValue)
            }
            assignMergeValue(object, key, newValue)
          }

          /**
           * The base implementation of `_.nth` which doesn't coerce arguments.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {number} n The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           */
          function baseNth(array, n) {
            var length = array.length
            if (!length) {
              return
            }
            n += n < 0 ? length : 0
            return isIndex(n, length) ? array[n] : undefined
          }

          /**
           * The base implementation of `_.orderBy` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
           * @param {string[]} orders The sort orders of `iteratees`.
           * @returns {Array} Returns the new sorted array.
           */
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function (iteratee) {
                if (isArray(iteratee)) {
                  return function (value) {
                    return baseGet(
                      value,
                      iteratee.length === 1 ? iteratee[0] : iteratee
                    )
                  }
                }
                return iteratee
              })
            } else {
              iteratees = [identity]
            }

            var index = -1
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()))

            var result = baseMap(collection, function (value, key, collection) {
              var criteria = arrayMap(iteratees, function (iteratee) {
                return iteratee(value)
              })
              return { criteria: criteria, index: ++index, value: value }
            })

            return baseSortBy(result, function (object, other) {
              return compareMultiple(object, other, orders)
            })
          }

          /**
           * The base implementation of `_.pick` without support for individual
           * property identifiers.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @returns {Object} Returns the new object.
           */
          function basePick(object, paths) {
            return basePickBy(object, paths, function (value, path) {
              return hasIn(object, path)
            })
          }

          /**
           * The base implementation of  `_.pickBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Object} object The source object.
           * @param {string[]} paths The property paths to pick.
           * @param {Function} predicate The function invoked per property.
           * @returns {Object} Returns the new object.
           */
          function basePickBy(object, paths, predicate) {
            var index = -1,
              length = paths.length,
              result = {}

            while (++index < length) {
              var path = paths[index],
                value = baseGet(object, path)

              if (predicate(value, path)) {
                baseSet(result, castPath(path, object), value)
              }
            }
            return result
          }

          /**
           * A specialized version of `baseProperty` which supports deep paths.
           *
           * @private
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           */
          function basePropertyDeep(path) {
            return function (object) {
              return baseGet(object, path)
            }
          }

          /**
           * The base implementation of `_.pullAllBy` without support for iteratee
           * shorthands.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           */
          function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
              index = -1,
              length = values.length,
              seen = array

            if (array === values) {
              values = copyArray(values)
            }
            if (iteratee) {
              seen = arrayMap(array, baseUnary(iteratee))
            }
            while (++index < length) {
              var fromIndex = 0,
                value = values[index],
                computed = iteratee ? iteratee(value) : value

              while (
                (fromIndex = indexOf(seen, computed, fromIndex, comparator)) >
                -1
              ) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1)
                }
                splice.call(array, fromIndex, 1)
              }
            }
            return array
          }

          /**
           * The base implementation of `_.pullAt` without support for individual
           * indexes or capturing the removed elements.
           *
           * @private
           * @param {Array} array The array to modify.
           * @param {number[]} indexes The indexes of elements to remove.
           * @returns {Array} Returns `array`.
           */
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0,
              lastIndex = length - 1

            while (length--) {
              var index = indexes[length]
              if (length == lastIndex || index !== previous) {
                var previous = index
                if (isIndex(index)) {
                  splice.call(array, index, 1)
                } else {
                  baseUnset(array, index)
                }
              }
            }
            return array
          }

          /**
           * The base implementation of `_.random` without support for returning
           * floating-point numbers.
           *
           * @private
           * @param {number} lower The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the random number.
           */
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1))
          }

          /**
           * The base implementation of `_.range` and `_.rangeRight` which doesn't
           * coerce arguments.
           *
           * @private
           * @param {number} start The start of the range.
           * @param {number} end The end of the range.
           * @param {number} step The value to increment or decrement by.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the range of numbers.
           */
          function baseRange(start, end, step, fromRight) {
            var index = -1,
              length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
              result = Array(length)

            while (length--) {
              result[fromRight ? length : ++index] = start
              start += step
            }
            return result
          }

          /**
           * The base implementation of `_.repeat` which doesn't coerce arguments.
           *
           * @private
           * @param {string} string The string to repeat.
           * @param {number} n The number of times to repeat the string.
           * @returns {string} Returns the repeated string.
           */
          function baseRepeat(string, n) {
            var result = ''
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result
            }
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
              if (n % 2) {
                result += string
              }
              n = nativeFloor(n / 2)
              if (n) {
                string += string
              }
            } while (n)

            return result
          }

          /**
           * The base implementation of `_.rest` which doesn't validate or coerce arguments.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           */
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '')
          }

          /**
           * The base implementation of `_.sample`.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           */
          function baseSample(collection) {
            return arraySample(values(collection))
          }

          /**
           * The base implementation of `_.sampleSize` without param guards.
           *
           * @private
           * @param {Array|Object} collection The collection to sample.
           * @param {number} n The number of elements to sample.
           * @returns {Array} Returns the random elements.
           */
          function baseSampleSize(collection, n) {
            var array = values(collection)
            return shuffleSelf(array, baseClamp(n, 0, array.length))
          }

          /**
           * The base implementation of `_.set`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object
            }
            path = castPath(path, object)

            var index = -1,
              length = path.length,
              lastIndex = length - 1,
              nested = object

            while (nested != null && ++index < length) {
              var key = toKey(path[index]),
                newValue = value

              if (
                key === '__proto__' ||
                key === 'constructor' ||
                key === 'prototype'
              ) {
                return object
              }

              if (index != lastIndex) {
                var objValue = nested[key]
                newValue = customizer
                  ? customizer(objValue, key, nested)
                  : undefined
                if (newValue === undefined) {
                  newValue = isObject(objValue)
                    ? objValue
                    : isIndex(path[index + 1])
                    ? []
                    : {}
                }
              }
              assignValue(nested, key, newValue)
              nested = nested[key]
            }
            return object
          }

          /**
           * The base implementation of `setData` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */
          var baseSetData = !metaMap
            ? identity
            : function (func, data) {
                metaMap.set(func, data)
                return func
              }

          /**
           * The base implementation of `setToString` without support for hot loop shorting.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */
          var baseSetToString = !defineProperty
            ? identity
            : function (func, string) {
                return defineProperty(func, 'toString', {
                  configurable: true,
                  enumerable: false,
                  value: constant(string),
                  writable: true,
                })
              }

          /**
           * The base implementation of `_.shuffle`.
           *
           * @private
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           */
          function baseShuffle(collection) {
            return shuffleSelf(values(collection))
          }

          /**
           * The base implementation of `_.slice` without an iteratee call guard.
           *
           * @private
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */
          function baseSlice(array, start, end) {
            var index = -1,
              length = array.length

            if (start < 0) {
              start = -start > length ? 0 : length + start
            }
            end = end > length ? length : end
            if (end < 0) {
              end += length
            }
            length = start > end ? 0 : (end - start) >>> 0
            start >>>= 0

            var result = Array(length)
            while (++index < length) {
              result[index] = array[index + start]
            }
            return result
          }

          /**
           * The base implementation of `_.some` without support for iteratee shorthands.
           *
           * @private
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} predicate The function invoked per iteration.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           */
          function baseSome(collection, predicate) {
            var result

            baseEach(collection, function (value, index, collection) {
              result = predicate(value, index, collection)
              return !result
            })
            return !!result
          }

          /**
           * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
           * performs a binary search of `array` to determine the index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */
          function baseSortedIndex(array, value, retHighest) {
            var low = 0,
              high = array == null ? low : array.length

            if (
              typeof value == 'number' &&
              value === value &&
              high <= HALF_MAX_ARRAY_LENGTH
            ) {
              while (low < high) {
                var mid = (low + high) >>> 1,
                  computed = array[mid]

                if (
                  computed !== null &&
                  !isSymbol(computed) &&
                  (retHighest ? computed <= value : computed < value)
                ) {
                  low = mid + 1
                } else {
                  high = mid
                }
              }
              return high
            }
            return baseSortedIndexBy(array, value, identity, retHighest)
          }

          /**
           * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
           * which invokes `iteratee` for `value` and each element of `array` to compute
           * their sort ranking. The iteratee is invoked with one argument; (value).
           *
           * @private
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} iteratee The iteratee invoked per element.
           * @param {boolean} [retHighest] Specify returning the highest qualified index.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           */
          function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0,
              high = array == null ? 0 : array.length
            if (high === 0) {
              return 0
            }

            value = iteratee(value)
            var valIsNaN = value !== value,
              valIsNull = value === null,
              valIsSymbol = isSymbol(value),
              valIsUndefined = value === undefined

            while (low < high) {
              var mid = nativeFloor((low + high) / 2),
                computed = iteratee(array[mid]),
                othIsDefined = computed !== undefined,
                othIsNull = computed === null,
                othIsReflexive = computed === computed,
                othIsSymbol = isSymbol(computed)

              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined)
              } else if (valIsNull) {
                setLow =
                  othIsReflexive && othIsDefined && (retHighest || !othIsNull)
              } else if (valIsSymbol) {
                setLow =
                  othIsReflexive &&
                  othIsDefined &&
                  !othIsNull &&
                  (retHighest || !othIsSymbol)
              } else if (othIsNull || othIsSymbol) {
                setLow = false
              } else {
                setLow = retHighest ? computed <= value : computed < value
              }
              if (setLow) {
                low = mid + 1
              } else {
                high = mid
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX)
          }

          /**
           * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
           * support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */
          function baseSortedUniq(array, iteratee) {
            var index = -1,
              length = array.length,
              resIndex = 0,
              result = []

            while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              if (!index || !eq(computed, seen)) {
                var seen = computed
                result[resIndex++] = value === 0 ? 0 : value
              }
            }
            return result
          }

          /**
           * The base implementation of `_.toNumber` which doesn't ensure correct
           * conversions of binary, hexadecimal, or octal string values.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           */
          function baseToNumber(value) {
            if (typeof value == 'number') {
              return value
            }
            if (isSymbol(value)) {
              return NAN
            }
            return +value
          }

          /**
           * The base implementation of `_.toString` which doesn't convert nullish
           * values to empty strings.
           *
           * @private
           * @param {*} value The value to process.
           * @returns {string} Returns the string.
           */
          function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') {
              return value
            }
            if (isArray(value)) {
              // Recursively convert values (susceptible to call stack limits).
              return arrayMap(value, baseToString) + ''
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : ''
            }
            var result = value + ''
            return result == '0' && 1 / value == -INFINITY ? '-0' : result
          }

          /**
           * The base implementation of `_.uniqBy` without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           */
          function baseUniq(array, iteratee, comparator) {
            var index = -1,
              includes = arrayIncludes,
              length = array.length,
              isCommon = true,
              result = [],
              seen = result

            if (comparator) {
              isCommon = false
              includes = arrayIncludesWith
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set = iteratee ? null : createSet(array)
              if (set) {
                return setToArray(set)
              }
              isCommon = false
              includes = cacheHas
              seen = new SetCache()
            } else {
              seen = iteratee ? [] : result
            }
            outer: while (++index < length) {
              var value = array[index],
                computed = iteratee ? iteratee(value) : value

              value = comparator || value !== 0 ? value : 0
              if (isCommon && computed === computed) {
                var seenIndex = seen.length
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer
                  }
                }
                if (iteratee) {
                  seen.push(computed)
                }
                result.push(value)
              } else if (!includes(seen, computed, comparator)) {
                if (seen !== result) {
                  seen.push(computed)
                }
                result.push(value)
              }
            }
            return result
          }

          /**
           * The base implementation of `_.unset`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The property path to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           */
          function baseUnset(object, path) {
            path = castPath(path, object)
            object = parent(object, path)
            return object == null || delete object[toKey(last(path))]
          }

          /**
           * The base implementation of `_.update`.
           *
           * @private
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to update.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize path creation.
           * @returns {Object} Returns `object`.
           */
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(
              object,
              path,
              updater(baseGet(object, path)),
              customizer
            )
          }

          /**
           * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
           * without support for iteratee shorthands.
           *
           * @private
           * @param {Array} array The array to query.
           * @param {Function} predicate The function invoked per iteration.
           * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Array} Returns the slice of `array`.
           */
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length,
              index = fromRight ? length : -1

            while (
              (fromRight ? index-- : ++index < length) &&
              predicate(array[index], index, array)
            ) {}

            return isDrop
              ? baseSlice(
                  array,
                  fromRight ? 0 : index,
                  fromRight ? index + 1 : length
                )
              : baseSlice(
                  array,
                  fromRight ? index + 1 : 0,
                  fromRight ? length : index
                )
          }

          /**
           * The base implementation of `wrapperValue` which returns the result of
           * performing a sequence of actions on the unwrapped `value`, where each
           * successive action is supplied the return value of the previous.
           *
           * @private
           * @param {*} value The unwrapped value.
           * @param {Array} actions Actions to perform to resolve the unwrapped value.
           * @returns {*} Returns the resolved value.
           */
          function baseWrapperValue(value, actions) {
            var result = value
            if (result instanceof LazyWrapper) {
              result = result.value()
            }
            return arrayReduce(
              actions,
              function (result, action) {
                return action.func.apply(
                  action.thisArg,
                  arrayPush([result], action.args)
                )
              },
              result
            )
          }

          /**
           * The base implementation of methods like `_.xor`, without support for
           * iteratee shorthands, that accepts an array of arrays to inspect.
           *
           * @private
           * @param {Array} arrays The arrays to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of values.
           */
          function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : []
            }
            var index = -1,
              result = Array(length)

            while (++index < length) {
              var array = arrays[index],
                othIndex = -1

              while (++othIndex < length) {
                if (othIndex != index) {
                  result[index] = baseDifference(
                    result[index] || array,
                    arrays[othIndex],
                    iteratee,
                    comparator
                  )
                }
              }
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator)
          }

          /**
           * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
           *
           * @private
           * @param {Array} props The property identifiers.
           * @param {Array} values The property values.
           * @param {Function} assignFunc The function to assign values.
           * @returns {Object} Returns the new object.
           */
          function baseZipObject(props, values, assignFunc) {
            var index = -1,
              length = props.length,
              valsLength = values.length,
              result = {}

            while (++index < length) {
              var value = index < valsLength ? values[index] : undefined
              assignFunc(result, props[index], value)
            }
            return result
          }

          /**
           * Casts `value` to an empty array if it's not an array like object.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Array|Object} Returns the cast array-like object.
           */
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : []
          }

          /**
           * Casts `value` to `identity` if it's not a function.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {Function} Returns cast function.
           */
          function castFunction(value) {
            return typeof value == 'function' ? value : identity
          }

          /**
           * Casts `value` to a path array if it's not one.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {Object} [object] The object to query keys on.
           * @returns {Array} Returns the cast property path array.
           */
          function castPath(value, object) {
            if (isArray(value)) {
              return value
            }
            return isKey(value, object)
              ? [value]
              : stringToPath(toString(value))
          }

          /**
           * A `baseRest` alias which can be replaced with `identity` by module
           * replacement plugins.
           *
           * @private
           * @type {Function}
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */
          var castRest = baseRest

          /**
           * Casts `array` to a slice if it's needed.
           *
           * @private
           * @param {Array} array The array to inspect.
           * @param {number} start The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the cast slice.
           */
          function castSlice(array, start, end) {
            var length = array.length
            end = end === undefined ? length : end
            return !start && end >= length
              ? array
              : baseSlice(array, start, end)
          }

          /**
           * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
           *
           * @private
           * @param {number|Object} id The timer id or timeout object of the timer to clear.
           */
          var clearTimeout =
            ctxClearTimeout ||
            function (id) {
              return root.clearTimeout(id)
            }

          /**
           * Creates a clone of  `buffer`.
           *
           * @private
           * @param {Buffer} buffer The buffer to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Buffer} Returns the cloned buffer.
           */
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice()
            }
            var length = buffer.length,
              result = allocUnsafe
                ? allocUnsafe(length)
                : new buffer.constructor(length)

            buffer.copy(result)
            return result
          }

          /**
           * Creates a clone of `arrayBuffer`.
           *
           * @private
           * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
           * @returns {ArrayBuffer} Returns the cloned array buffer.
           */
          function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength)
            new Uint8Array(result).set(new Uint8Array(arrayBuffer))
            return result
          }

          /**
           * Creates a clone of `dataView`.
           *
           * @private
           * @param {Object} dataView The data view to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned data view.
           */
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep
              ? cloneArrayBuffer(dataView.buffer)
              : dataView.buffer
            return new dataView.constructor(
              buffer,
              dataView.byteOffset,
              dataView.byteLength
            )
          }

          /**
           * Creates a clone of `regexp`.
           *
           * @private
           * @param {Object} regexp The regexp to clone.
           * @returns {Object} Returns the cloned regexp.
           */
          function cloneRegExp(regexp) {
            var result = new regexp.constructor(
              regexp.source,
              reFlags.exec(regexp)
            )
            result.lastIndex = regexp.lastIndex
            return result
          }

          /**
           * Creates a clone of the `symbol` object.
           *
           * @private
           * @param {Object} symbol The symbol object to clone.
           * @returns {Object} Returns the cloned symbol object.
           */
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {}
          }

          /**
           * Creates a clone of `typedArray`.
           *
           * @private
           * @param {Object} typedArray The typed array to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the cloned typed array.
           */
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep
              ? cloneArrayBuffer(typedArray.buffer)
              : typedArray.buffer
            return new typedArray.constructor(
              buffer,
              typedArray.byteOffset,
              typedArray.length
            )
          }

          /**
           * Compares values to sort them in ascending order.
           *
           * @private
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {number} Returns the sort order indicator for `value`.
           */
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined,
                valIsNull = value === null,
                valIsReflexive = value === value,
                valIsSymbol = isSymbol(value)

              var othIsDefined = other !== undefined,
                othIsNull = other === null,
                othIsReflexive = other === other,
                othIsSymbol = isSymbol(other)

              if (
                (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                (valIsSymbol &&
                  othIsDefined &&
                  othIsReflexive &&
                  !othIsNull &&
                  !othIsSymbol) ||
                (valIsNull && othIsDefined && othIsReflexive) ||
                (!valIsDefined && othIsReflexive) ||
                !valIsReflexive
              ) {
                return 1
              }
              if (
                (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                (othIsSymbol &&
                  valIsDefined &&
                  valIsReflexive &&
                  !valIsNull &&
                  !valIsSymbol) ||
                (othIsNull && valIsDefined && valIsReflexive) ||
                (!othIsDefined && valIsReflexive) ||
                !othIsReflexive
              ) {
                return -1
              }
            }
            return 0
          }

          /**
           * Used by `_.orderBy` to compare multiple properties of a value to another
           * and stable sort them.
           *
           * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
           * specify an order of "desc" for descending or "asc" for ascending sort order
           * of corresponding values.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {boolean[]|string[]} orders The order to sort by for each property.
           * @returns {number} Returns the sort order indicator for `object`.
           */
          function compareMultiple(object, other, orders) {
            var index = -1,
              objCriteria = object.criteria,
              othCriteria = other.criteria,
              length = objCriteria.length,
              ordersLength = orders.length

            while (++index < length) {
              var result = compareAscending(
                objCriteria[index],
                othCriteria[index]
              )
              if (result) {
                if (index >= ordersLength) {
                  return result
                }
                var order = orders[index]
                return result * (order == 'desc' ? -1 : 1)
              }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index
          }

          /**
           * Creates an array that is the composition of partially applied arguments,
           * placeholders, and provided arguments into a single array of arguments.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to prepend to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1,
              argsLength = args.length,
              holdersLength = holders.length,
              leftIndex = -1,
              leftLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(leftLength + rangeLength),
              isUncurried = !isCurried

            while (++leftIndex < leftLength) {
              result[leftIndex] = partials[leftIndex]
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[holders[argsIndex]] = args[argsIndex]
              }
            }
            while (rangeLength--) {
              result[leftIndex++] = args[argsIndex++]
            }
            return result
          }

          /**
           * This function is like `composeArgs` except that the arguments composition
           * is tailored for `_.partialRight`.
           *
           * @private
           * @param {Array} args The provided arguments.
           * @param {Array} partials The arguments to append to those provided.
           * @param {Array} holders The `partials` placeholder indexes.
           * @params {boolean} [isCurried] Specify composing for a curried function.
           * @returns {Array} Returns the new array of composed arguments.
           */
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1,
              argsLength = args.length,
              holdersIndex = -1,
              holdersLength = holders.length,
              rightIndex = -1,
              rightLength = partials.length,
              rangeLength = nativeMax(argsLength - holdersLength, 0),
              result = Array(rangeLength + rightLength),
              isUncurried = !isCurried

            while (++argsIndex < rangeLength) {
              result[argsIndex] = args[argsIndex]
            }
            var offset = argsIndex
            while (++rightIndex < rightLength) {
              result[offset + rightIndex] = partials[rightIndex]
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result[offset + holders[holdersIndex]] = args[argsIndex++]
              }
            }
            return result
          }

          /**
           * Copies the values of `source` to `array`.
           *
           * @private
           * @param {Array} source The array to copy values from.
           * @param {Array} [array=[]] The array to copy values to.
           * @returns {Array} Returns `array`.
           */
          function copyArray(source, array) {
            var index = -1,
              length = source.length

            array || (array = Array(length))
            while (++index < length) {
              array[index] = source[index]
            }
            return array
          }

          /**
           * Copies properties of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy properties from.
           * @param {Array} props The property identifiers to copy.
           * @param {Object} [object={}] The object to copy properties to.
           * @param {Function} [customizer] The function to customize copied values.
           * @returns {Object} Returns `object`.
           */
          function copyObject(source, props, object, customizer) {
            var isNew = !object
            object || (object = {})

            var index = -1,
              length = props.length

            while (++index < length) {
              var key = props[index]

              var newValue = customizer
                ? customizer(object[key], source[key], key, object, source)
                : undefined

              if (newValue === undefined) {
                newValue = source[key]
              }
              if (isNew) {
                baseAssignValue(object, key, newValue)
              } else {
                assignValue(object, key, newValue)
              }
            }
            return object
          }

          /**
           * Copies own symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object)
          }

          /**
           * Copies own and inherited symbols of `source` to `object`.
           *
           * @private
           * @param {Object} source The object to copy symbols from.
           * @param {Object} [object={}] The object to copy symbols to.
           * @returns {Object} Returns `object`.
           */
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object)
          }

          /**
           * Creates a function like `_.groupBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} [initializer] The accumulator object initializer.
           * @returns {Function} Returns the new aggregator function.
           */
          function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator,
                accumulator = initializer ? initializer() : {}

              return func(
                collection,
                setter,
                getIteratee(iteratee, 2),
                accumulator
              )
            }
          }

          /**
           * Creates a function like `_.assign`.
           *
           * @private
           * @param {Function} assigner The function to assign values.
           * @returns {Function} Returns the new assigner function.
           */
          function createAssigner(assigner) {
            return baseRest(function (object, sources) {
              var index = -1,
                length = sources.length,
                customizer = length > 1 ? sources[length - 1] : undefined,
                guard = length > 2 ? sources[2] : undefined

              customizer =
                assigner.length > 3 && typeof customizer == 'function'
                  ? (length--, customizer)
                  : undefined

              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer
                length = 1
              }
              object = Object(object)
              while (++index < length) {
                var source = sources[index]
                if (source) {
                  assigner(object, source, index, customizer)
                }
              }
              return object
            })
          }

          /**
           * Creates a `baseEach` or `baseEachRight` function.
           *
           * @private
           * @param {Function} eachFunc The function to iterate over a collection.
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */
          function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
              if (collection == null) {
                return collection
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee)
              }
              var length = collection.length,
                index = fromRight ? length : -1,
                iterable = Object(collection)

              while (fromRight ? index-- : ++index < length) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break
                }
              }
              return collection
            }
          }

          /**
           * Creates a base function for methods like `_.forIn` and `_.forOwn`.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new base function.
           */
          function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
              var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length

              while (length--) {
                var key = props[fromRight ? length : ++index]
                if (iteratee(iterable[key], key, iterable) === false) {
                  break
                }
              }
              return object
            }
          }

          /**
           * Creates a function that wraps `func` to invoke it with the optional `this`
           * binding of `thisArg`.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func)

            function wrapper() {
              var fn =
                this && this !== root && this instanceof wrapper ? Ctor : func
              return fn.apply(isBind ? thisArg : this, arguments)
            }
            return wrapper
          }

          /**
           * Creates a function like `_.lowerFirst`.
           *
           * @private
           * @param {string} methodName The name of the `String` case method to use.
           * @returns {Function} Returns the new case function.
           */
          function createCaseFirst(methodName) {
            return function (string) {
              string = toString(string)

              var strSymbols = hasUnicode(string)
                ? stringToArray(string)
                : undefined

              var chr = strSymbols ? strSymbols[0] : string.charAt(0)

              var trailing = strSymbols
                ? castSlice(strSymbols, 1).join('')
                : string.slice(1)

              return chr[methodName]() + trailing
            }
          }

          /**
           * Creates a function like `_.camelCase`.
           *
           * @private
           * @param {Function} callback The function to combine each word.
           * @returns {Function} Returns the new compounder function.
           */
          function createCompounder(callback) {
            return function (string) {
              return arrayReduce(
                words(deburr(string).replace(reApos, '')),
                callback,
                ''
              )
            }
          }

          /**
           * Creates a function that produces an instance of `Ctor` regardless of
           * whether it was invoked as part of a `new` expression or by `call` or `apply`.
           *
           * @private
           * @param {Function} Ctor The constructor to wrap.
           * @returns {Function} Returns the new wrapped function.
           */
          function createCtor(Ctor) {
            return function () {
              // Use a `switch` statement to work with class constructors. See
              // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
              // for more details.
              var args = arguments
              switch (args.length) {
                case 0:
                  return new Ctor()
                case 1:
                  return new Ctor(args[0])
                case 2:
                  return new Ctor(args[0], args[1])
                case 3:
                  return new Ctor(args[0], args[1], args[2])
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3])
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4])
                case 6:
                  return new Ctor(
                    args[0],
                    args[1],
                    args[2],
                    args[3],
                    args[4],
                    args[5]
                  )
                case 7:
                  return new Ctor(
                    args[0],
                    args[1],
                    args[2],
                    args[3],
                    args[4],
                    args[5],
                    args[6]
                  )
              }
              var thisBinding = baseCreate(Ctor.prototype),
                result = Ctor.apply(thisBinding, args)

              // Mimic the constructor's `return` behavior.
              // See https://es5.github.io/#x13.2.2 for more details.
              return isObject(result) ? result : thisBinding
            }
          }

          /**
           * Creates a function that wraps `func` to enable currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {number} arity The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func)

            function wrapper() {
              var length = arguments.length,
                args = Array(length),
                index = length,
                placeholder = getHolder(wrapper)

              while (index--) {
                args[index] = arguments[index]
              }
              var holders =
                length < 3 &&
                args[0] !== placeholder &&
                args[length - 1] !== placeholder
                  ? []
                  : replaceHolders(args, placeholder)

              length -= holders.length
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined,
                  args,
                  holders,
                  undefined,
                  undefined,
                  arity - length
                )
              }
              var fn =
                this && this !== root && this instanceof wrapper ? Ctor : func
              return apply(fn, this, args)
            }
            return wrapper
          }

          /**
           * Creates a `_.find` or `_.findLast` function.
           *
           * @private
           * @param {Function} findIndexFunc The function to find the collection index.
           * @returns {Function} Returns the new find function.
           */
          function createFind(findIndexFunc) {
            return function (collection, predicate, fromIndex) {
              var iterable = Object(collection)
              if (!isArrayLike(collection)) {
                var iteratee = getIteratee(predicate, 3)
                collection = keys(collection)
                predicate = function (key) {
                  return iteratee(iterable[key], key, iterable)
                }
              }
              var index = findIndexFunc(collection, predicate, fromIndex)
              return index > -1
                ? iterable[iteratee ? collection[index] : index]
                : undefined
            }
          }

          /**
           * Creates a `_.flow` or `_.flowRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new flow function.
           */
          function createFlow(fromRight) {
            return flatRest(function (funcs) {
              var length = funcs.length,
                index = length,
                prereq = LodashWrapper.prototype.thru

              if (fromRight) {
                funcs.reverse()
              }
              while (index--) {
                var func = funcs[index]
                if (typeof func != 'function') {
                  throw new TypeError(FUNC_ERROR_TEXT)
                }
                if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                  var wrapper = new LodashWrapper([], true)
                }
              }
              index = wrapper ? index : length
              while (++index < length) {
                func = funcs[index]

                var funcName = getFuncName(func),
                  data = funcName == 'wrapper' ? getData(func) : undefined

                if (
                  data &&
                  isLaziable(data[0]) &&
                  data[1] ==
                    (WRAP_ARY_FLAG |
                      WRAP_CURRY_FLAG |
                      WRAP_PARTIAL_FLAG |
                      WRAP_REARG_FLAG) &&
                  !data[4].length &&
                  data[9] == 1
                ) {
                  wrapper = wrapper[getFuncName(data[0])].apply(
                    wrapper,
                    data[3]
                  )
                } else {
                  wrapper =
                    func.length == 1 && isLaziable(func)
                      ? wrapper[funcName]()
                      : wrapper.thru(func)
                }
              }
              return function () {
                var args = arguments,
                  value = args[0]

                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value()
                }
                var index = 0,
                  result = length ? funcs[index].apply(this, args) : value

                while (++index < length) {
                  result = funcs[index].call(this, result)
                }
                return result
              }
            })
          }

          /**
           * Creates a function that wraps `func` to invoke it with optional `this`
           * binding of `thisArg`, partial application, and currying.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [partialsRight] The arguments to append to those provided
           *  to the new function.
           * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createHybrid(
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            partialsRight,
            holdersRight,
            argPos,
            ary,
            arity
          ) {
            var isAry = bitmask & WRAP_ARY_FLAG,
              isBind = bitmask & WRAP_BIND_FLAG,
              isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
              isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
              isFlip = bitmask & WRAP_FLIP_FLAG,
              Ctor = isBindKey ? undefined : createCtor(func)

            function wrapper() {
              var length = arguments.length,
                args = Array(length),
                index = length

              while (index--) {
                args[index] = arguments[index]
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper),
                  holdersCount = countHolders(args, placeholder)
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried)
              }
              if (partialsRight) {
                args = composeArgsRight(
                  args,
                  partialsRight,
                  holdersRight,
                  isCurried
                )
              }
              length -= holdersCount
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder)
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary,
                  arity - length
                )
              }
              var thisBinding = isBind ? thisArg : this,
                fn = isBindKey ? thisBinding[func] : func

              length = args.length
              if (argPos) {
                args = reorder(args, argPos)
              } else if (isFlip && length > 1) {
                args.reverse()
              }
              if (isAry && ary < length) {
                args.length = ary
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn)
              }
              return fn.apply(thisBinding, args)
            }
            return wrapper
          }

          /**
           * Creates a function like `_.invertBy`.
           *
           * @private
           * @param {Function} setter The function to set accumulator values.
           * @param {Function} toIteratee The function to resolve iteratees.
           * @returns {Function} Returns the new inverter function.
           */
          function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
              return baseInverter(object, setter, toIteratee(iteratee), {})
            }
          }

          /**
           * Creates a function that performs a mathematical operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @param {number} [defaultValue] The value used for `undefined` arguments.
           * @returns {Function} Returns the new mathematical operation function.
           */
          function createMathOperation(operator, defaultValue) {
            return function (value, other) {
              var result
              if (value === undefined && other === undefined) {
                return defaultValue
              }
              if (value !== undefined) {
                result = value
              }
              if (other !== undefined) {
                if (result === undefined) {
                  return other
                }
                if (typeof value == 'string' || typeof other == 'string') {
                  value = baseToString(value)
                  other = baseToString(other)
                } else {
                  value = baseToNumber(value)
                  other = baseToNumber(other)
                }
                result = operator(value, other)
              }
              return result
            }
          }

          /**
           * Creates a function like `_.over`.
           *
           * @private
           * @param {Function} arrayFunc The function to iterate over iteratees.
           * @returns {Function} Returns the new over function.
           */
          function createOver(arrayFunc) {
            return flatRest(function (iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()))
              return baseRest(function (args) {
                var thisArg = this
                return arrayFunc(iteratees, function (iteratee) {
                  return apply(iteratee, thisArg, args)
                })
              })
            })
          }

          /**
           * Creates the padding for `string` based on `length`. The `chars` string
           * is truncated if the number of characters exceeds `length`.
           *
           * @private
           * @param {number} length The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padding for `string`.
           */
          function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars)

            var charsLength = chars.length
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars
            }
            var result = baseRepeat(
              chars,
              nativeCeil(length / stringSize(chars))
            )
            return hasUnicode(chars)
              ? castSlice(stringToArray(result), 0, length).join('')
              : result.slice(0, length)
          }

          /**
           * Creates a function that wraps `func` to invoke it with the `this` binding
           * of `thisArg` and `partials` prepended to the arguments it receives.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {Array} partials The arguments to prepend to those provided to
           *  the new function.
           * @returns {Function} Returns the new wrapped function.
           */
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG,
              Ctor = createCtor(func)

            function wrapper() {
              var argsIndex = -1,
                argsLength = arguments.length,
                leftIndex = -1,
                leftLength = partials.length,
                args = Array(leftLength + argsLength),
                fn =
                  this && this !== root && this instanceof wrapper ? Ctor : func

              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex]
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex]
              }
              return apply(fn, isBind ? thisArg : this, args)
            }
            return wrapper
          }

          /**
           * Creates a `_.range` or `_.rangeRight` function.
           *
           * @private
           * @param {boolean} [fromRight] Specify iterating from right to left.
           * @returns {Function} Returns the new range function.
           */
          function createRange(fromRight) {
            return function (start, end, step) {
              if (
                step &&
                typeof step != 'number' &&
                isIterateeCall(start, end, step)
              ) {
                end = step = undefined
              }
              // Ensure the sign of `-0` is preserved.
              start = toFinite(start)
              if (end === undefined) {
                end = start
                start = 0
              } else {
                end = toFinite(end)
              }
              step =
                step === undefined ? (start < end ? 1 : -1) : toFinite(step)
              return baseRange(start, end, step, fromRight)
            }
          }

          /**
           * Creates a function that performs a relational operation on two values.
           *
           * @private
           * @param {Function} operator The function to perform the operation.
           * @returns {Function} Returns the new relational operation function.
           */
          function createRelationalOperation(operator) {
            return function (value, other) {
              if (!(typeof value == 'string' && typeof other == 'string')) {
                value = toNumber(value)
                other = toNumber(other)
              }
              return operator(value, other)
            }
          }

          /**
           * Creates a function that wraps `func` to continue currying.
           *
           * @private
           * @param {Function} func The function to wrap.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @param {Function} wrapFunc The function to create the `func` wrapper.
           * @param {*} placeholder The placeholder value.
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to prepend to those provided to
           *  the new function.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createRecurry(
            func,
            bitmask,
            wrapFunc,
            placeholder,
            thisArg,
            partials,
            holders,
            argPos,
            ary,
            arity
          ) {
            var isCurry = bitmask & WRAP_CURRY_FLAG,
              newHolders = isCurry ? holders : undefined,
              newHoldersRight = isCurry ? undefined : holders,
              newPartials = isCurry ? partials : undefined,
              newPartialsRight = isCurry ? undefined : partials

            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG)

            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG)
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary,
              arity,
            ]

            var result = wrapFunc.apply(undefined, newData)
            if (isLaziable(func)) {
              setData(result, newData)
            }
            result.placeholder = placeholder
            return setWrapToString(result, func, bitmask)
          }

          /**
           * Creates a function like `_.round`.
           *
           * @private
           * @param {string} methodName The name of the `Math` method to use when rounding.
           * @returns {Function} Returns the new round function.
           */
          function createRound(methodName) {
            var func = Math[methodName]
            return function (number, precision) {
              number = toNumber(number)
              precision =
                precision == null ? 0 : nativeMin(toInteger(precision), 292)
              if (precision && nativeIsFinite(number)) {
                // Shift with exponential notation to avoid floating-point issues.
                // See [MDN](https://mdn.io/round#Examples) for more details.
                var pair = (toString(number) + 'e').split('e'),
                  value = func(pair[0] + 'e' + (+pair[1] + precision))

                pair = (toString(value) + 'e').split('e')
                return +(pair[0] + 'e' + (+pair[1] - precision))
              }
              return func(number)
            }
          }

          /**
           * Creates a set object of `values`.
           *
           * @private
           * @param {Array} values The values to add to the set.
           * @returns {Object} Returns the new set.
           */
          var createSet = !(
            Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY
          )
            ? noop
            : function (values) {
                return new Set(values)
              }

          /**
           * Creates a `_.toPairs` or `_.toPairsIn` function.
           *
           * @private
           * @param {Function} keysFunc The function to get the keys of a given object.
           * @returns {Function} Returns the new pairs function.
           */
          function createToPairs(keysFunc) {
            return function (object) {
              var tag = getTag(object)
              if (tag == mapTag) {
                return mapToArray(object)
              }
              if (tag == setTag) {
                return setToPairs(object)
              }
              return baseToPairs(object, keysFunc(object))
            }
          }

          /**
           * Creates a function that either curries or invokes `func` with optional
           * `this` binding and partially applied arguments.
           *
           * @private
           * @param {Function|string} func The function or method name to wrap.
           * @param {number} bitmask The bitmask flags.
           *    1 - `_.bind`
           *    2 - `_.bindKey`
           *    4 - `_.curry` or `_.curryRight` of a bound function
           *    8 - `_.curry`
           *   16 - `_.curryRight`
           *   32 - `_.partial`
           *   64 - `_.partialRight`
           *  128 - `_.rearg`
           *  256 - `_.ary`
           *  512 - `_.flip`
           * @param {*} [thisArg] The `this` binding of `func`.
           * @param {Array} [partials] The arguments to be partially applied.
           * @param {Array} [holders] The `partials` placeholder indexes.
           * @param {Array} [argPos] The argument positions of the new function.
           * @param {number} [ary] The arity cap of `func`.
           * @param {number} [arity] The arity of `func`.
           * @returns {Function} Returns the new wrapped function.
           */
          function createWrap(
            func,
            bitmask,
            thisArg,
            partials,
            holders,
            argPos,
            ary,
            arity
          ) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG
            if (!isBindKey && typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            var length = partials ? partials.length : 0
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG)
              partials = holders = undefined
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0)
            arity = arity === undefined ? arity : toInteger(arity)
            length -= holders ? holders.length : 0

            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials,
                holdersRight = holders

              partials = holders = undefined
            }
            var data = isBindKey ? undefined : getData(func)

            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary,
              arity,
            ]

            if (data) {
              mergeData(newData, data)
            }
            func = newData[0]
            bitmask = newData[1]
            thisArg = newData[2]
            partials = newData[3]
            holders = newData[4]
            arity = newData[9] =
              newData[9] === undefined
                ? isBindKey
                  ? 0
                  : func.length
                : nativeMax(newData[9] - length, 0)

            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result = createBind(func, bitmask, thisArg)
            } else if (
              bitmask == WRAP_CURRY_FLAG ||
              bitmask == WRAP_CURRY_RIGHT_FLAG
            ) {
              result = createCurry(func, bitmask, arity)
            } else if (
              (bitmask == WRAP_PARTIAL_FLAG ||
                bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) &&
              !holders.length
            ) {
              result = createPartial(func, bitmask, thisArg, partials)
            } else {
              result = createHybrid.apply(undefined, newData)
            }
            var setter = data ? baseSetData : setData
            return setWrapToString(setter(result, newData), func, bitmask)
          }

          /**
           * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
           * of source objects to the destination object for all destination properties
           * that resolve to `undefined`.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to assign.
           * @param {Object} object The parent object of `objValue`.
           * @returns {*} Returns the value to assign.
           */
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (
              objValue === undefined ||
              (eq(objValue, objectProto[key]) &&
                !hasOwnProperty.call(object, key))
            ) {
              return srcValue
            }
            return objValue
          }

          /**
           * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
           * objects into destination objects that are passed thru.
           *
           * @private
           * @param {*} objValue The destination value.
           * @param {*} srcValue The source value.
           * @param {string} key The key of the property to merge.
           * @param {Object} object The parent object of `objValue`.
           * @param {Object} source The parent object of `srcValue`.
           * @param {Object} [stack] Tracks traversed source values and their merged
           *  counterparts.
           * @returns {*} Returns the value to assign.
           */
          function customDefaultsMerge(
            objValue,
            srcValue,
            key,
            object,
            source,
            stack
          ) {
            if (isObject(objValue) && isObject(srcValue)) {
              // Recursively merge objects and arrays (susceptible to call stack limits).
              stack.set(srcValue, objValue)
              baseMerge(
                objValue,
                srcValue,
                undefined,
                customDefaultsMerge,
                stack
              )
              stack['delete'](srcValue)
            }
            return objValue
          }

          /**
           * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
           * objects.
           *
           * @private
           * @param {*} value The value to inspect.
           * @param {string} key The key of the property to inspect.
           * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
           */
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value
          }

          /**
           * A specialized version of `baseIsEqualDeep` for arrays with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Array} array The array to compare.
           * @param {Array} other The other array to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `array` and `other` objects.
           * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
           */
          function equalArrays(
            array,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              arrLength = array.length,
              othLength = other.length

            if (
              arrLength != othLength &&
              !(isPartial && othLength > arrLength)
            ) {
              return false
            }
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array)
            var othStacked = stack.get(other)
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array
            }
            var index = -1,
              result = true,
              seen =
                bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined

            stack.set(array, other)
            stack.set(other, array)

            // Ignore non-index properties.
            while (++index < arrLength) {
              var arrValue = array[index],
                othValue = other[index]

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, arrValue, index, other, array, stack)
                  : customizer(arrValue, othValue, index, array, other, stack)
              }
              if (compared !== undefined) {
                if (compared) {
                  continue
                }
                result = false
                break
              }
              // Recursively compare arrays (susceptible to call stack limits).
              if (seen) {
                if (
                  !arraySome(other, function (othValue, othIndex) {
                    if (
                      !cacheHas(seen, othIndex) &&
                      (arrValue === othValue ||
                        equalFunc(
                          arrValue,
                          othValue,
                          bitmask,
                          customizer,
                          stack
                        ))
                    ) {
                      return seen.push(othIndex)
                    }
                  })
                ) {
                  result = false
                  break
                }
              } else if (
                !(
                  arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
                )
              ) {
                result = false
                break
              }
            }
            stack['delete'](array)
            stack['delete'](other)
            return result
          }

          /**
           * A specialized version of `baseIsEqualDeep` for comparing objects of
           * the same `toStringTag`.
           *
           * **Note:** This function only supports comparing values with tags of
           * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {string} tag The `toStringTag` of the objects to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalByTag(
            object,
            other,
            tag,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            switch (tag) {
              case dataViewTag:
                if (
                  object.byteLength != other.byteLength ||
                  object.byteOffset != other.byteOffset
                ) {
                  return false
                }
                object = object.buffer
                other = other.buffer

              case arrayBufferTag:
                if (
                  object.byteLength != other.byteLength ||
                  !equalFunc(new Uint8Array(object), new Uint8Array(other))
                ) {
                  return false
                }
                return true

              case boolTag:
              case dateTag:
              case numberTag:
                // Coerce booleans to `1` or `0` and dates to milliseconds.
                // Invalid dates are coerced to `NaN`.
                return eq(+object, +other)

              case errorTag:
                return (
                  object.name == other.name && object.message == other.message
                )

              case regexpTag:
              case stringTag:
                // Coerce regexes to strings and treat strings, primitives and objects,
                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                // for more details.
                return object == other + ''

              case mapTag:
                var convert = mapToArray

              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG
                convert || (convert = setToArray)

                if (object.size != other.size && !isPartial) {
                  return false
                }
                // Assume cyclic values are equal.
                var stacked = stack.get(object)
                if (stacked) {
                  return stacked == other
                }
                bitmask |= COMPARE_UNORDERED_FLAG

                // Recursively compare objects (susceptible to call stack limits).
                stack.set(object, other)
                var result = equalArrays(
                  convert(object),
                  convert(other),
                  bitmask,
                  customizer,
                  equalFunc,
                  stack
                )
                stack['delete'](object)
                return result

              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other)
                }
            }
            return false
          }

          /**
           * A specialized version of `baseIsEqualDeep` for objects with support for
           * partial deep comparisons.
           *
           * @private
           * @param {Object} object The object to compare.
           * @param {Object} other The other object to compare.
           * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
           * @param {Function} customizer The function to customize comparisons.
           * @param {Function} equalFunc The function to determine equivalents of values.
           * @param {Object} stack Tracks traversed `object` and `other` objects.
           * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
           */
          function equalObjects(
            object,
            other,
            bitmask,
            customizer,
            equalFunc,
            stack
          ) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
              objProps = getAllKeys(object),
              objLength = objProps.length,
              othProps = getAllKeys(other),
              othLength = othProps.length

            if (objLength != othLength && !isPartial) {
              return false
            }
            var index = objLength
            while (index--) {
              var key = objProps[index]
              if (
                !(isPartial ? key in other : hasOwnProperty.call(other, key))
              ) {
                return false
              }
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object)
            var othStacked = stack.get(other)
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object
            }
            var result = true
            stack.set(object, other)
            stack.set(other, object)

            var skipCtor = isPartial
            while (++index < objLength) {
              key = objProps[index]
              var objValue = object[key],
                othValue = other[key]

              if (customizer) {
                var compared = isPartial
                  ? customizer(othValue, objValue, key, other, object, stack)
                  : customizer(objValue, othValue, key, object, other, stack)
              }
              // Recursively compare objects (susceptible to call stack limits).
              if (
                !(compared === undefined
                  ? objValue === othValue ||
                    equalFunc(objValue, othValue, bitmask, customizer, stack)
                  : compared)
              ) {
                result = false
                break
              }
              skipCtor || (skipCtor = key == 'constructor')
            }
            if (result && !skipCtor) {
              var objCtor = object.constructor,
                othCtor = other.constructor

              // Non `Object` object instances with different constructors are not equal.
              if (
                objCtor != othCtor &&
                'constructor' in object &&
                'constructor' in other &&
                !(
                  typeof objCtor == 'function' &&
                  objCtor instanceof objCtor &&
                  typeof othCtor == 'function' &&
                  othCtor instanceof othCtor
                )
              ) {
                result = false
              }
            }
            stack['delete'](object)
            stack['delete'](other)
            return result
          }

          /**
           * A specialized version of `baseRest` which flattens the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @returns {Function} Returns the new function.
           */
          function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '')
          }

          /**
           * Creates an array of own enumerable property names and symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols)
          }

          /**
           * Creates an array of own and inherited enumerable property names and
           * symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names and symbols.
           */
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn)
          }

          /**
           * Gets metadata for `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {*} Returns the metadata for `func`.
           */
          var getData = !metaMap
            ? noop
            : function (func) {
                return metaMap.get(func)
              }

          /**
           * Gets the name of `func`.
           *
           * @private
           * @param {Function} func The function to query.
           * @returns {string} Returns the function name.
           */
          function getFuncName(func) {
            var result = func.name + '',
              array = realNames[result],
              length = hasOwnProperty.call(realNames, result) ? array.length : 0

            while (length--) {
              var data = array[length],
                otherFunc = data.func
              if (otherFunc == null || otherFunc == func) {
                return data.name
              }
            }
            return result
          }

          /**
           * Gets the argument placeholder value for `func`.
           *
           * @private
           * @param {Function} func The function to inspect.
           * @returns {*} Returns the placeholder value.
           */
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder')
              ? lodash
              : func
            return object.placeholder
          }

          /**
           * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
           * this function returns the custom method, otherwise it returns `baseIteratee`.
           * If arguments are provided, the chosen function is invoked with them and
           * its result is returned.
           *
           * @private
           * @param {*} [value] The value to convert to an iteratee.
           * @param {number} [arity] The arity of the created iteratee.
           * @returns {Function} Returns the chosen function or its result.
           */
          function getIteratee() {
            var result = lodash.iteratee || iteratee
            result = result === iteratee ? baseIteratee : result
            return arguments.length
              ? result(arguments[0], arguments[1])
              : result
          }

          /**
           * Gets the data for `map`.
           *
           * @private
           * @param {Object} map The map to query.
           * @param {string} key The reference key.
           * @returns {*} Returns the map data.
           */
          function getMapData(map, key) {
            var data = map.__data__
            return isKeyable(key)
              ? data[typeof key == 'string' ? 'string' : 'hash']
              : data.map
          }

          /**
           * Gets the property names, values, and compare flags of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the match data of `object`.
           */
          function getMatchData(object) {
            var result = keys(object),
              length = result.length

            while (length--) {
              var key = result[length],
                value = object[key]

              result[length] = [key, value, isStrictComparable(value)]
            }
            return result
          }

          /**
           * Gets the native function at `key` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the method to get.
           * @returns {*} Returns the function if it's native, else `undefined`.
           */
          function getNative(object, key) {
            var value = getValue(object, key)
            return baseIsNative(value) ? value : undefined
          }

          /**
           * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the raw `toStringTag`.
           */
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag),
              tag = value[symToStringTag]

            try {
              value[symToStringTag] = undefined
              var unmasked = true
            } catch (e) {}

            var result = nativeObjectToString.call(value)
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag
              } else {
                delete value[symToStringTag]
              }
            }
            return result
          }

          /**
           * Creates an array of the own enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbols = !nativeGetSymbols
            ? stubArray
            : function (object) {
                if (object == null) {
                  return []
                }
                object = Object(object)
                return arrayFilter(nativeGetSymbols(object), function (symbol) {
                  return propertyIsEnumerable.call(object, symbol)
                })
              }

          /**
           * Creates an array of the own and inherited enumerable symbols of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of symbols.
           */
          var getSymbolsIn = !nativeGetSymbols
            ? stubArray
            : function (object) {
                var result = []
                while (object) {
                  arrayPush(result, getSymbols(object))
                  object = getPrototype(object)
                }
                return result
              }

          /**
           * Gets the `toStringTag` of `value`.
           *
           * @private
           * @param {*} value The value to query.
           * @returns {string} Returns the `toStringTag`.
           */
          var getTag = baseGetTag

          // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
          if (
            (DataView &&
              getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
            (Map && getTag(new Map()) != mapTag) ||
            (Promise && getTag(Promise.resolve()) != promiseTag) ||
            (Set && getTag(new Set()) != setTag) ||
            (WeakMap && getTag(new WeakMap()) != weakMapTag)
          ) {
            getTag = function (value) {
              var result = baseGetTag(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : ''

              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag
                  case mapCtorString:
                    return mapTag
                  case promiseCtorString:
                    return promiseTag
                  case setCtorString:
                    return setTag
                  case weakMapCtorString:
                    return weakMapTag
                }
              }
              return result
            }
          }

          /**
           * Gets the view, applying any `transforms` to the `start` and `end` positions.
           *
           * @private
           * @param {number} start The start of the view.
           * @param {number} end The end of the view.
           * @param {Array} transforms The transformations to apply to the view.
           * @returns {Object} Returns an object containing the `start` and `end`
           *  positions of the view.
           */
          function getView(start, end, transforms) {
            var index = -1,
              length = transforms.length

            while (++index < length) {
              var data = transforms[index],
                size = data.size

              switch (data.type) {
                case 'drop':
                  start += size
                  break
                case 'dropRight':
                  end -= size
                  break
                case 'take':
                  end = nativeMin(end, start + size)
                  break
                case 'takeRight':
                  start = nativeMax(start, end - size)
                  break
              }
            }
            return { start: start, end: end }
          }

          /**
           * Extracts wrapper details from the `source` body comment.
           *
           * @private
           * @param {string} source The source to inspect.
           * @returns {Array} Returns the wrapper details.
           */
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails)
            return match ? match[1].split(reSplitDetails) : []
          }

          /**
           * Checks if `path` exists on `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @param {Function} hasFunc The function to check properties.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           */
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object)

            var index = -1,
              length = path.length,
              result = false

            while (++index < length) {
              var key = toKey(path[index])
              if (!(result = object != null && hasFunc(object, key))) {
                break
              }
              object = object[key]
            }
            if (result || ++index != length) {
              return result
            }
            length = object == null ? 0 : object.length
            return (
              !!length &&
              isLength(length) &&
              isIndex(key, length) &&
              (isArray(object) || isArguments(object))
            )
          }

          /**
           * Initializes an array clone.
           *
           * @private
           * @param {Array} array The array to clone.
           * @returns {Array} Returns the initialized clone.
           */
          function initCloneArray(array) {
            var length = array.length,
              result = new array.constructor(length)

            // Add properties assigned by `RegExp#exec`.
            if (
              length &&
              typeof array[0] == 'string' &&
              hasOwnProperty.call(array, 'index')
            ) {
              result.index = array.index
              result.input = array.input
            }
            return result
          }

          /**
           * Initializes an object clone.
           *
           * @private
           * @param {Object} object The object to clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneObject(object) {
            return typeof object.constructor == 'function' &&
              !isPrototype(object)
              ? baseCreate(getPrototype(object))
              : {}
          }

          /**
           * Initializes an object clone based on its `toStringTag`.
           *
           * **Note:** This function only supports cloning values with tags of
           * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
           *
           * @private
           * @param {Object} object The object to clone.
           * @param {string} tag The `toStringTag` of the object to clone.
           * @param {boolean} [isDeep] Specify a deep clone.
           * @returns {Object} Returns the initialized clone.
           */
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object)

              case boolTag:
              case dateTag:
                return new Ctor(+object)

              case dataViewTag:
                return cloneDataView(object, isDeep)

              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep)

              case mapTag:
                return new Ctor()

              case numberTag:
              case stringTag:
                return new Ctor(object)

              case regexpTag:
                return cloneRegExp(object)

              case setTag:
                return new Ctor()

              case symbolTag:
                return cloneSymbol(object)
            }
          }

          /**
           * Inserts wrapper `details` in a comment at the top of the `source` body.
           *
           * @private
           * @param {string} source The source to modify.
           * @returns {Array} details The details to insert.
           * @returns {string} Returns the modified source.
           */
          function insertWrapDetails(source, details) {
            var length = details.length
            if (!length) {
              return source
            }
            var lastIndex = length - 1
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex]
            details = details.join(length > 2 ? ', ' : ' ')
            return source.replace(
              reWrapComment,
              '{\n/* [wrapped with ' + details + '] */\n'
            )
          }

          /**
           * Checks if `value` is a flattenable `arguments` object or array.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
           */
          function isFlattenable(value) {
            return (
              isArray(value) ||
              isArguments(value) ||
              !!(spreadableSymbol && value && value[spreadableSymbol])
            )
          }

          /**
           * Checks if `value` is a valid array-like index.
           *
           * @private
           * @param {*} value The value to check.
           * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
           * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
           */
          function isIndex(value, length) {
            var type = typeof value
            length = length == null ? MAX_SAFE_INTEGER : length

            return (
              !!length &&
              (type == 'number' ||
                (type != 'symbol' && reIsUint.test(value))) &&
              value > -1 &&
              value % 1 == 0 &&
              value < length
            )
          }

          /**
           * Checks if the given arguments are from an iteratee call.
           *
           * @private
           * @param {*} value The potential iteratee value argument.
           * @param {*} index The potential iteratee index or key argument.
           * @param {*} object The potential iteratee object argument.
           * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
           *  else `false`.
           */
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false
            }
            var type = typeof index
            if (
              type == 'number'
                ? isArrayLike(object) && isIndex(index, object.length)
                : type == 'string' && index in object
            ) {
              return eq(object[index], value)
            }
            return false
          }

          /**
           * Checks if `value` is a property name and not a property path.
           *
           * @private
           * @param {*} value The value to check.
           * @param {Object} [object] The object to query keys on.
           * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
           */
          function isKey(value, object) {
            if (isArray(value)) {
              return false
            }
            var type = typeof value
            if (
              type == 'number' ||
              type == 'symbol' ||
              type == 'boolean' ||
              value == null ||
              isSymbol(value)
            ) {
              return true
            }
            return (
              reIsPlainProp.test(value) ||
              !reIsDeepProp.test(value) ||
              (object != null && value in Object(object))
            )
          }

          /**
           * Checks if `value` is suitable for use as unique object key.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
           */
          function isKeyable(value) {
            var type = typeof value
            return type == 'string' ||
              type == 'number' ||
              type == 'symbol' ||
              type == 'boolean'
              ? value !== '__proto__'
              : value === null
          }

          /**
           * Checks if `func` has a lazy counterpart.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
           *  else `false`.
           */
          function isLaziable(func) {
            var funcName = getFuncName(func),
              other = lodash[funcName]

            if (
              typeof other != 'function' ||
              !(funcName in LazyWrapper.prototype)
            ) {
              return false
            }
            if (func === other) {
              return true
            }
            var data = getData(other)
            return !!data && func === data[0]
          }

          /**
           * Checks if `func` has its source masked.
           *
           * @private
           * @param {Function} func The function to check.
           * @returns {boolean} Returns `true` if `func` is masked, else `false`.
           */
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func
          }

          /**
           * Checks if `func` is capable of being masked.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
           */
          var isMaskable = coreJsData ? isFunction : stubFalse

          /**
           * Checks if `value` is likely a prototype object.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
           */
          function isPrototype(value) {
            var Ctor = value && value.constructor,
              proto =
                (typeof Ctor == 'function' && Ctor.prototype) || objectProto

            return value === proto
          }

          /**
           * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` if suitable for strict
           *  equality comparisons, else `false`.
           */
          function isStrictComparable(value) {
            return value === value && !isObject(value)
          }

          /**
           * A specialized version of `matchesProperty` for source values suitable
           * for strict equality comparisons, i.e. `===`.
           *
           * @private
           * @param {string} key The key of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           */
          function matchesStrictComparable(key, srcValue) {
            return function (object) {
              if (object == null) {
                return false
              }
              return (
                object[key] === srcValue &&
                (srcValue !== undefined || key in Object(object))
              )
            }
          }

          /**
           * A specialized version of `_.memoize` which clears the memoized function's
           * cache when it exceeds `MAX_MEMOIZE_SIZE`.
           *
           * @private
           * @param {Function} func The function to have its output memoized.
           * @returns {Function} Returns the new memoized function.
           */
          function memoizeCapped(func) {
            var result = memoize(func, function (key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear()
              }
              return key
            })

            var cache = result.cache
            return result
          }

          /**
           * Merges the function metadata of `source` into `data`.
           *
           * Merging metadata reduces the number of wrappers used to invoke a function.
           * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
           * may be applied regardless of execution order. Methods like `_.ary` and
           * `_.rearg` modify function arguments, making the order in which they are
           * executed important, preventing the merging of metadata. However, we make
           * an exception for a safe combined case where curried functions have `_.ary`
           * and or `_.rearg` applied.
           *
           * @private
           * @param {Array} data The destination metadata.
           * @param {Array} source The source metadata.
           * @returns {Array} Returns `data`.
           */
          function mergeData(data, source) {
            var bitmask = data[1],
              srcBitmask = source[1],
              newBitmask = bitmask | srcBitmask,
              isCommon =
                newBitmask <
                (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG)

            var isCombo =
              (srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG) ||
              (srcBitmask == WRAP_ARY_FLAG &&
                bitmask == WRAP_REARG_FLAG &&
                data[7].length <= source[8]) ||
              (srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) &&
                source[7].length <= source[8] &&
                bitmask == WRAP_CURRY_FLAG)

            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) {
              return data
            }
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2]
              // Set when currying a bound function.
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG
            }
            // Compose partial arguments.
            var value = source[3]
            if (value) {
              var partials = data[3]
              data[3] = partials
                ? composeArgs(partials, value, source[4])
                : value
              data[4] = partials
                ? replaceHolders(data[3], PLACEHOLDER)
                : source[4]
            }
            // Compose partial right arguments.
            value = source[5]
            if (value) {
              partials = data[5]
              data[5] = partials
                ? composeArgsRight(partials, value, source[6])
                : value
              data[6] = partials
                ? replaceHolders(data[5], PLACEHOLDER)
                : source[6]
            }
            // Use source `argPos` if available.
            value = source[7]
            if (value) {
              data[7] = value
            }
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] =
                data[8] == null ? source[8] : nativeMin(data[8], source[8])
            }
            // Use source `arity` if one is not provided.
            if (data[9] == null) {
              data[9] = source[9]
            }
            // Use source `func` and merge bitmasks.
            data[0] = source[0]
            data[1] = newBitmask

            return data
          }

          /**
           * This function is like
           * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * except that it includes inherited enumerable properties.
           *
           * @private
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           */
          function nativeKeysIn(object) {
            var result = []
            if (object != null) {
              for (var key in Object(object)) {
                result.push(key)
              }
            }
            return result
          }

          /**
           * Converts `value` to a string using `Object.prototype.toString`.
           *
           * @private
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           */
          function objectToString(value) {
            return nativeObjectToString.call(value)
          }

          /**
           * A specialized version of `baseRest` which transforms the rest array.
           *
           * @private
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @param {Function} transform The rest array transform.
           * @returns {Function} Returns the new function.
           */
          function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0)
            return function () {
              var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length)

              while (++index < length) {
                array[index] = args[start + index]
              }
              index = -1
              var otherArgs = Array(start + 1)
              while (++index < start) {
                otherArgs[index] = args[index]
              }
              otherArgs[start] = transform(array)
              return apply(func, this, otherArgs)
            }
          }

          /**
           * Gets the parent value at `path` of `object`.
           *
           * @private
           * @param {Object} object The object to query.
           * @param {Array} path The path to get the parent value of.
           * @returns {*} Returns the parent value.
           */
          function parent(object, path) {
            return path.length < 2
              ? object
              : baseGet(object, baseSlice(path, 0, -1))
          }

          /**
           * Reorder `array` according to the specified indexes where the element at
           * the first index is assigned as the first element, the element at
           * the second index is assigned as the second element, and so on.
           *
           * @private
           * @param {Array} array The array to reorder.
           * @param {Array} indexes The arranged array indexes.
           * @returns {Array} Returns `array`.
           */
          function reorder(array, indexes) {
            var arrLength = array.length,
              length = nativeMin(indexes.length, arrLength),
              oldArray = copyArray(array)

            while (length--) {
              var index = indexes[length]
              array[length] = isIndex(index, arrLength)
                ? oldArray[index]
                : undefined
            }
            return array
          }

          /**
           * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
           *
           * @private
           * @param {Object} object The object to query.
           * @param {string} key The key of the property to get.
           * @returns {*} Returns the property value.
           */
          function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') {
              return
            }

            if (key == '__proto__') {
              return
            }

            return object[key]
          }

          /**
           * Sets metadata for `func`.
           *
           * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
           * period of time, it will trip its breaker and transition to an identity
           * function to avoid garbage collection pauses in V8. See
           * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
           * for more details.
           *
           * @private
           * @param {Function} func The function to associate metadata with.
           * @param {*} data The metadata.
           * @returns {Function} Returns `func`.
           */
          var setData = shortOut(baseSetData)

          /**
           * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
           *
           * @private
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @returns {number|Object} Returns the timer id or timeout object.
           */
          var setTimeout =
            ctxSetTimeout ||
            function (func, wait) {
              return root.setTimeout(func, wait)
            }

          /**
           * Sets the `toString` method of `func` to return `string`.
           *
           * @private
           * @param {Function} func The function to modify.
           * @param {Function} string The `toString` result.
           * @returns {Function} Returns `func`.
           */
          var setToString = shortOut(baseSetToString)

          /**
           * Sets the `toString` method of `wrapper` to mimic the source of `reference`
           * with wrapper details in a comment at the top of the source body.
           *
           * @private
           * @param {Function} wrapper The function to modify.
           * @param {Function} reference The reference function.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Function} Returns `wrapper`.
           */
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + ''
            return setToString(
              wrapper,
              insertWrapDetails(
                source,
                updateWrapDetails(getWrapDetails(source), bitmask)
              )
            )
          }

          /**
           * Creates a function that'll short out and invoke `identity` instead
           * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
           * milliseconds.
           *
           * @private
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new shortable function.
           */
          function shortOut(func) {
            var count = 0,
              lastCalled = 0

            return function () {
              var stamp = nativeNow(),
                remaining = HOT_SPAN - (stamp - lastCalled)

              lastCalled = stamp
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0]
                }
              } else {
                count = 0
              }
              return func.apply(undefined, arguments)
            }
          }

          /**
           * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
           *
           * @private
           * @param {Array} array The array to shuffle.
           * @param {number} [size=array.length] The size of `array`.
           * @returns {Array} Returns `array`.
           */
          function shuffleSelf(array, size) {
            var index = -1,
              length = array.length,
              lastIndex = length - 1

            size = size === undefined ? length : size
            while (++index < size) {
              var rand = baseRandom(index, lastIndex),
                value = array[rand]

              array[rand] = array[index]
              array[index] = value
            }
            array.length = size
            return array
          }

          /**
           * Converts `string` to a property path array.
           *
           * @private
           * @param {string} string The string to convert.
           * @returns {Array} Returns the property path array.
           */
          var stringToPath = memoizeCapped(function (string) {
            var result = []
            if (string.charCodeAt(0) === 46 /* . */) {
              result.push('')
            }
            string.replace(
              rePropName,
              function (match, number, quote, subString) {
                result.push(
                  quote
                    ? subString.replace(reEscapeChar, '$1')
                    : number || match
                )
              }
            )
            return result
          })

          /**
           * Converts `value` to a string key if it's not a string or symbol.
           *
           * @private
           * @param {*} value The value to inspect.
           * @returns {string|symbol} Returns the key.
           */
          function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) {
              return value
            }
            var result = value + ''
            return result == '0' && 1 / value == -INFINITY ? '-0' : result
          }

          /**
           * Converts `func` to its source code.
           *
           * @private
           * @param {Function} func The function to convert.
           * @returns {string} Returns the source code.
           */
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func)
              } catch (e) {}
              try {
                return func + ''
              } catch (e) {}
            }
            return ''
          }

          /**
           * Updates wrapper `details` based on `bitmask` flags.
           *
           * @private
           * @returns {Array} details The details to modify.
           * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
           * @returns {Array} Returns `details`.
           */
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function (pair) {
              var value = '_.' + pair[0]
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value)
              }
            })
            return details.sort()
          }

          /**
           * Creates a clone of `wrapper`.
           *
           * @private
           * @param {Object} wrapper The wrapper to clone.
           * @returns {Object} Returns the cloned wrapper.
           */
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone()
            }
            var result = new LodashWrapper(
              wrapper.__wrapped__,
              wrapper.__chain__
            )
            result.__actions__ = copyArray(wrapper.__actions__)
            result.__index__ = wrapper.__index__
            result.__values__ = wrapper.__values__
            return result
          }

          /*------------------------------------------------------------------------*/

          /**
           * Creates an array of elements split into groups the length of `size`.
           * If `array` can't be split evenly, the final chunk will be the remaining
           * elements.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to process.
           * @param {number} [size=1] The length of each chunk
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the new array of chunks.
           * @example
           *
           * _.chunk(['a', 'b', 'c', 'd'], 2);
           * // => [['a', 'b'], ['c', 'd']]
           *
           * _.chunk(['a', 'b', 'c', 'd'], 3);
           * // => [['a', 'b', 'c'], ['d']]
           */
          function chunk(array, size, guard) {
            if (
              guard ? isIterateeCall(array, size, guard) : size === undefined
            ) {
              size = 1
            } else {
              size = nativeMax(toInteger(size), 0)
            }
            var length = array == null ? 0 : array.length
            if (!length || size < 1) {
              return []
            }
            var index = 0,
              resIndex = 0,
              result = Array(nativeCeil(length / size))

            while (index < length) {
              result[resIndex++] = baseSlice(array, index, (index += size))
            }
            return result
          }

          /**
           * Creates an array with all falsey values removed. The values `false`, `null`,
           * `0`, `""`, `undefined`, and `NaN` are falsey.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to compact.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.compact([0, 1, false, 2, '', 3]);
           * // => [1, 2, 3]
           */
          function compact(array) {
            var index = -1,
              length = array == null ? 0 : array.length,
              resIndex = 0,
              result = []

            while (++index < length) {
              var value = array[index]
              if (value) {
                result[resIndex++] = value
              }
            }
            return result
          }

          /**
           * Creates a new array concatenating `array` with any additional arrays
           * and/or values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to concatenate.
           * @param {...*} [values] The values to concatenate.
           * @returns {Array} Returns the new concatenated array.
           * @example
           *
           * var array = [1];
           * var other = _.concat(array, 2, [3], [[4]]);
           *
           * console.log(other);
           * // => [1, 2, 3, [4]]
           *
           * console.log(array);
           * // => [1]
           */
          function concat() {
            var length = arguments.length
            if (!length) {
              return []
            }
            var args = Array(length - 1),
              array = arguments[0],
              index = length

            while (index--) {
              args[index - 1] = arguments[index]
            }
            return arrayPush(
              isArray(array) ? copyArray(array) : [array],
              baseFlatten(args, 1)
            )
          }

          /**
           * Creates an array of `array` values not included in the other given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * **Note:** Unlike `_.pullAll`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.without, _.xor
           * @example
           *
           * _.difference([2, 1], [2, 3]);
           * // => [1]
           */
          var difference = baseRest(function (array, values) {
            return isArrayLikeObject(array)
              ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true)
                )
              : []
          })

          /**
           * This method is like `_.difference` except that it accepts `iteratee` which
           * is invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */
          var differenceBy = baseRest(function (array, values) {
            var iteratee = last(values)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return isArrayLikeObject(array)
              ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  getIteratee(iteratee, 2)
                )
              : []
          })

          /**
           * This method is like `_.difference` except that it accepts `comparator`
           * which is invoked to compare elements of `array` to `values`. The order and
           * references of result values are determined by the first array. The comparator
           * is invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...Array} [values] The values to exclude.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           *
           * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }]
           */
          var differenceWith = baseRest(function (array, values) {
            var comparator = last(values)
            if (isArrayLikeObject(comparator)) {
              comparator = undefined
            }
            return isArrayLikeObject(array)
              ? baseDifference(
                  array,
                  baseFlatten(values, 1, isArrayLikeObject, true),
                  undefined,
                  comparator
                )
              : []
          })

          /**
           * Creates a slice of `array` with `n` elements dropped from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.drop([1, 2, 3]);
           * // => [2, 3]
           *
           * _.drop([1, 2, 3], 2);
           * // => [3]
           *
           * _.drop([1, 2, 3], 5);
           * // => []
           *
           * _.drop([1, 2, 3], 0);
           * // => [1, 2, 3]
           */
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            return baseSlice(array, n < 0 ? 0 : n, length)
          }

          /**
           * Creates a slice of `array` with `n` elements dropped from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to drop.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.dropRight([1, 2, 3]);
           * // => [1, 2]
           *
           * _.dropRight([1, 2, 3], 2);
           * // => [1]
           *
           * _.dropRight([1, 2, 3], 5);
           * // => []
           *
           * _.dropRight([1, 2, 3], 0);
           * // => [1, 2, 3]
           */
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            n = length - n
            return baseSlice(array, 0, n < 0 ? 0 : n)
          }

          /**
           * Creates a slice of `array` excluding elements dropped from the end.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.dropRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropRightWhile(users, ['active', false]);
           * // => objects for ['barney']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropRightWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */
          function dropRightWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3), true, true)
              : []
          }

          /**
           * Creates a slice of `array` excluding elements dropped from the beginning.
           * Elements are dropped until `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.dropWhile(users, function(o) { return !o.active; });
           * // => objects for ['pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.dropWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.dropWhile(users, ['active', false]);
           * // => objects for ['pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.dropWhile(users, 'active');
           * // => objects for ['barney', 'fred', 'pebbles']
           */
          function dropWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3), true)
              : []
          }

          /**
           * Fills elements of `array` with `value` from `start` up to, but not
           * including, `end`.
           *
           * **Note:** This method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Array
           * @param {Array} array The array to fill.
           * @param {*} value The value to fill `array` with.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.fill(array, 'a');
           * console.log(array);
           * // => ['a', 'a', 'a']
           *
           * _.fill(Array(3), 2);
           * // => [2, 2, 2]
           *
           * _.fill([4, 6, 8, 10], '*', 1, 3);
           * // => [4, '*', '*', 10]
           */
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            if (
              start &&
              typeof start != 'number' &&
              isIterateeCall(array, value, start)
            ) {
              start = 0
              end = length
            }
            return baseFill(array, value, start, end)
          }

          /**
           * This method is like `_.find` except that it returns the index of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.findIndex(users, function(o) { return o.user == 'barney'; });
           * // => 0
           *
           * // The `_.matches` iteratee shorthand.
           * _.findIndex(users, { 'user': 'fred', 'active': false });
           * // => 1
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findIndex(users, ['active', false]);
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.findIndex(users, 'active');
           * // => 2
           */
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex)
            if (index < 0) {
              index = nativeMax(length + index, 0)
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index)
          }

          /**
           * This method is like `_.findIndex` except that it iterates over elements
           * of `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the found element, else `-1`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
           * // => 2
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastIndex(users, { 'user': 'barney', 'active': true });
           * // => 0
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastIndex(users, ['active', false]);
           * // => 2
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastIndex(users, 'active');
           * // => 0
           */
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = length - 1
            if (fromIndex !== undefined) {
              index = toInteger(fromIndex)
              index =
                fromIndex < 0
                  ? nativeMax(length + index, 0)
                  : nativeMin(index, length - 1)
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true)
          }

          /**
           * Flattens `array` a single level deep.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flatten([1, [2, [3, [4]], 5]]);
           * // => [1, 2, [3, [4]], 5]
           */
          function flatten(array) {
            var length = array == null ? 0 : array.length
            return length ? baseFlatten(array, 1) : []
          }

          /**
           * Recursively flattens `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * _.flattenDeep([1, [2, [3, [4]], 5]]);
           * // => [1, 2, 3, 4, 5]
           */
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length
            return length ? baseFlatten(array, INFINITY) : []
          }

          /**
           * Recursively flatten `array` up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Array
           * @param {Array} array The array to flatten.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * var array = [1, [2, [3, [4]], 5]];
           *
           * _.flattenDepth(array, 1);
           * // => [1, 2, [3, [4]], 5]
           *
           * _.flattenDepth(array, 2);
           * // => [1, 2, 3, [4], 5]
           */
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            depth = depth === undefined ? 1 : toInteger(depth)
            return baseFlatten(array, depth)
          }

          /**
           * The inverse of `_.toPairs`; this method returns an object composed
           * from key-value `pairs`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} pairs The key-value pairs.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.fromPairs([['a', 1], ['b', 2]]);
           * // => { 'a': 1, 'b': 2 }
           */
          function fromPairs(pairs) {
            var index = -1,
              length = pairs == null ? 0 : pairs.length,
              result = {}

            while (++index < length) {
              var pair = pairs[index]
              result[pair[0]] = pair[1]
            }
            return result
          }

          /**
           * Gets the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias first
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the first element of `array`.
           * @example
           *
           * _.head([1, 2, 3]);
           * // => 1
           *
           * _.head([]);
           * // => undefined
           */
          function head(array) {
            return array && array.length ? array[0] : undefined
          }

          /**
           * Gets the index at which the first occurrence of `value` is found in `array`
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. If `fromIndex` is negative, it's used as the
           * offset from the end of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.indexOf([1, 2, 1, 2], 2);
           * // => 1
           *
           * // Search from the `fromIndex`.
           * _.indexOf([1, 2, 1, 2], 2, 2);
           * // => 3
           */
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex)
            if (index < 0) {
              index = nativeMax(length + index, 0)
            }
            return baseIndexOf(array, value, index)
          }

          /**
           * Gets all but the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.initial([1, 2, 3]);
           * // => [1, 2]
           */
          function initial(array) {
            var length = array == null ? 0 : array.length
            return length ? baseSlice(array, 0, -1) : []
          }

          /**
           * Creates an array of unique values that are included in all given arrays
           * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons. The order and references of result values are
           * determined by the first array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersection([2, 1], [2, 3]);
           * // => [2]
           */
          var intersection = baseRest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject)
            return mapped.length && mapped[0] === arrays[0]
              ? baseIntersection(mapped)
              : []
          })

          /**
           * This method is like `_.intersection` except that it accepts `iteratee`
           * which is invoked for each element of each `arrays` to generate the criterion
           * by which they're compared. The order and references of result values are
           * determined by the first array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [2.1]
           *
           * // The `_.property` iteratee shorthand.
           * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }]
           */
          var intersectionBy = baseRest(function (arrays) {
            var iteratee = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject)

            if (iteratee === last(mapped)) {
              iteratee = undefined
            } else {
              mapped.pop()
            }
            return mapped.length && mapped[0] === arrays[0]
              ? baseIntersection(mapped, getIteratee(iteratee, 2))
              : []
          })

          /**
           * This method is like `_.intersection` except that it accepts `comparator`
           * which is invoked to compare elements of `arrays`. The order and references
           * of result values are determined by the first array. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of intersecting values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.intersectionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }]
           */
          var intersectionWith = baseRest(function (arrays) {
            var comparator = last(arrays),
              mapped = arrayMap(arrays, castArrayLikeObject)

            comparator =
              typeof comparator == 'function' ? comparator : undefined
            if (comparator) {
              mapped.pop()
            }
            return mapped.length && mapped[0] === arrays[0]
              ? baseIntersection(mapped, undefined, comparator)
              : []
          })

          /**
           * Converts all elements in `array` into a string separated by `separator`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to convert.
           * @param {string} [separator=','] The element separator.
           * @returns {string} Returns the joined string.
           * @example
           *
           * _.join(['a', 'b', 'c'], '~');
           * // => 'a~b~c'
           */
          function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator)
          }

          /**
           * Gets the last element of `array`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {*} Returns the last element of `array`.
           * @example
           *
           * _.last([1, 2, 3]);
           * // => 3
           */
          function last(array) {
            var length = array == null ? 0 : array.length
            return length ? array[length - 1] : undefined
          }

          /**
           * This method is like `_.indexOf` except that it iterates over elements of
           * `array` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=array.length-1] The index to search from.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.lastIndexOf([1, 2, 1, 2], 2);
           * // => 3
           *
           * // Search from the `fromIndex`.
           * _.lastIndexOf([1, 2, 1, 2], 2, 2);
           * // => 1
           */
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return -1
            }
            var index = length
            if (fromIndex !== undefined) {
              index = toInteger(fromIndex)
              index =
                index < 0
                  ? nativeMax(length + index, 0)
                  : nativeMin(index, length - 1)
            }
            return value === value
              ? strictLastIndexOf(array, value, index)
              : baseFindIndex(array, baseIsNaN, index, true)
          }

          /**
           * Gets the element at index `n` of `array`. If `n` is negative, the nth
           * element from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.11.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=0] The index of the element to return.
           * @returns {*} Returns the nth element of `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           *
           * _.nth(array, 1);
           * // => 'b'
           *
           * _.nth(array, -2);
           * // => 'c';
           */
          function nth(array, n) {
            return array && array.length
              ? baseNth(array, toInteger(n))
              : undefined
          }

          /**
           * Removes all given values from `array` using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
           * to remove elements from an array by predicate.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...*} [values] The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pull(array, 'a', 'c');
           * console.log(array);
           * // => ['b', 'b']
           */
          var pull = baseRest(pullAll)

          /**
           * This method is like `_.pull` except that it accepts an array of values to remove.
           *
           * **Note:** Unlike `_.difference`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
           *
           * _.pullAll(array, ['a', 'c']);
           * console.log(array);
           * // => ['b', 'b']
           */
          function pullAll(array, values) {
            return array && array.length && values && values.length
              ? basePullAll(array, values)
              : array
          }

          /**
           * This method is like `_.pullAll` except that it accepts `iteratee` which is
           * invoked for each element of `array` and `values` to generate the criterion
           * by which they're compared. The iteratee is invoked with one argument: (value).
           *
           * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
           *
           * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
           * console.log(array);
           * // => [{ 'x': 2 }]
           */
          function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length
              ? basePullAll(array, values, getIteratee(iteratee, 2))
              : array
          }

          /**
           * This method is like `_.pullAll` except that it accepts `comparator` which
           * is invoked to compare elements of `array` to `values`. The comparator is
           * invoked with two arguments: (arrVal, othVal).
           *
           * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Array} values The values to remove.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
           *
           * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
           * console.log(array);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
           */
          function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length
              ? basePullAll(array, values, undefined, comparator)
              : array
          }

          /**
           * Removes elements from `array` corresponding to `indexes` and returns an
           * array of removed elements.
           *
           * **Note:** Unlike `_.at`, this method mutates `array`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {...(number|number[])} [indexes] The indexes of elements to remove.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = ['a', 'b', 'c', 'd'];
           * var pulled = _.pullAt(array, [1, 3]);
           *
           * console.log(array);
           * // => ['a', 'c']
           *
           * console.log(pulled);
           * // => ['b', 'd']
           */
          var pullAt = flatRest(function (array, indexes) {
            var length = array == null ? 0 : array.length,
              result = baseAt(array, indexes)

            basePullAt(
              array,
              arrayMap(indexes, function (index) {
                return isIndex(index, length) ? +index : index
              }).sort(compareAscending)
            )

            return result
          })

          /**
           * Removes all elements from `array` that `predicate` returns truthy for
           * and returns an array of the removed elements. The predicate is invoked
           * with three arguments: (value, index, array).
           *
           * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
           * to pull elements from an array by value.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new array of removed elements.
           * @example
           *
           * var array = [1, 2, 3, 4];
           * var evens = _.remove(array, function(n) {
           *   return n % 2 == 0;
           * });
           *
           * console.log(array);
           * // => [1, 3]
           *
           * console.log(evens);
           * // => [2, 4]
           */
          function remove(array, predicate) {
            var result = []
            if (!(array && array.length)) {
              return result
            }
            var index = -1,
              indexes = [],
              length = array.length

            predicate = getIteratee(predicate, 3)
            while (++index < length) {
              var value = array[index]
              if (predicate(value, index, array)) {
                result.push(value)
                indexes.push(index)
              }
            }
            basePullAt(array, indexes)
            return result
          }

          /**
           * Reverses `array` so that the first element becomes the last, the second
           * element becomes the second to last, and so on.
           *
           * **Note:** This method mutates `array` and is based on
           * [`Array#reverse`](https://mdn.io/Array/reverse).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to modify.
           * @returns {Array} Returns `array`.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _.reverse(array);
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array)
          }

          /**
           * Creates a slice of `array` from `start` up to, but not including, `end`.
           *
           * **Note:** This method is used instead of
           * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
           * returned.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to slice.
           * @param {number} [start=0] The start position.
           * @param {number} [end=array.length] The end position.
           * @returns {Array} Returns the slice of `array`.
           */
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            if (
              end &&
              typeof end != 'number' &&
              isIterateeCall(array, start, end)
            ) {
              start = 0
              end = length
            } else {
              start = start == null ? 0 : toInteger(start)
              end = end === undefined ? length : toInteger(end)
            }
            return baseSlice(array, start, end)
          }

          /**
           * Uses a binary search to determine the lowest index at which `value`
           * should be inserted into `array` in order to maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedIndex([30, 50], 40);
           * // => 1
           */
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value)
          }

          /**
           * This method is like `_.sortedIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 0
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
           * // => 0
           */
          function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2))
          }

          /**
           * This method is like `_.indexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
           * // => 1
           */
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length
            if (length) {
              var index = baseSortedIndex(array, value)
              if (index < length && eq(array[index], value)) {
                return index
              }
            }
            return -1
          }

          /**
           * This method is like `_.sortedIndex` except that it returns the highest
           * index at which `value` should be inserted into `array` in order to
           * maintain its sort order.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
           * // => 4
           */
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true)
          }

          /**
           * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
           * which is invoked for `value` and each element of `array` to compute their
           * sort ranking. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The sorted array to inspect.
           * @param {*} value The value to evaluate.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the index at which `value` should be inserted
           *  into `array`.
           * @example
           *
           * var objects = [{ 'x': 4 }, { 'x': 5 }];
           *
           * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
           * // => 1
           *
           * // The `_.property` iteratee shorthand.
           * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
           * // => 1
           */
          function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(
              array,
              value,
              getIteratee(iteratee, 2),
              true
            )
          }

          /**
           * This method is like `_.lastIndexOf` except that it performs a binary
           * search on a sorted `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {*} value The value to search for.
           * @returns {number} Returns the index of the matched value, else `-1`.
           * @example
           *
           * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
           * // => 3
           */
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1
              if (eq(array[index], value)) {
                return index
              }
            }
            return -1
          }

          /**
           * This method is like `_.uniq` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniq([1, 1, 2]);
           * // => [1, 2]
           */
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : []
          }

          /**
           * This method is like `_.uniqBy` except that it's designed and optimized
           * for sorted arrays.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
           * // => [1.1, 2.3]
           */
          function sortedUniqBy(array, iteratee) {
            return array && array.length
              ? baseSortedUniq(array, getIteratee(iteratee, 2))
              : []
          }

          /**
           * Gets all but the first element of `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.tail([1, 2, 3]);
           * // => [2, 3]
           */
          function tail(array) {
            var length = array == null ? 0 : array.length
            return length ? baseSlice(array, 1, length) : []
          }

          /**
           * Creates a slice of `array` with `n` elements taken from the beginning.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.take([1, 2, 3]);
           * // => [1]
           *
           * _.take([1, 2, 3], 2);
           * // => [1, 2]
           *
           * _.take([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.take([1, 2, 3], 0);
           * // => []
           */
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            return baseSlice(array, 0, n < 0 ? 0 : n)
          }

          /**
           * Creates a slice of `array` with `n` elements taken from the end.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {number} [n=1] The number of elements to take.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * _.takeRight([1, 2, 3]);
           * // => [3]
           *
           * _.takeRight([1, 2, 3], 2);
           * // => [2, 3]
           *
           * _.takeRight([1, 2, 3], 5);
           * // => [1, 2, 3]
           *
           * _.takeRight([1, 2, 3], 0);
           * // => []
           */
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length
            if (!length) {
              return []
            }
            n = guard || n === undefined ? 1 : toInteger(n)
            n = length - n
            return baseSlice(array, n < 0 ? 0 : n, length)
          }

          /**
           * Creates a slice of `array` with elements taken from the end. Elements are
           * taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': true },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': false }
           * ];
           *
           * _.takeRightWhile(users, function(o) { return !o.active; });
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
           * // => objects for ['pebbles']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeRightWhile(users, ['active', false]);
           * // => objects for ['fred', 'pebbles']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeRightWhile(users, 'active');
           * // => []
           */
          function takeRightWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3), false, true)
              : []
          }

          /**
           * Creates a slice of `array` with elements taken from the beginning. Elements
           * are taken until `predicate` returns falsey. The predicate is invoked with
           * three arguments: (value, index, array).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Array
           * @param {Array} array The array to query.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the slice of `array`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'active': false },
           *   { 'user': 'fred',    'active': false },
           *   { 'user': 'pebbles', 'active': true }
           * ];
           *
           * _.takeWhile(users, function(o) { return !o.active; });
           * // => objects for ['barney', 'fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.takeWhile(users, { 'user': 'barney', 'active': false });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.takeWhile(users, ['active', false]);
           * // => objects for ['barney', 'fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.takeWhile(users, 'active');
           * // => []
           */
          function takeWhile(array, predicate) {
            return array && array.length
              ? baseWhile(array, getIteratee(predicate, 3))
              : []
          }

          /**
           * Creates an array of unique values, in order, from all given arrays using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.union([2], [1, 2]);
           * // => [2, 1]
           */
          var union = baseRest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true))
          })

          /**
           * This method is like `_.union` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which uniqueness is computed. Result values are chosen from the first
           * array in which the value occurs. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * _.unionBy([2.1], [1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */
          var unionBy = baseRest(function (arrays) {
            var iteratee = last(arrays)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return baseUniq(
              baseFlatten(arrays, 1, isArrayLikeObject, true),
              getIteratee(iteratee, 2)
            )
          })

          /**
           * This method is like `_.union` except that it accepts `comparator` which
           * is invoked to compare elements of `arrays`. Result values are chosen from
           * the first array in which the value occurs. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of combined values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.unionWith(objects, others, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */
          var unionWith = baseRest(function (arrays) {
            var comparator = last(arrays)
            comparator =
              typeof comparator == 'function' ? comparator : undefined
            return baseUniq(
              baseFlatten(arrays, 1, isArrayLikeObject, true),
              undefined,
              comparator
            )
          })

          /**
           * Creates a duplicate-free version of an array, using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons, in which only the first occurrence of each element
           * is kept. The order of result values is determined by the order they occur
           * in the array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniq([2, 1, 2]);
           * // => [2, 1]
           */
          function uniq(array) {
            return array && array.length ? baseUniq(array) : []
          }

          /**
           * This method is like `_.uniq` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * uniqueness is computed. The order of result values is determined by the
           * order they occur in the array. The iteratee is invoked with one argument:
           * (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
           * // => [2.1, 1.2]
           *
           * // The `_.property` iteratee shorthand.
           * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 1 }, { 'x': 2 }]
           */
          function uniqBy(array, iteratee) {
            return array && array.length
              ? baseUniq(array, getIteratee(iteratee, 2))
              : []
          }

          /**
           * This method is like `_.uniq` except that it accepts `comparator` which
           * is invoked to compare elements of `array`. The order of result values is
           * determined by the order they occur in the array.The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new duplicate free array.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.uniqWith(objects, _.isEqual);
           * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
           */
          function uniqWith(array, comparator) {
            comparator =
              typeof comparator == 'function' ? comparator : undefined
            return array && array.length
              ? baseUniq(array, undefined, comparator)
              : []
          }

          /**
           * This method is like `_.zip` except that it accepts an array of grouped
           * elements and creates an array regrouping the elements to their pre-zip
           * configuration.
           *
           * @static
           * @memberOf _
           * @since 1.2.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           *
           * _.unzip(zipped);
           * // => [['a', 'b'], [1, 2], [true, false]]
           */
          function unzip(array) {
            if (!(array && array.length)) {
              return []
            }
            var length = 0
            array = arrayFilter(array, function (group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length)
                return true
              }
            })
            return baseTimes(length, function (index) {
              return arrayMap(array, baseProperty(index))
            })
          }

          /**
           * This method is like `_.unzip` except that it accepts `iteratee` to specify
           * how regrouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {Array} array The array of grouped elements to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  regrouped values.
           * @returns {Array} Returns the new array of regrouped elements.
           * @example
           *
           * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
           * // => [[1, 10, 100], [2, 20, 200]]
           *
           * _.unzipWith(zipped, _.add);
           * // => [3, 30, 300]
           */
          function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
              return []
            }
            var result = unzip(array)
            if (iteratee == null) {
              return result
            }
            return arrayMap(result, function (group) {
              return apply(iteratee, undefined, group)
            })
          }

          /**
           * Creates an array excluding all given values using
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * for equality comparisons.
           *
           * **Note:** Unlike `_.pull`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {Array} array The array to inspect.
           * @param {...*} [values] The values to exclude.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.xor
           * @example
           *
           * _.without([2, 1, 2, 3], 1, 2);
           * // => [3]
           */
          var without = baseRest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : []
          })

          /**
           * Creates an array of unique values that is the
           * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
           * of the given arrays. The order of result values is determined by the order
           * they occur in the arrays.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @returns {Array} Returns the new array of filtered values.
           * @see _.difference, _.without
           * @example
           *
           * _.xor([2, 1], [2, 3]);
           * // => [1, 3]
           */
          var xor = baseRest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject))
          })

          /**
           * This method is like `_.xor` except that it accepts `iteratee` which is
           * invoked for each element of each `arrays` to generate the criterion by
           * which by which they're compared. The order of result values is determined
           * by the order they occur in the arrays. The iteratee is invoked with one
           * argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
           * // => [1.2, 3.4]
           *
           * // The `_.property` iteratee shorthand.
           * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
           * // => [{ 'x': 2 }]
           */
          var xorBy = baseRest(function (arrays) {
            var iteratee = last(arrays)
            if (isArrayLikeObject(iteratee)) {
              iteratee = undefined
            }
            return baseXor(
              arrayFilter(arrays, isArrayLikeObject),
              getIteratee(iteratee, 2)
            )
          })

          /**
           * This method is like `_.xor` except that it accepts `comparator` which is
           * invoked to compare elements of `arrays`. The order of result values is
           * determined by the order they occur in the arrays. The comparator is invoked
           * with two arguments: (arrVal, othVal).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Array
           * @param {...Array} [arrays] The arrays to inspect.
           * @param {Function} [comparator] The comparator invoked per element.
           * @returns {Array} Returns the new array of filtered values.
           * @example
           *
           * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
           * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
           *
           * _.xorWith(objects, others, _.isEqual);
           * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
           */
          var xorWith = baseRest(function (arrays) {
            var comparator = last(arrays)
            comparator =
              typeof comparator == 'function' ? comparator : undefined
            return baseXor(
              arrayFilter(arrays, isArrayLikeObject),
              undefined,
              comparator
            )
          })

          /**
           * Creates an array of grouped elements, the first of which contains the
           * first elements of the given arrays, the second of which contains the
           * second elements of the given arrays, and so on.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zip(['a', 'b'], [1, 2], [true, false]);
           * // => [['a', 1, true], ['b', 2, false]]
           */
          var zip = baseRest(unzip)

          /**
           * This method is like `_.fromPairs` except that it accepts two arrays,
           * one of property identifiers and one of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 0.4.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObject(['a', 'b'], [1, 2]);
           * // => { 'a': 1, 'b': 2 }
           */
          function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue)
          }

          /**
           * This method is like `_.zipObject` except that it supports property paths.
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Array
           * @param {Array} [props=[]] The property identifiers.
           * @param {Array} [values=[]] The property values.
           * @returns {Object} Returns the new object.
           * @example
           *
           * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
           * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
           */
          function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet)
          }

          /**
           * This method is like `_.zip` except that it accepts `iteratee` to specify
           * how grouped values should be combined. The iteratee is invoked with the
           * elements of each group: (...group).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Array
           * @param {...Array} [arrays] The arrays to process.
           * @param {Function} [iteratee=_.identity] The function to combine
           *  grouped values.
           * @returns {Array} Returns the new array of grouped elements.
           * @example
           *
           * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
           *   return a + b + c;
           * });
           * // => [111, 222]
           */
          var zipWith = baseRest(function (arrays) {
            var length = arrays.length,
              iteratee = length > 1 ? arrays[length - 1] : undefined

            iteratee =
              typeof iteratee == 'function'
                ? (arrays.pop(), iteratee)
                : undefined
            return unzipWith(arrays, iteratee)
          })

          /*------------------------------------------------------------------------*/

          /**
           * Creates a `lodash` wrapper instance that wraps `value` with explicit method
           * chain sequences enabled. The result of such sequences must be unwrapped
           * with `_#value`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Seq
           * @param {*} value The value to wrap.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36 },
           *   { 'user': 'fred',    'age': 40 },
           *   { 'user': 'pebbles', 'age': 1 }
           * ];
           *
           * var youngest = _
           *   .chain(users)
           *   .sortBy('age')
           *   .map(function(o) {
           *     return o.user + ' is ' + o.age;
           *   })
           *   .head()
           *   .value();
           * // => 'pebbles is 1'
           */
          function chain(value) {
            var result = lodash(value)
            result.__chain__ = true
            return result
          }

          /**
           * This method invokes `interceptor` and returns `value`. The interceptor
           * is invoked with one argument; (value). The purpose of this method is to
           * "tap into" a method chain sequence in order to modify intermediate results.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns `value`.
           * @example
           *
           * _([1, 2, 3])
           *  .tap(function(array) {
           *    // Mutate input array.
           *    array.pop();
           *  })
           *  .reverse()
           *  .value();
           * // => [2, 1]
           */
          function tap(value, interceptor) {
            interceptor(value)
            return value
          }

          /**
           * This method is like `_.tap` except that it returns the result of `interceptor`.
           * The purpose of this method is to "pass thru" values replacing intermediate
           * results in a method chain sequence.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Seq
           * @param {*} value The value to provide to `interceptor`.
           * @param {Function} interceptor The function to invoke.
           * @returns {*} Returns the result of `interceptor`.
           * @example
           *
           * _('  abc  ')
           *  .chain()
           *  .trim()
           *  .thru(function(value) {
           *    return [value];
           *  })
           *  .value();
           * // => ['abc']
           */
          function thru(value, interceptor) {
            return interceptor(value)
          }

          /**
           * This method is the wrapper version of `_.at`.
           *
           * @name at
           * @memberOf _
           * @since 1.0.0
           * @category Seq
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _(object).at(['a[0].b.c', 'a[1]']).value();
           * // => [3, 4]
           */
          var wrapperAt = flatRest(function (paths) {
            var length = paths.length,
              start = length ? paths[0] : 0,
              value = this.__wrapped__,
              interceptor = function (object) {
                return baseAt(object, paths)
              }

            if (
              length > 1 ||
              this.__actions__.length ||
              !(value instanceof LazyWrapper) ||
              !isIndex(start)
            ) {
              return this.thru(interceptor)
            }
            value = value.slice(start, +start + (length ? 1 : 0))
            value.__actions__.push({
              func: thru,
              args: [interceptor],
              thisArg: undefined,
            })
            return new LodashWrapper(value, this.__chain__).thru(function (
              array
            ) {
              if (length && !array.length) {
                array.push(undefined)
              }
              return array
            })
          })

          /**
           * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
           *
           * @name chain
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 40 }
           * ];
           *
           * // A sequence without explicit chaining.
           * _(users).head();
           * // => { 'user': 'barney', 'age': 36 }
           *
           * // A sequence with explicit chaining.
           * _(users)
           *   .chain()
           *   .head()
           *   .pick('user')
           *   .value();
           * // => { 'user': 'barney' }
           */
          function wrapperChain() {
            return chain(this)
          }

          /**
           * Executes the chain sequence and returns the wrapped result.
           *
           * @name commit
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2];
           * var wrapped = _(array).push(3);
           *
           * console.log(array);
           * // => [1, 2]
           *
           * wrapped = wrapped.commit();
           * console.log(array);
           * // => [1, 2, 3]
           *
           * wrapped.last();
           * // => 3
           *
           * console.log(array);
           * // => [1, 2, 3]
           */
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__)
          }

          /**
           * Gets the next value on a wrapped object following the
           * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
           *
           * @name next
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the next iterator value.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 1 }
           *
           * wrapped.next();
           * // => { 'done': false, 'value': 2 }
           *
           * wrapped.next();
           * // => { 'done': true, 'value': undefined }
           */
          function wrapperNext() {
            if (this.__values__ === undefined) {
              this.__values__ = toArray(this.value())
            }
            var done = this.__index__ >= this.__values__.length,
              value = done ? undefined : this.__values__[this.__index__++]

            return { done: done, value: value }
          }

          /**
           * Enables the wrapper to be iterable.
           *
           * @name Symbol.iterator
           * @memberOf _
           * @since 4.0.0
           * @category Seq
           * @returns {Object} Returns the wrapper object.
           * @example
           *
           * var wrapped = _([1, 2]);
           *
           * wrapped[Symbol.iterator]() === wrapped;
           * // => true
           *
           * Array.from(wrapped);
           * // => [1, 2]
           */
          function wrapperToIterator() {
            return this
          }

          /**
           * Creates a clone of the chain sequence planting `value` as the wrapped value.
           *
           * @name plant
           * @memberOf _
           * @since 3.2.0
           * @category Seq
           * @param {*} value The value to plant.
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var wrapped = _([1, 2]).map(square);
           * var other = wrapped.plant([3, 4]);
           *
           * other.value();
           * // => [9, 16]
           *
           * wrapped.value();
           * // => [1, 4]
           */
          function wrapperPlant(value) {
            var result,
              parent = this

            while (parent instanceof baseLodash) {
              var clone = wrapperClone(parent)
              clone.__index__ = 0
              clone.__values__ = undefined
              if (result) {
                previous.__wrapped__ = clone
              } else {
                result = clone
              }
              var previous = clone
              parent = parent.__wrapped__
            }
            previous.__wrapped__ = value
            return result
          }

          /**
           * This method is the wrapper version of `_.reverse`.
           *
           * **Note:** This method mutates the wrapped array.
           *
           * @name reverse
           * @memberOf _
           * @since 0.1.0
           * @category Seq
           * @returns {Object} Returns the new `lodash` wrapper instance.
           * @example
           *
           * var array = [1, 2, 3];
           *
           * _(array).reverse().value()
           * // => [3, 2, 1]
           *
           * console.log(array);
           * // => [3, 2, 1]
           */
          function wrapperReverse() {
            var value = this.__wrapped__
            if (value instanceof LazyWrapper) {
              var wrapped = value
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this)
              }
              wrapped = wrapped.reverse()
              wrapped.__actions__.push({
                func: thru,
                args: [reverse],
                thisArg: undefined,
              })
              return new LodashWrapper(wrapped, this.__chain__)
            }
            return this.thru(reverse)
          }

          /**
           * Executes the chain sequence to resolve the unwrapped value.
           *
           * @name value
           * @memberOf _
           * @since 0.1.0
           * @alias toJSON, valueOf
           * @category Seq
           * @returns {*} Returns the resolved unwrapped value.
           * @example
           *
           * _([1, 2, 3]).value();
           * // => [1, 2, 3]
           */
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the number of times the key was returned by `iteratee`. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.countBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': 1, '6': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.countBy(['one', 'two', 'three'], 'length');
           * // => { '3': 2, '5': 1 }
           */
          var countBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              ++result[key]
            } else {
              baseAssignValue(result, key, 1)
            }
          })

          /**
           * Checks if `predicate` returns truthy for **all** elements of `collection`.
           * Iteration is stopped once `predicate` returns falsey. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * **Note:** This method returns `true` for
           * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
           * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
           * elements of empty collections.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if all elements pass the predicate check,
           *  else `false`.
           * @example
           *
           * _.every([true, 1, null, 'yes'], Boolean);
           * // => false
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.every(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.every(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.every(users, 'active');
           * // => false
           */
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined
            }
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Iterates over elements of `collection`, returning an array of all elements
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * **Note:** Unlike `_.remove`, this method returns a new array.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.reject
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * _.filter(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, { 'age': 36, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.filter(users, 'active');
           * // => objects for ['barney']
           *
           * // Combining several predicates using `_.overEvery` or `_.overSome`.
           * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
           * // => objects for ['fred', 'barney']
           */
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Iterates over elements of `collection`, returning the first element
           * `predicate` returns truthy for. The predicate is invoked with three
           * arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=0] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': true },
           *   { 'user': 'fred',    'age': 40, 'active': false },
           *   { 'user': 'pebbles', 'age': 1,  'active': true }
           * ];
           *
           * _.find(users, function(o) { return o.age < 40; });
           * // => object for 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.find(users, { 'age': 1, 'active': true });
           * // => object for 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.find(users, ['active', false]);
           * // => object for 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.find(users, 'active');
           * // => object for 'barney'
           */
          var find = createFind(findIndex)

          /**
           * This method is like `_.find` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param {number} [fromIndex=collection.length-1] The index to search from.
           * @returns {*} Returns the matched element, else `undefined`.
           * @example
           *
           * _.findLast([1, 2, 3, 4], function(n) {
           *   return n % 2 == 1;
           * });
           * // => 3
           */
          var findLast = createFind(findLastIndex)

          /**
           * Creates a flattened array of values by running each element in `collection`
           * thru `iteratee` and flattening the mapped results. The iteratee is invoked
           * with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [n, n];
           * }
           *
           * _.flatMap([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */
          function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1)
          }

          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDeep([1, 2], duplicate);
           * // => [1, 1, 2, 2]
           */
          function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY)
          }

          /**
           * This method is like `_.flatMap` except that it recursively flattens the
           * mapped results up to `depth` times.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {number} [depth=1] The maximum recursion depth.
           * @returns {Array} Returns the new flattened array.
           * @example
           *
           * function duplicate(n) {
           *   return [[[n, n]]];
           * }
           *
           * _.flatMapDepth([1, 2], duplicate, 2);
           * // => [[1, 1], [2, 2]]
           */
          function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth)
            return baseFlatten(map(collection, iteratee), depth)
          }

          /**
           * Iterates over elements of `collection` and invokes `iteratee` for each element.
           * The iteratee is invoked with three arguments: (value, index|key, collection).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * **Note:** As with other "Collections" methods, objects with a "length"
           * property are iterated like arrays. To avoid this behavior use `_.forIn`
           * or `_.forOwn` for object iteration.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @alias each
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEachRight
           * @example
           *
           * _.forEach([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `1` then `2`.
           *
           * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */
          function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.forEach` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @alias eachRight
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array|Object} Returns `collection`.
           * @see _.forEach
           * @example
           *
           * _.forEachRight([1, 2], function(value) {
           *   console.log(value);
           * });
           * // => Logs `2` then `1`.
           */
          function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The order of grouped values
           * is determined by the order they occur in `collection`. The corresponding
           * value of each key is an array of elements responsible for generating the
           * key. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * _.groupBy([6.1, 4.2, 6.3], Math.floor);
           * // => { '4': [4.2], '6': [6.1, 6.3] }
           *
           * // The `_.property` iteratee shorthand.
           * _.groupBy(['one', 'two', 'three'], 'length');
           * // => { '3': ['one', 'two'], '5': ['three'] }
           */
          var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
              result[key].push(value)
            } else {
              baseAssignValue(result, key, [value])
            }
          })

          /**
           * Checks if `value` is in `collection`. If `collection` is a string, it's
           * checked for a substring of `value`, otherwise
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * is used for equality comparisons. If `fromIndex` is negative, it's used as
           * the offset from the end of `collection`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @param {*} value The value to search for.
           * @param {number} [fromIndex=0] The index to search from.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {boolean} Returns `true` if `value` is found, else `false`.
           * @example
           *
           * _.includes([1, 2, 3], 1);
           * // => true
           *
           * _.includes([1, 2, 3], 1, 2);
           * // => false
           *
           * _.includes({ 'a': 1, 'b': 2 }, 1);
           * // => true
           *
           * _.includes('abcd', 'bc');
           * // => true
           */
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection)
              ? collection
              : values(collection)
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0

            var length = collection.length
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0)
            }
            return isString(collection)
              ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1
              : !!length && baseIndexOf(collection, value, fromIndex) > -1
          }

          /**
           * Invokes the method at `path` of each element in `collection`, returning
           * an array of the results of each invoked method. Any additional arguments
           * are provided to each invoked method. If `path` is a function, it's invoked
           * for, and `this` bound to, each element in `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array|Function|string} path The path of the method to invoke or
           *  the function invoked per iteration.
           * @param {...*} [args] The arguments to invoke each method with.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
           * // => [[1, 5, 7], [1, 2, 3]]
           *
           * _.invokeMap([123, 456], String.prototype.split, '');
           * // => [['1', '2', '3'], ['4', '5', '6']]
           */
          var invokeMap = baseRest(function (collection, path, args) {
            var index = -1,
              isFunc = typeof path == 'function',
              result = isArrayLike(collection) ? Array(collection.length) : []

            baseEach(collection, function (value) {
              result[++index] = isFunc
                ? apply(path, value, args)
                : baseInvoke(value, path, args)
            })
            return result
          })

          /**
           * Creates an object composed of keys generated from the results of running
           * each element of `collection` thru `iteratee`. The corresponding value of
           * each key is the last element responsible for generating the key. The
           * iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
           * @returns {Object} Returns the composed aggregate object.
           * @example
           *
           * var array = [
           *   { 'dir': 'left', 'code': 97 },
           *   { 'dir': 'right', 'code': 100 }
           * ];
           *
           * _.keyBy(array, function(o) {
           *   return String.fromCharCode(o.code);
           * });
           * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
           *
           * _.keyBy(array, 'dir');
           * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
           */
          var keyBy = createAggregator(function (result, value, key) {
            baseAssignValue(result, key, value)
          })

          /**
           * Creates an array of values by running each element in `collection` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
           *
           * The guarded methods are:
           * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
           * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
           * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
           * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new mapped array.
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * _.map([4, 8], square);
           * // => [16, 64]
           *
           * _.map({ 'a': 4, 'b': 8 }, square);
           * // => [16, 64] (iteration order is not guaranteed)
           *
           * var users = [
           *   { 'user': 'barney' },
           *   { 'user': 'fred' }
           * ];
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, 'user');
           * // => ['barney', 'fred']
           */
          function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap
            return func(collection, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.sortBy` except that it allows specifying the sort
           * orders of the iteratees to sort by. If `orders` is unspecified, all values
           * are sorted in ascending order. Otherwise, specify an order of "desc" for
           * descending or "asc" for ascending sort order of corresponding values.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @param {string[]} [orders] The sort orders of `iteratees`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 34 },
           *   { 'user': 'fred',   'age': 40 },
           *   { 'user': 'barney', 'age': 36 }
           * ];
           *
           * // Sort by `user` in ascending order and by `age` in descending order.
           * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
           */
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return []
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees]
            }
            orders = guard ? undefined : orders
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders]
            }
            return baseOrderBy(collection, iteratees, orders)
          }

          /**
           * Creates an array of elements split into two groups, the first of which
           * contains elements `predicate` returns truthy for, the second of which
           * contains elements `predicate` returns falsey for. The predicate is
           * invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of grouped elements.
           * @example
           *
           * var users = [
           *   { 'user': 'barney',  'age': 36, 'active': false },
           *   { 'user': 'fred',    'age': 40, 'active': true },
           *   { 'user': 'pebbles', 'age': 1,  'active': false }
           * ];
           *
           * _.partition(users, function(o) { return o.active; });
           * // => objects for [['fred'], ['barney', 'pebbles']]
           *
           * // The `_.matches` iteratee shorthand.
           * _.partition(users, { 'age': 1, 'active': false });
           * // => objects for [['pebbles'], ['barney', 'fred']]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.partition(users, ['active', false]);
           * // => objects for [['barney', 'pebbles'], ['fred']]
           *
           * // The `_.property` iteratee shorthand.
           * _.partition(users, 'active');
           * // => objects for [['fred'], ['barney', 'pebbles']]
           */
          var partition = createAggregator(
            function (result, value, key) {
              result[key ? 0 : 1].push(value)
            },
            function () {
              return [[], []]
            }
          )

          /**
           * Reduces `collection` to a value which is the accumulated result of running
           * each element in `collection` thru `iteratee`, where each successive
           * invocation is supplied the return value of the previous. If `accumulator`
           * is not given, the first element of `collection` is used as the initial
           * value. The iteratee is invoked with four arguments:
           * (accumulator, value, index|key, collection).
           *
           * Many lodash methods are guarded to work as iteratees for methods like
           * `_.reduce`, `_.reduceRight`, and `_.transform`.
           *
           * The guarded methods are:
           * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
           * and `sortBy`
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduceRight
           * @example
           *
           * _.reduce([1, 2], function(sum, n) {
           *   return sum + n;
           * }, 0);
           * // => 3
           *
           * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           *   return result;
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
           */
          function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce,
              initAccum = arguments.length < 3

            return func(
              collection,
              getIteratee(iteratee, 4),
              accumulator,
              initAccum,
              baseEach
            )
          }

          /**
           * This method is like `_.reduce` except that it iterates over elements of
           * `collection` from right to left.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The initial value.
           * @returns {*} Returns the accumulated value.
           * @see _.reduce
           * @example
           *
           * var array = [[0, 1], [2, 3], [4, 5]];
           *
           * _.reduceRight(array, function(flattened, other) {
           *   return flattened.concat(other);
           * }, []);
           * // => [4, 5, 2, 3, 0, 1]
           */
          function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce,
              initAccum = arguments.length < 3

            return func(
              collection,
              getIteratee(iteratee, 4),
              accumulator,
              initAccum,
              baseEachRight
            )
          }

          /**
           * The opposite of `_.filter`; this method returns the elements of `collection`
           * that `predicate` does **not** return truthy for.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the new filtered array.
           * @see _.filter
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': false },
           *   { 'user': 'fred',   'age': 40, 'active': true }
           * ];
           *
           * _.reject(users, function(o) { return !o.active; });
           * // => objects for ['fred']
           *
           * // The `_.matches` iteratee shorthand.
           * _.reject(users, { 'age': 40, 'active': true });
           * // => objects for ['barney']
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.reject(users, ['active', false]);
           * // => objects for ['fred']
           *
           * // The `_.property` iteratee shorthand.
           * _.reject(users, 'active');
           * // => objects for ['barney']
           */
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter
            return func(collection, negate(getIteratee(predicate, 3)))
          }

          /**
           * Gets a random element from `collection`.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @returns {*} Returns the random element.
           * @example
           *
           * _.sample([1, 2, 3, 4]);
           * // => 2
           */
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample
            return func(collection)
          }

          /**
           * Gets `n` random elements at unique keys from `collection` up to the
           * size of `collection`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Collection
           * @param {Array|Object} collection The collection to sample.
           * @param {number} [n=1] The number of elements to sample.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the random elements.
           * @example
           *
           * _.sampleSize([1, 2, 3], 2);
           * // => [3, 1]
           *
           * _.sampleSize([1, 2, 3], 4);
           * // => [2, 3, 1]
           */
          function sampleSize(collection, n, guard) {
            if (
              guard ? isIterateeCall(collection, n, guard) : n === undefined
            ) {
              n = 1
            } else {
              n = toInteger(n)
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize
            return func(collection, n)
          }

          /**
           * Creates an array of shuffled values, using a version of the
           * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to shuffle.
           * @returns {Array} Returns the new shuffled array.
           * @example
           *
           * _.shuffle([1, 2, 3, 4]);
           * // => [4, 1, 3, 2]
           */
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle
            return func(collection)
          }

          /**
           * Gets the size of `collection` by returning its length for array-like
           * values or the number of own enumerable string keyed properties for objects.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object|string} collection The collection to inspect.
           * @returns {number} Returns the collection size.
           * @example
           *
           * _.size([1, 2, 3]);
           * // => 3
           *
           * _.size({ 'a': 1, 'b': 2 });
           * // => 2
           *
           * _.size('pebbles');
           * // => 7
           */
          function size(collection) {
            if (collection == null) {
              return 0
            }
            if (isArrayLike(collection)) {
              return isString(collection)
                ? stringSize(collection)
                : collection.length
            }
            var tag = getTag(collection)
            if (tag == mapTag || tag == setTag) {
              return collection.size
            }
            return baseKeys(collection).length
          }

          /**
           * Checks if `predicate` returns truthy for **any** element of `collection`.
           * Iteration is stopped once `predicate` returns truthy. The predicate is
           * invoked with three arguments: (value, index|key, collection).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {boolean} Returns `true` if any element passes the predicate check,
           *  else `false`.
           * @example
           *
           * _.some([null, 0, 'yes', false], Boolean);
           * // => true
           *
           * var users = [
           *   { 'user': 'barney', 'active': true },
           *   { 'user': 'fred',   'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.some(users, { 'user': 'barney', 'active': false });
           * // => false
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.some(users, ['active', false]);
           * // => true
           *
           * // The `_.property` iteratee shorthand.
           * _.some(users, 'active');
           * // => true
           */
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined
            }
            return func(collection, getIteratee(predicate, 3))
          }

          /**
           * Creates an array of elements, sorted in ascending order by the results of
           * running each element in a collection thru each iteratee. This method
           * performs a stable sort, that is, it preserves the original sort order of
           * equal elements. The iteratees are invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Collection
           * @param {Array|Object} collection The collection to iterate over.
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to sort by.
           * @returns {Array} Returns the new sorted array.
           * @example
           *
           * var users = [
           *   { 'user': 'fred',   'age': 48 },
           *   { 'user': 'barney', 'age': 36 },
           *   { 'user': 'fred',   'age': 30 },
           *   { 'user': 'barney', 'age': 34 }
           * ];
           *
           * _.sortBy(users, [function(o) { return o.user; }]);
           * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
           *
           * _.sortBy(users, ['user', 'age']);
           * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
           */
          var sortBy = baseRest(function (collection, iteratees) {
            if (collection == null) {
              return []
            }
            var length = iteratees.length
            if (
              length > 1 &&
              isIterateeCall(collection, iteratees[0], iteratees[1])
            ) {
              iteratees = []
            } else if (
              length > 2 &&
              isIterateeCall(iteratees[0], iteratees[1], iteratees[2])
            ) {
              iteratees = [iteratees[0]]
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), [])
          })

          /*------------------------------------------------------------------------*/

          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */
          var now =
            ctxNow ||
            function () {
              return root.Date.now()
            }

          /*------------------------------------------------------------------------*/

          /**
           * The opposite of `_.before`; this method creates a function that invokes
           * `func` once it's called `n` or more times.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {number} n The number of calls before `func` is invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var saves = ['profile', 'settings'];
           *
           * var done = _.after(saves.length, function() {
           *   console.log('done saving!');
           * });
           *
           * _.forEach(saves, function(type) {
           *   asyncSave({ 'type': type, 'complete': done });
           * });
           * // => Logs 'done saving!' after the two async saves have completed.
           */
          function after(n, func) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            n = toInteger(n)
            return function () {
              if (--n < 1) {
                return func.apply(this, arguments)
              }
            }
          }

          /**
           * Creates a function that invokes `func`, with up to `n` arguments,
           * ignoring any additional arguments.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @param {number} [n=func.length] The arity cap.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.ary(parseInt, 1));
           * // => [6, 8, 10]
           */
          function ary(func, n, guard) {
            n = guard ? undefined : n
            n = func && n == null ? func.length : n
            return createWrap(
              func,
              WRAP_ARY_FLAG,
              undefined,
              undefined,
              undefined,
              undefined,
              n
            )
          }

          /**
           * Creates a function that invokes `func`, with the `this` binding and arguments
           * of the created function, while it's called less than `n` times. Subsequent
           * calls to the created function return the result of the last `func` invocation.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {number} n The number of calls at which `func` is no longer invoked.
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * jQuery(element).on('click', _.before(5, addContactToList));
           * // => Allows adding up to 4 contacts to the list.
           */
          function before(n, func) {
            var result
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            n = toInteger(n)
            return function () {
              if (--n > 0) {
                result = func.apply(this, arguments)
              }
              if (n <= 1) {
                func = undefined
              }
              return result
            }
          }

          /**
           * Creates a function that invokes `func` with the `this` binding of `thisArg`
           * and `partials` prepended to the arguments it receives.
           *
           * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for partially applied arguments.
           *
           * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
           * property of bound functions.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to bind.
           * @param {*} thisArg The `this` binding of `func`.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * function greet(greeting, punctuation) {
           *   return greeting + ' ' + this.user + punctuation;
           * }
           *
           * var object = { 'user': 'fred' };
           *
           * var bound = _.bind(greet, object, 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bind(greet, object, _, '!');
           * bound('hi');
           * // => 'hi fred!'
           */
          var bind = baseRest(function (func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind))
              bitmask |= WRAP_PARTIAL_FLAG
            }
            return createWrap(func, bitmask, thisArg, partials, holders)
          })

          /**
           * Creates a function that invokes the method at `object[key]` with `partials`
           * prepended to the arguments it receives.
           *
           * This method differs from `_.bind` by allowing bound functions to reference
           * methods that may be redefined or don't yet exist. See
           * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
           * for more details.
           *
           * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Function
           * @param {Object} object The object to invoke the method on.
           * @param {string} key The key of the method.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new bound function.
           * @example
           *
           * var object = {
           *   'user': 'fred',
           *   'greet': function(greeting, punctuation) {
           *     return greeting + ' ' + this.user + punctuation;
           *   }
           * };
           *
           * var bound = _.bindKey(object, 'greet', 'hi');
           * bound('!');
           * // => 'hi fred!'
           *
           * object.greet = function(greeting, punctuation) {
           *   return greeting + 'ya ' + this.user + punctuation;
           * };
           *
           * bound('!');
           * // => 'hiya fred!'
           *
           * // Bound with placeholders.
           * var bound = _.bindKey(object, 'greet', _, '!');
           * bound('hi');
           * // => 'hiya fred!'
           */
          var bindKey = baseRest(function (object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey))
              bitmask |= WRAP_PARTIAL_FLAG
            }
            return createWrap(key, bitmask, object, partials, holders)
          })

          /**
           * Creates a function that accepts arguments of `func` and either invokes
           * `func` returning its result, if at least `arity` number of arguments have
           * been provided, or returns a function that accepts the remaining `func`
           * arguments, and so on. The arity of `func` may be specified if `func.length`
           * is not sufficient.
           *
           * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
           * may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curry(abc);
           *
           * curried(1)(2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2)(3);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(1)(_, 3)(2);
           * // => [1, 2, 3]
           */
          function curry(func, arity, guard) {
            arity = guard ? undefined : arity
            var result = createWrap(
              func,
              WRAP_CURRY_FLAG,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              arity
            )
            result.placeholder = curry.placeholder
            return result
          }

          /**
           * This method is like `_.curry` except that arguments are applied to `func`
           * in the manner of `_.partialRight` instead of `_.partial`.
           *
           * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for provided arguments.
           *
           * **Note:** This method doesn't set the "length" property of curried functions.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to curry.
           * @param {number} [arity=func.length] The arity of `func`.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the new curried function.
           * @example
           *
           * var abc = function(a, b, c) {
           *   return [a, b, c];
           * };
           *
           * var curried = _.curryRight(abc);
           *
           * curried(3)(2)(1);
           * // => [1, 2, 3]
           *
           * curried(2, 3)(1);
           * // => [1, 2, 3]
           *
           * curried(1, 2, 3);
           * // => [1, 2, 3]
           *
           * // Curried with placeholders.
           * curried(3)(1, _)(2);
           * // => [1, 2, 3]
           */
          function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity
            var result = createWrap(
              func,
              WRAP_CURRY_RIGHT_FLAG,
              undefined,
              undefined,
              undefined,
              undefined,
              undefined,
              arity
            )
            result.placeholder = curryRight.placeholder
            return result
          }

          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */
          function debounce(func, wait, options) {
            var lastArgs,
              lastThis,
              maxWait,
              result,
              timerId,
              lastCallTime,
              lastInvokeTime = 0,
              leading = false,
              maxing = false,
              trailing = true

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            wait = toNumber(wait) || 0
            if (isObject(options)) {
              leading = !!options.leading
              maxing = 'maxWait' in options
              maxWait = maxing
                ? nativeMax(toNumber(options.maxWait) || 0, wait)
                : maxWait
              trailing = 'trailing' in options ? !!options.trailing : trailing
            }

            function invokeFunc(time) {
              var args = lastArgs,
                thisArg = lastThis

              lastArgs = lastThis = undefined
              lastInvokeTime = time
              result = func.apply(thisArg, args)
              return result
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time
              // Start the timer for the trailing edge.
              timerId = setTimeout(timerExpired, wait)
              // Invoke the leading edge.
              return leading ? invokeFunc(time) : result
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime,
                timeWaiting = wait - timeSinceLastCall

              return maxing
                ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                : timeWaiting
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                timeSinceLastInvoke = time - lastInvokeTime

              // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.
              return (
                lastCallTime === undefined ||
                timeSinceLastCall >= wait ||
                timeSinceLastCall < 0 ||
                (maxing && timeSinceLastInvoke >= maxWait)
              )
            }

            function timerExpired() {
              var time = now()
              if (shouldInvoke(time)) {
                return trailingEdge(time)
              }
              // Restart the timer.
              timerId = setTimeout(timerExpired, remainingWait(time))
            }

            function trailingEdge(time) {
              timerId = undefined

              // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.
              if (trailing && lastArgs) {
                return invokeFunc(time)
              }
              lastArgs = lastThis = undefined
              return result
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId)
              }
              lastInvokeTime = 0
              lastArgs = lastCallTime = lastThis = timerId = undefined
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now())
            }

            function debounced() {
              var time = now(),
                isInvoking = shouldInvoke(time)

              lastArgs = arguments
              lastThis = this
              lastCallTime = time

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime)
                }
                if (maxing) {
                  // Handle invocations in a tight loop.
                  clearTimeout(timerId)
                  timerId = setTimeout(timerExpired, wait)
                  return invokeFunc(lastCallTime)
                }
              }
              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait)
              }
              return result
            }
            debounced.cancel = cancel
            debounced.flush = flush
            return debounced
          }

          /**
           * Defers invoking the `func` until the current call stack has cleared. Any
           * additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to defer.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.defer(function(text) {
           *   console.log(text);
           * }, 'deferred');
           * // => Logs 'deferred' after one millisecond.
           */
          var defer = baseRest(function (func, args) {
            return baseDelay(func, 1, args)
          })

          /**
           * Invokes `func` after `wait` milliseconds. Any additional arguments are
           * provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to delay.
           * @param {number} wait The number of milliseconds to delay invocation.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {number} Returns the timer id.
           * @example
           *
           * _.delay(function(text) {
           *   console.log(text);
           * }, 1000, 'later');
           * // => Logs 'later' after one second.
           */
          var delay = baseRest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args)
          })

          /**
           * Creates a function that invokes `func` with arguments reversed.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to flip arguments for.
           * @returns {Function} Returns the new flipped function.
           * @example
           *
           * var flipped = _.flip(function() {
           *   return _.toArray(arguments);
           * });
           *
           * flipped('a', 'b', 'c', 'd');
           * // => ['d', 'c', 'b', 'a']
           */
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG)
          }

          /**
           * Creates a function that memoizes the result of `func`. If `resolver` is
           * provided, it determines the cache key for storing the result based on the
           * arguments provided to the memoized function. By default, the first argument
           * provided to the memoized function is used as the map cache key. The `func`
           * is invoked with the `this` binding of the memoized function.
           *
           * **Note:** The cache is exposed as the `cache` property on the memoized
           * function. Its creation may be customized by replacing the `_.memoize.Cache`
           * constructor with one whose instances implement the
           * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
           * method interface of `clear`, `delete`, `get`, `has`, and `set`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to have its output memoized.
           * @param {Function} [resolver] The function to resolve the cache key.
           * @returns {Function} Returns the new memoized function.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           * var other = { 'c': 3, 'd': 4 };
           *
           * var values = _.memoize(_.values);
           * values(object);
           * // => [1, 2]
           *
           * values(other);
           * // => [3, 4]
           *
           * object.a = 2;
           * values(object);
           * // => [1, 2]
           *
           * // Modify the result cache.
           * values.cache.set(object, ['a', 'b']);
           * values(object);
           * // => ['a', 'b']
           *
           * // Replace `_.memoize.Cache`.
           * _.memoize.Cache = WeakMap;
           */
          function memoize(func, resolver) {
            if (
              typeof func != 'function' ||
              (resolver != null && typeof resolver != 'function')
            ) {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            var memoized = function () {
              var args = arguments,
                key = resolver ? resolver.apply(this, args) : args[0],
                cache = memoized.cache

              if (cache.has(key)) {
                return cache.get(key)
              }
              var result = func.apply(this, args)
              memoized.cache = cache.set(key, result) || cache
              return result
            }
            memoized.cache = new (memoize.Cache || MapCache)()
            return memoized
          }

          // Expose `MapCache`.
          memoize.Cache = MapCache

          /**
           * Creates a function that negates the result of the predicate `func`. The
           * `func` predicate is invoked with the `this` binding and arguments of the
           * created function.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} predicate The predicate to negate.
           * @returns {Function} Returns the new negated function.
           * @example
           *
           * function isEven(n) {
           *   return n % 2 == 0;
           * }
           *
           * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
           * // => [1, 3, 5]
           */
          function negate(predicate) {
            if (typeof predicate != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            return function () {
              var args = arguments
              switch (args.length) {
                case 0:
                  return !predicate.call(this)
                case 1:
                  return !predicate.call(this, args[0])
                case 2:
                  return !predicate.call(this, args[0], args[1])
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2])
              }
              return !predicate.apply(this, args)
            }
          }

          /**
           * Creates a function that is restricted to invoking `func` once. Repeat calls
           * to the function return the value of the first invocation. The `func` is
           * invoked with the `this` binding and arguments of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to restrict.
           * @returns {Function} Returns the new restricted function.
           * @example
           *
           * var initialize = _.once(createApplication);
           * initialize();
           * initialize();
           * // => `createApplication` is invoked once
           */
          function once(func) {
            return before(2, func)
          }

          /**
           * Creates a function that invokes `func` with its arguments transformed.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Function
           * @param {Function} func The function to wrap.
           * @param {...(Function|Function[])} [transforms=[_.identity]]
           *  The argument transforms.
           * @returns {Function} Returns the new function.
           * @example
           *
           * function doubled(n) {
           *   return n * 2;
           * }
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var func = _.overArgs(function(x, y) {
           *   return [x, y];
           * }, [square, doubled]);
           *
           * func(9, 3);
           * // => [81, 6]
           *
           * func(10, 5);
           * // => [100, 10]
           */
          var overArgs = castRest(function (func, transforms) {
            transforms =
              transforms.length == 1 && isArray(transforms[0])
                ? arrayMap(transforms[0], baseUnary(getIteratee()))
                : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()))

            var funcsLength = transforms.length
            return baseRest(function (args) {
              var index = -1,
                length = nativeMin(args.length, funcsLength)

              while (++index < length) {
                args[index] = transforms[index].call(this, args[index])
              }
              return apply(func, this, args)
            })
          })

          /**
           * Creates a function that invokes `func` with `partials` prepended to the
           * arguments it receives. This method is like `_.bind` except it does **not**
           * alter the `this` binding.
           *
           * The `_.partial.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 0.2.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var sayHelloTo = _.partial(greet, 'hello');
           * sayHelloTo('fred');
           * // => 'hello fred'
           *
           * // Partially applied with placeholders.
           * var greetFred = _.partial(greet, _, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           */
          var partial = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partial))
            return createWrap(
              func,
              WRAP_PARTIAL_FLAG,
              undefined,
              partials,
              holders
            )
          })

          /**
           * This method is like `_.partial` except that partially applied arguments
           * are appended to the arguments it receives.
           *
           * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
           * builds, may be used as a placeholder for partially applied arguments.
           *
           * **Note:** This method doesn't set the "length" property of partially
           * applied functions.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Function
           * @param {Function} func The function to partially apply arguments to.
           * @param {...*} [partials] The arguments to be partially applied.
           * @returns {Function} Returns the new partially applied function.
           * @example
           *
           * function greet(greeting, name) {
           *   return greeting + ' ' + name;
           * }
           *
           * var greetFred = _.partialRight(greet, 'fred');
           * greetFred('hi');
           * // => 'hi fred'
           *
           * // Partially applied with placeholders.
           * var sayHelloTo = _.partialRight(greet, 'hello', _);
           * sayHelloTo('fred');
           * // => 'hello fred'
           */
          var partialRight = baseRest(function (func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight))
            return createWrap(
              func,
              WRAP_PARTIAL_RIGHT_FLAG,
              undefined,
              partials,
              holders
            )
          })

          /**
           * Creates a function that invokes `func` with arguments arranged according
           * to the specified `indexes` where the argument value at the first index is
           * provided as the first argument, the argument value at the second index is
           * provided as the second argument, and so on.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Function
           * @param {Function} func The function to rearrange arguments for.
           * @param {...(number|number[])} indexes The arranged argument indexes.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var rearged = _.rearg(function(a, b, c) {
           *   return [a, b, c];
           * }, [2, 0, 1]);
           *
           * rearged('b', 'c', 'a')
           * // => ['a', 'b', 'c']
           */
          var rearg = flatRest(function (func, indexes) {
            return createWrap(
              func,
              WRAP_REARG_FLAG,
              undefined,
              undefined,
              undefined,
              indexes
            )
          })

          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * created function and arguments from `start` and beyond provided as
           * an array.
           *
           * **Note:** This method is based on the
           * [rest parameter](https://mdn.io/rest_parameters).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to apply a rest parameter to.
           * @param {number} [start=func.length-1] The start position of the rest parameter.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.rest(function(what, names) {
           *   return what + ' ' + _.initial(names).join(', ') +
           *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
           * });
           *
           * say('hello', 'fred', 'barney', 'pebbles');
           * // => 'hello fred, barney, & pebbles'
           */
          function rest(func, start) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            start = start === undefined ? start : toInteger(start)
            return baseRest(func, start)
          }

          /**
           * Creates a function that invokes `func` with the `this` binding of the
           * create function and an array of arguments much like
           * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
           *
           * **Note:** This method is based on the
           * [spread operator](https://mdn.io/spread_operator).
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Function
           * @param {Function} func The function to spread arguments over.
           * @param {number} [start=0] The start position of the spread.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var say = _.spread(function(who, what) {
           *   return who + ' says ' + what;
           * });
           *
           * say(['fred', 'hello']);
           * // => 'fred says hello'
           *
           * var numbers = Promise.all([
           *   Promise.resolve(40),
           *   Promise.resolve(36)
           * ]);
           *
           * numbers.then(_.spread(function(x, y) {
           *   return x + y;
           * }));
           * // => a Promise of 76
           */
          function spread(func, start) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0)
            return baseRest(function (args) {
              var array = args[start],
                otherArgs = castSlice(args, 0, start)

              if (array) {
                arrayPush(otherArgs, array)
              }
              return apply(func, this, otherArgs)
            })
          }

          /**
           * Creates a throttled function that only invokes `func` at most once per
           * every `wait` milliseconds. The throttled function comes with a `cancel`
           * method to cancel delayed `func` invocations and a `flush` method to
           * immediately invoke them. Provide `options` to indicate whether `func`
           * should be invoked on the leading and/or trailing edge of the `wait`
           * timeout. The `func` is invoked with the last arguments provided to the
           * throttled function. Subsequent calls to the throttled function return the
           * result of the last `func` invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the throttled function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.throttle` and `_.debounce`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to throttle.
           * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=true]
           *  Specify invoking on the leading edge of the timeout.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new throttled function.
           * @example
           *
           * // Avoid excessively updating the position while scrolling.
           * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
           *
           * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
           * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
           * jQuery(element).on('click', throttled);
           *
           * // Cancel the trailing throttled invocation.
           * jQuery(window).on('popstate', throttled.cancel);
           */
          function throttle(func, wait, options) {
            var leading = true,
              trailing = true

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT)
            }
            if (isObject(options)) {
              leading = 'leading' in options ? !!options.leading : leading
              trailing = 'trailing' in options ? !!options.trailing : trailing
            }
            return debounce(func, wait, {
              leading: leading,
              maxWait: wait,
              trailing: trailing,
            })
          }

          /**
           * Creates a function that accepts up to one argument, ignoring any
           * additional arguments.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Function
           * @param {Function} func The function to cap arguments for.
           * @returns {Function} Returns the new capped function.
           * @example
           *
           * _.map(['6', '8', '10'], _.unary(parseInt));
           * // => [6, 8, 10]
           */
          function unary(func) {
            return ary(func, 1)
          }

          /**
           * Creates a function that provides `value` to `wrapper` as its first
           * argument. Any additional arguments provided to the function are appended
           * to those provided to the `wrapper`. The wrapper is invoked with the `this`
           * binding of the created function.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {*} value The value to wrap.
           * @param {Function} [wrapper=identity] The wrapper function.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var p = _.wrap(_.escape, function(func, text) {
           *   return '<p>' + func(text) + '</p>';
           * });
           *
           * p('fred, barney, & pebbles');
           * // => '<p>fred, barney, &amp; pebbles</p>'
           */
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Casts `value` as an array if it's not one.
           *
           * @static
           * @memberOf _
           * @since 4.4.0
           * @category Lang
           * @param {*} value The value to inspect.
           * @returns {Array} Returns the cast array.
           * @example
           *
           * _.castArray(1);
           * // => [1]
           *
           * _.castArray({ 'a': 1 });
           * // => [{ 'a': 1 }]
           *
           * _.castArray('abc');
           * // => ['abc']
           *
           * _.castArray(null);
           * // => [null]
           *
           * _.castArray(undefined);
           * // => [undefined]
           *
           * _.castArray();
           * // => []
           *
           * var array = [1, 2, 3];
           * console.log(_.castArray(array) === array);
           * // => true
           */
          function castArray() {
            if (!arguments.length) {
              return []
            }
            var value = arguments[0]
            return isArray(value) ? value : [value]
          }

          /**
           * Creates a shallow clone of `value`.
           *
           * **Note:** This method is loosely based on the
           * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
           * and supports cloning arrays, array buffers, booleans, date objects, maps,
           * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
           * arrays. The own enumerable properties of `arguments` objects are cloned
           * as plain objects. An empty object is returned for uncloneable values such
           * as error objects, functions, DOM nodes, and WeakMaps.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to clone.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeep
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var shallow = _.clone(objects);
           * console.log(shallow[0] === objects[0]);
           * // => true
           */
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG)
          }

          /**
           * This method is like `_.clone` except that it accepts `customizer` which
           * is invoked to produce the cloned value. If `customizer` returns `undefined`,
           * cloning is handled by the method instead. The `customizer` is invoked with
           * up to four arguments; (value [, index|key, object, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the cloned value.
           * @see _.cloneDeepWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(false);
           *   }
           * }
           *
           * var el = _.cloneWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 0
           */
          function cloneWith(value, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer)
          }

          /**
           * This method is like `_.clone` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @returns {*} Returns the deep cloned value.
           * @see _.clone
           * @example
           *
           * var objects = [{ 'a': 1 }, { 'b': 2 }];
           *
           * var deep = _.cloneDeep(objects);
           * console.log(deep[0] === objects[0]);
           * // => false
           */
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG)
          }

          /**
           * This method is like `_.cloneWith` except that it recursively clones `value`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to recursively clone.
           * @param {Function} [customizer] The function to customize cloning.
           * @returns {*} Returns the deep cloned value.
           * @see _.cloneWith
           * @example
           *
           * function customizer(value) {
           *   if (_.isElement(value)) {
           *     return value.cloneNode(true);
           *   }
           * }
           *
           * var el = _.cloneDeepWith(document.body, customizer);
           *
           * console.log(el === document.body);
           * // => false
           * console.log(el.nodeName);
           * // => 'BODY'
           * console.log(el.childNodes.length);
           * // => 20
           */
          function cloneDeepWith(value, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            return baseClone(
              value,
              CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG,
              customizer
            )
          }

          /**
           * Checks if `object` conforms to `source` by invoking the predicate
           * properties of `source` with the corresponding property values of `object`.
           *
           * **Note:** This method is equivalent to `_.conforms` when `source` is
           * partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property predicates to conform to.
           * @returns {boolean} Returns `true` if `object` conforms, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
           * // => true
           *
           * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
           * // => false
           */
          function conformsTo(object, source) {
            return (
              source == null || baseConformsTo(object, source, keys(source))
            )
          }

          /**
           * Performs a
           * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
           * comparison between two values to determine if they are equivalent.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.eq(object, object);
           * // => true
           *
           * _.eq(object, other);
           * // => false
           *
           * _.eq('a', 'a');
           * // => true
           *
           * _.eq('a', Object('a'));
           * // => false
           *
           * _.eq(NaN, NaN);
           * // => true
           */
          function eq(value, other) {
            return value === other || (value !== value && other !== other)
          }

          /**
           * Checks if `value` is greater than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than `other`,
           *  else `false`.
           * @see _.lt
           * @example
           *
           * _.gt(3, 1);
           * // => true
           *
           * _.gt(3, 3);
           * // => false
           *
           * _.gt(1, 3);
           * // => false
           */
          var gt = createRelationalOperation(baseGt)

          /**
           * Checks if `value` is greater than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is greater than or equal to
           *  `other`, else `false`.
           * @see _.lte
           * @example
           *
           * _.gte(3, 1);
           * // => true
           *
           * _.gte(3, 3);
           * // => true
           *
           * _.gte(1, 3);
           * // => false
           */
          var gte = createRelationalOperation(function (value, other) {
            return value >= other
          })

          /**
           * Checks if `value` is likely an `arguments` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an `arguments` object,
           *  else `false`.
           * @example
           *
           * _.isArguments(function() { return arguments; }());
           * // => true
           *
           * _.isArguments([1, 2, 3]);
           * // => false
           */
          var isArguments = baseIsArguments(
            (function () {
              return arguments
            })()
          )
            ? baseIsArguments
            : function (value) {
                return (
                  isObjectLike(value) &&
                  hasOwnProperty.call(value, 'callee') &&
                  !propertyIsEnumerable.call(value, 'callee')
                )
              }

          /**
           * Checks if `value` is classified as an `Array` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array, else `false`.
           * @example
           *
           * _.isArray([1, 2, 3]);
           * // => true
           *
           * _.isArray(document.body.children);
           * // => false
           *
           * _.isArray('abc');
           * // => false
           *
           * _.isArray(_.noop);
           * // => false
           */
          var isArray = Array.isArray

          /**
           * Checks if `value` is classified as an `ArrayBuffer` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
           * @example
           *
           * _.isArrayBuffer(new ArrayBuffer(2));
           * // => true
           *
           * _.isArrayBuffer(new Array(2));
           * // => false
           */
          var isArrayBuffer = nodeIsArrayBuffer
            ? baseUnary(nodeIsArrayBuffer)
            : baseIsArrayBuffer

          /**
           * Checks if `value` is array-like. A value is considered array-like if it's
           * not a function and has a `value.length` that's an integer greater than or
           * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
           * @example
           *
           * _.isArrayLike([1, 2, 3]);
           * // => true
           *
           * _.isArrayLike(document.body.children);
           * // => true
           *
           * _.isArrayLike('abc');
           * // => true
           *
           * _.isArrayLike(_.noop);
           * // => false
           */
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value)
          }

          /**
           * This method is like `_.isArrayLike` except that it also checks if `value`
           * is an object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an array-like object,
           *  else `false`.
           * @example
           *
           * _.isArrayLikeObject([1, 2, 3]);
           * // => true
           *
           * _.isArrayLikeObject(document.body.children);
           * // => true
           *
           * _.isArrayLikeObject('abc');
           * // => false
           *
           * _.isArrayLikeObject(_.noop);
           * // => false
           */
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value)
          }

          /**
           * Checks if `value` is classified as a boolean primitive or object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
           * @example
           *
           * _.isBoolean(false);
           * // => true
           *
           * _.isBoolean(null);
           * // => false
           */
          function isBoolean(value) {
            return (
              value === true ||
              value === false ||
              (isObjectLike(value) && baseGetTag(value) == boolTag)
            )
          }

          /**
           * Checks if `value` is a buffer.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
           * @example
           *
           * _.isBuffer(new Buffer(2));
           * // => true
           *
           * _.isBuffer(new Uint8Array(2));
           * // => false
           */
          var isBuffer = nativeIsBuffer || stubFalse

          /**
           * Checks if `value` is classified as a `Date` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
           * @example
           *
           * _.isDate(new Date);
           * // => true
           *
           * _.isDate('Mon April 23 2012');
           * // => false
           */
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate

          /**
           * Checks if `value` is likely a DOM element.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
           * @example
           *
           * _.isElement(document.body);
           * // => true
           *
           * _.isElement('<body>');
           * // => false
           */
          function isElement(value) {
            return (
              isObjectLike(value) &&
              value.nodeType === 1 &&
              !isPlainObject(value)
            )
          }

          /**
           * Checks if `value` is an empty object, collection, map, or set.
           *
           * Objects are considered empty if they have no own enumerable string keyed
           * properties.
           *
           * Array-like values such as `arguments` objects, arrays, buffers, strings, or
           * jQuery-like collections are considered empty if they have a `length` of `0`.
           * Similarly, maps and sets are considered empty if they have a `size` of `0`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is empty, else `false`.
           * @example
           *
           * _.isEmpty(null);
           * // => true
           *
           * _.isEmpty(true);
           * // => true
           *
           * _.isEmpty(1);
           * // => true
           *
           * _.isEmpty([1, 2, 3]);
           * // => false
           *
           * _.isEmpty({ 'a': 1 });
           * // => false
           */
          function isEmpty(value) {
            if (value == null) {
              return true
            }
            if (
              isArrayLike(value) &&
              (isArray(value) ||
                typeof value == 'string' ||
                typeof value.splice == 'function' ||
                isBuffer(value) ||
                isTypedArray(value) ||
                isArguments(value))
            ) {
              return !value.length
            }
            var tag = getTag(value)
            if (tag == mapTag || tag == setTag) {
              return !value.size
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false
              }
            }
            return true
          }

          /**
           * Performs a deep comparison between two values to determine if they are
           * equivalent.
           *
           * **Note:** This method supports comparing arrays, array buffers, booleans,
           * date objects, error objects, maps, numbers, `Object` objects, regexes,
           * sets, strings, symbols, and typed arrays. `Object` objects are compared
           * by their own, not inherited, enumerable properties. Functions and DOM
           * nodes are compared by strict equality, i.e. `===`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * var object = { 'a': 1 };
           * var other = { 'a': 1 };
           *
           * _.isEqual(object, other);
           * // => true
           *
           * object === other;
           * // => false
           */
          function isEqual(value, other) {
            return baseIsEqual(value, other)
          }

          /**
           * This method is like `_.isEqual` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with up to
           * six arguments: (objValue, othValue [, index|key, object, other, stack]).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, othValue) {
           *   if (isGreeting(objValue) && isGreeting(othValue)) {
           *     return true;
           *   }
           * }
           *
           * var array = ['hello', 'goodbye'];
           * var other = ['hi', 'goodbye'];
           *
           * _.isEqualWith(array, other, customizer);
           * // => true
           */
          function isEqualWith(value, other, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            var result = customizer ? customizer(value, other) : undefined
            return result === undefined
              ? baseIsEqual(value, other, undefined, customizer)
              : !!result
          }

          /**
           * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
           * `SyntaxError`, `TypeError`, or `URIError` object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
           * @example
           *
           * _.isError(new Error);
           * // => true
           *
           * _.isError(Error);
           * // => false
           */
          function isError(value) {
            if (!isObjectLike(value)) {
              return false
            }
            var tag = baseGetTag(value)
            return (
              tag == errorTag ||
              tag == domExcTag ||
              (typeof value.message == 'string' &&
                typeof value.name == 'string' &&
                !isPlainObject(value))
            )
          }

          /**
           * Checks if `value` is a finite primitive number.
           *
           * **Note:** This method is based on
           * [`Number.isFinite`](https://mdn.io/Number/isFinite).
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
           * @example
           *
           * _.isFinite(3);
           * // => true
           *
           * _.isFinite(Number.MIN_VALUE);
           * // => true
           *
           * _.isFinite(Infinity);
           * // => false
           *
           * _.isFinite('3');
           * // => false
           */
          function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value)
          }

          /**
           * Checks if `value` is classified as a `Function` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a function, else `false`.
           * @example
           *
           * _.isFunction(_);
           * // => true
           *
           * _.isFunction(/abc/);
           * // => false
           */
          function isFunction(value) {
            if (!isObject(value)) {
              return false
            }
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value)
            return (
              tag == funcTag ||
              tag == genTag ||
              tag == asyncTag ||
              tag == proxyTag
            )
          }

          /**
           * Checks if `value` is an integer.
           *
           * **Note:** This method is based on
           * [`Number.isInteger`](https://mdn.io/Number/isInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
           * @example
           *
           * _.isInteger(3);
           * // => true
           *
           * _.isInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isInteger(Infinity);
           * // => false
           *
           * _.isInteger('3');
           * // => false
           */
          function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value)
          }

          /**
           * Checks if `value` is a valid array-like length.
           *
           * **Note:** This method is loosely based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
           * @example
           *
           * _.isLength(3);
           * // => true
           *
           * _.isLength(Number.MIN_VALUE);
           * // => false
           *
           * _.isLength(Infinity);
           * // => false
           *
           * _.isLength('3');
           * // => false
           */
          function isLength(value) {
            return (
              typeof value == 'number' &&
              value > -1 &&
              value % 1 == 0 &&
              value <= MAX_SAFE_INTEGER
            )
          }

          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */
          function isObject(value) {
            var type = typeof value
            return value != null && (type == 'object' || type == 'function')
          }

          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */
          function isObjectLike(value) {
            return value != null && typeof value == 'object'
          }

          /**
           * Checks if `value` is classified as a `Map` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a map, else `false`.
           * @example
           *
           * _.isMap(new Map);
           * // => true
           *
           * _.isMap(new WeakMap);
           * // => false
           */
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap

          /**
           * Performs a partial deep comparison between `object` and `source` to
           * determine if `object` contains equivalent property values.
           *
           * **Note:** This method is equivalent to `_.matches` when `source` is
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * var object = { 'a': 1, 'b': 2 };
           *
           * _.isMatch(object, { 'b': 2 });
           * // => true
           *
           * _.isMatch(object, { 'b': 1 });
           * // => false
           */
          function isMatch(object, source) {
            return (
              object === source ||
              baseIsMatch(object, source, getMatchData(source))
            )
          }

          /**
           * This method is like `_.isMatch` except that it accepts `customizer` which
           * is invoked to compare values. If `customizer` returns `undefined`, comparisons
           * are handled by the method instead. The `customizer` is invoked with five
           * arguments: (objValue, srcValue, index|key, object, source).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {Object} object The object to inspect.
           * @param {Object} source The object of property values to match.
           * @param {Function} [customizer] The function to customize comparisons.
           * @returns {boolean} Returns `true` if `object` is a match, else `false`.
           * @example
           *
           * function isGreeting(value) {
           *   return /^h(?:i|ello)$/.test(value);
           * }
           *
           * function customizer(objValue, srcValue) {
           *   if (isGreeting(objValue) && isGreeting(srcValue)) {
           *     return true;
           *   }
           * }
           *
           * var object = { 'greeting': 'hello' };
           * var source = { 'greeting': 'hi' };
           *
           * _.isMatchWith(object, source, customizer);
           * // => true
           */
          function isMatchWith(object, source, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            return baseIsMatch(object, source, getMatchData(source), customizer)
          }

          /**
           * Checks if `value` is `NaN`.
           *
           * **Note:** This method is based on
           * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
           * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
           * `undefined` and other non-number values.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
           * @example
           *
           * _.isNaN(NaN);
           * // => true
           *
           * _.isNaN(new Number(NaN));
           * // => true
           *
           * isNaN(undefined);
           * // => true
           *
           * _.isNaN(undefined);
           * // => false
           */
          function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value
          }

          /**
           * Checks if `value` is a pristine native function.
           *
           * **Note:** This method can't reliably detect native functions in the presence
           * of the core-js package because core-js circumvents this kind of detection.
           * Despite multiple requests, the core-js maintainer has made it clear: any
           * attempt to fix the detection will be obstructed. As a result, we're left
           * with little choice but to throw an error. Unfortunately, this also affects
           * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
           * which rely on core-js.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a native function,
           *  else `false`.
           * @example
           *
           * _.isNative(Array.prototype.push);
           * // => true
           *
           * _.isNative(_);
           * // => false
           */
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error(CORE_ERROR_TEXT)
            }
            return baseIsNative(value)
          }

          /**
           * Checks if `value` is `null`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
           * @example
           *
           * _.isNull(null);
           * // => true
           *
           * _.isNull(void 0);
           * // => false
           */
          function isNull(value) {
            return value === null
          }

          /**
           * Checks if `value` is `null` or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
           * @example
           *
           * _.isNil(null);
           * // => true
           *
           * _.isNil(void 0);
           * // => true
           *
           * _.isNil(NaN);
           * // => false
           */
          function isNil(value) {
            return value == null
          }

          /**
           * Checks if `value` is classified as a `Number` primitive or object.
           *
           * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
           * classified as numbers, use the `_.isFinite` method.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a number, else `false`.
           * @example
           *
           * _.isNumber(3);
           * // => true
           *
           * _.isNumber(Number.MIN_VALUE);
           * // => true
           *
           * _.isNumber(Infinity);
           * // => true
           *
           * _.isNumber('3');
           * // => false
           */
          function isNumber(value) {
            return (
              typeof value == 'number' ||
              (isObjectLike(value) && baseGetTag(value) == numberTag)
            )
          }

          /**
           * Checks if `value` is a plain object, that is, an object created by the
           * `Object` constructor or one with a `[[Prototype]]` of `null`.
           *
           * @static
           * @memberOf _
           * @since 0.8.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * _.isPlainObject(new Foo);
           * // => false
           *
           * _.isPlainObject([1, 2, 3]);
           * // => false
           *
           * _.isPlainObject({ 'x': 0, 'y': 0 });
           * // => true
           *
           * _.isPlainObject(Object.create(null));
           * // => true
           */
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false
            }
            var proto = getPrototype(value)
            if (proto === null) {
              return true
            }
            var Ctor =
              hasOwnProperty.call(proto, 'constructor') && proto.constructor
            return (
              typeof Ctor == 'function' &&
              Ctor instanceof Ctor &&
              funcToString.call(Ctor) == objectCtorString
            )
          }

          /**
           * Checks if `value` is classified as a `RegExp` object.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
           * @example
           *
           * _.isRegExp(/abc/);
           * // => true
           *
           * _.isRegExp('/abc/');
           * // => false
           */
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp

          /**
           * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
           * double precision number which isn't the result of a rounded unsafe integer.
           *
           * **Note:** This method is based on
           * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
           * @example
           *
           * _.isSafeInteger(3);
           * // => true
           *
           * _.isSafeInteger(Number.MIN_VALUE);
           * // => false
           *
           * _.isSafeInteger(Infinity);
           * // => false
           *
           * _.isSafeInteger('3');
           * // => false
           */
          function isSafeInteger(value) {
            return (
              isInteger(value) &&
              value >= -MAX_SAFE_INTEGER &&
              value <= MAX_SAFE_INTEGER
            )
          }

          /**
           * Checks if `value` is classified as a `Set` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a set, else `false`.
           * @example
           *
           * _.isSet(new Set);
           * // => true
           *
           * _.isSet(new WeakSet);
           * // => false
           */
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet

          /**
           * Checks if `value` is classified as a `String` primitive or object.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a string, else `false`.
           * @example
           *
           * _.isString('abc');
           * // => true
           *
           * _.isString(1);
           * // => false
           */
          function isString(value) {
            return (
              typeof value == 'string' ||
              (!isArray(value) &&
                isObjectLike(value) &&
                baseGetTag(value) == stringTag)
            )
          }

          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */
          function isSymbol(value) {
            return (
              typeof value == 'symbol' ||
              (isObjectLike(value) && baseGetTag(value) == symbolTag)
            )
          }

          /**
           * Checks if `value` is classified as a typed array.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
           * @example
           *
           * _.isTypedArray(new Uint8Array);
           * // => true
           *
           * _.isTypedArray([]);
           * // => false
           */
          var isTypedArray = nodeIsTypedArray
            ? baseUnary(nodeIsTypedArray)
            : baseIsTypedArray

          /**
           * Checks if `value` is `undefined`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
           * @example
           *
           * _.isUndefined(void 0);
           * // => true
           *
           * _.isUndefined(null);
           * // => false
           */
          function isUndefined(value) {
            return value === undefined
          }

          /**
           * Checks if `value` is classified as a `WeakMap` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
           * @example
           *
           * _.isWeakMap(new WeakMap);
           * // => true
           *
           * _.isWeakMap(new Map);
           * // => false
           */
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag
          }

          /**
           * Checks if `value` is classified as a `WeakSet` object.
           *
           * @static
           * @memberOf _
           * @since 4.3.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
           * @example
           *
           * _.isWeakSet(new WeakSet);
           * // => true
           *
           * _.isWeakSet(new Set);
           * // => false
           */
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag
          }

          /**
           * Checks if `value` is less than `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than `other`,
           *  else `false`.
           * @see _.gt
           * @example
           *
           * _.lt(1, 3);
           * // => true
           *
           * _.lt(3, 3);
           * // => false
           *
           * _.lt(3, 1);
           * // => false
           */
          var lt = createRelationalOperation(baseLt)

          /**
           * Checks if `value` is less than or equal to `other`.
           *
           * @static
           * @memberOf _
           * @since 3.9.0
           * @category Lang
           * @param {*} value The value to compare.
           * @param {*} other The other value to compare.
           * @returns {boolean} Returns `true` if `value` is less than or equal to
           *  `other`, else `false`.
           * @see _.gte
           * @example
           *
           * _.lte(1, 3);
           * // => true
           *
           * _.lte(3, 3);
           * // => true
           *
           * _.lte(3, 1);
           * // => false
           */
          var lte = createRelationalOperation(function (value, other) {
            return value <= other
          })

          /**
           * Converts `value` to an array.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Array} Returns the converted array.
           * @example
           *
           * _.toArray({ 'a': 1, 'b': 2 });
           * // => [1, 2]
           *
           * _.toArray('abc');
           * // => ['a', 'b', 'c']
           *
           * _.toArray(1);
           * // => []
           *
           * _.toArray(null);
           * // => []
           */
          function toArray(value) {
            if (!value) {
              return []
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value)
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]())
            }
            var tag = getTag(value),
              func =
                tag == mapTag ? mapToArray : tag == setTag ? setToArray : values

            return func(value)
          }

          /**
           * Converts `value` to a finite number.
           *
           * @static
           * @memberOf _
           * @since 4.12.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted number.
           * @example
           *
           * _.toFinite(3.2);
           * // => 3.2
           *
           * _.toFinite(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toFinite(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toFinite('3.2');
           * // => 3.2
           */
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0
            }
            value = toNumber(value)
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1
              return sign * MAX_INTEGER
            }
            return value === value ? value : 0
          }

          /**
           * Converts `value` to an integer.
           *
           * **Note:** This method is loosely based on
           * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toInteger(3.2);
           * // => 3
           *
           * _.toInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toInteger(Infinity);
           * // => 1.7976931348623157e+308
           *
           * _.toInteger('3.2');
           * // => 3
           */
          function toInteger(value) {
            var result = toFinite(value),
              remainder = result % 1

            return result === result
              ? remainder
                ? result - remainder
                : result
              : 0
          }

          /**
           * Converts `value` to an integer suitable for use as the length of an
           * array-like object.
           *
           * **Note:** This method is based on
           * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toLength(3.2);
           * // => 3
           *
           * _.toLength(Number.MIN_VALUE);
           * // => 0
           *
           * _.toLength(Infinity);
           * // => 4294967295
           *
           * _.toLength('3.2');
           * // => 3
           */
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0
          }

          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */
          function toNumber(value) {
            if (typeof value == 'number') {
              return value
            }
            if (isSymbol(value)) {
              return NAN
            }
            if (isObject(value)) {
              var other =
                typeof value.valueOf == 'function' ? value.valueOf() : value
              value = isObject(other) ? other + '' : other
            }
            if (typeof value != 'string') {
              return value === 0 ? value : +value
            }
            value = value.replace(reTrim, '')
            var isBinary = reIsBinary.test(value)
            return isBinary || reIsOctal.test(value)
              ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
              : reIsBadHex.test(value)
              ? NAN
              : +value
          }

          /**
           * Converts `value` to a plain object flattening inherited enumerable string
           * keyed properties of `value` to own properties of the plain object.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {Object} Returns the converted plain object.
           * @example
           *
           * function Foo() {
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.assign({ 'a': 1 }, new Foo);
           * // => { 'a': 1, 'b': 2 }
           *
           * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
           * // => { 'a': 1, 'b': 2, 'c': 3 }
           */
          function toPlainObject(value) {
            return copyObject(value, keysIn(value))
          }

          /**
           * Converts `value` to a safe integer. A safe integer can be compared and
           * represented correctly.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.toSafeInteger(3.2);
           * // => 3
           *
           * _.toSafeInteger(Number.MIN_VALUE);
           * // => 0
           *
           * _.toSafeInteger(Infinity);
           * // => 9007199254740991
           *
           * _.toSafeInteger('3.2');
           * // => 3
           */
          function toSafeInteger(value) {
            return value
              ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
              : value === 0
              ? value
              : 0
          }

          /**
           * Converts `value` to a string. An empty string is returned for `null`
           * and `undefined` values. The sign of `-0` is preserved.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.toString(null);
           * // => ''
           *
           * _.toString(-0);
           * // => '-0'
           *
           * _.toString([1, 2, 3]);
           * // => '1,2,3'
           */
          function toString(value) {
            return value == null ? '' : baseToString(value)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Assigns own enumerable string keyed properties of source objects to the
           * destination object. Source objects are applied from left to right.
           * Subsequent sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object` and is loosely based on
           * [`Object.assign`](https://mdn.io/Object/assign).
           *
           * @static
           * @memberOf _
           * @since 0.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assignIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assign({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'c': 3 }
           */
          var assign = createAssigner(function (object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object)
              return
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key])
              }
            }
          })

          /**
           * This method is like `_.assign` except that it iterates over own and
           * inherited source properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extend
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.assign
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           * }
           *
           * function Bar() {
           *   this.c = 3;
           * }
           *
           * Foo.prototype.b = 2;
           * Bar.prototype.d = 4;
           *
           * _.assignIn({ 'a': 0 }, new Foo, new Bar);
           * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
           */
          var assignIn = createAssigner(function (object, source) {
            copyObject(source, keysIn(source), object)
          })

          /**
           * This method is like `_.assignIn` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias extendWith
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignInWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var assignInWith = createAssigner(function (
            object,
            source,
            srcIndex,
            customizer
          ) {
            copyObject(source, keysIn(source), object, customizer)
          })

          /**
           * This method is like `_.assign` except that it accepts `customizer`
           * which is invoked to produce the assigned values. If `customizer` returns
           * `undefined`, assignment is handled by the method instead. The `customizer`
           * is invoked with five arguments: (objValue, srcValue, key, object, source).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @see _.assignInWith
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   return _.isUndefined(objValue) ? srcValue : objValue;
           * }
           *
           * var defaults = _.partialRight(_.assignWith, customizer);
           *
           * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var assignWith = createAssigner(function (
            object,
            source,
            srcIndex,
            customizer
          ) {
            copyObject(source, keys(source), object, customizer)
          })

          /**
           * Creates an array of values corresponding to `paths` of `object`.
           *
           * @static
           * @memberOf _
           * @since 1.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Array} Returns the picked values.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
           *
           * _.at(object, ['a[0].b.c', 'a[1]']);
           * // => [3, 4]
           */
          var at = flatRest(baseAt)

          /**
           * Creates an object that inherits from the `prototype` object. If a
           * `properties` object is given, its own enumerable string keyed properties
           * are assigned to the created object.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Object
           * @param {Object} prototype The object to inherit from.
           * @param {Object} [properties] The properties to assign to the object.
           * @returns {Object} Returns the new object.
           * @example
           *
           * function Shape() {
           *   this.x = 0;
           *   this.y = 0;
           * }
           *
           * function Circle() {
           *   Shape.call(this);
           * }
           *
           * Circle.prototype = _.create(Shape.prototype, {
           *   'constructor': Circle
           * });
           *
           * var circle = new Circle;
           * circle instanceof Circle;
           * // => true
           *
           * circle instanceof Shape;
           * // => true
           */
          function create(prototype, properties) {
            var result = baseCreate(prototype)
            return properties == null ? result : baseAssign(result, properties)
          }

          /**
           * Assigns own and inherited enumerable string keyed properties of source
           * objects to the destination object for all destination properties that
           * resolve to `undefined`. Source objects are applied from left to right.
           * Once a property is set, additional values of the same property are ignored.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaultsDeep
           * @example
           *
           * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
           * // => { 'a': 1, 'b': 2 }
           */
          var defaults = baseRest(function (object, sources) {
            object = Object(object)

            var index = -1
            var length = sources.length
            var guard = length > 2 ? sources[2] : undefined

            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1
            }

            while (++index < length) {
              var source = sources[index]
              var props = keysIn(source)
              var propsIndex = -1
              var propsLength = props.length

              while (++propsIndex < propsLength) {
                var key = props[propsIndex]
                var value = object[key]

                if (
                  value === undefined ||
                  (eq(value, objectProto[key]) &&
                    !hasOwnProperty.call(object, key))
                ) {
                  object[key] = source[key]
                }
              }
            }

            return object
          })

          /**
           * This method is like `_.defaults` except that it recursively assigns
           * default properties.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @see _.defaults
           * @example
           *
           * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
           * // => { 'a': { 'b': 2, 'c': 3 } }
           */
          var defaultsDeep = baseRest(function (args) {
            args.push(undefined, customDefaultsMerge)
            return apply(mergeWith, undefined, args)
          })

          /**
           * This method is like `_.find` except that it returns the key of the first
           * element `predicate` returns truthy for instead of the element itself.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findKey(users, function(o) { return o.age < 40; });
           * // => 'barney' (iteration order is not guaranteed)
           *
           * // The `_.matches` iteratee shorthand.
           * _.findKey(users, { 'age': 1, 'active': true });
           * // => 'pebbles'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findKey(users, 'active');
           * // => 'barney'
           */
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn)
          }

          /**
           * This method is like `_.findKey` except that it iterates over elements of
           * a collection in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @param {Function} [predicate=_.identity] The function invoked per iteration.
           * @returns {string|undefined} Returns the key of the matched element,
           *  else `undefined`.
           * @example
           *
           * var users = {
           *   'barney':  { 'age': 36, 'active': true },
           *   'fred':    { 'age': 40, 'active': false },
           *   'pebbles': { 'age': 1,  'active': true }
           * };
           *
           * _.findLastKey(users, function(o) { return o.age < 40; });
           * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
           *
           * // The `_.matches` iteratee shorthand.
           * _.findLastKey(users, { 'age': 36, 'active': true });
           * // => 'barney'
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.findLastKey(users, ['active', false]);
           * // => 'fred'
           *
           * // The `_.property` iteratee shorthand.
           * _.findLastKey(users, 'active');
           * // => 'pebbles'
           */
          function findLastKey(object, predicate) {
            return baseFindKey(
              object,
              getIteratee(predicate, 3),
              baseForOwnRight
            )
          }

          /**
           * Iterates over own and inherited enumerable string keyed properties of an
           * object and invokes `iteratee` for each property. The iteratee is invoked
           * with three arguments: (value, key, object). Iteratee functions may exit
           * iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forInRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forIn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
           */
          function forIn(object, iteratee) {
            return object == null
              ? object
              : baseFor(object, getIteratee(iteratee, 3), keysIn)
          }

          /**
           * This method is like `_.forIn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forIn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forInRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
           */
          function forInRight(object, iteratee) {
            return object == null
              ? object
              : baseForRight(object, getIteratee(iteratee, 3), keysIn)
          }

          /**
           * Iterates over own enumerable string keyed properties of an object and
           * invokes `iteratee` for each property. The iteratee is invoked with three
           * arguments: (value, key, object). Iteratee functions may exit iteration
           * early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 0.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwnRight
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwn(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'a' then 'b' (iteration order is not guaranteed).
           */
          function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3))
          }

          /**
           * This method is like `_.forOwn` except that it iterates over properties of
           * `object` in the opposite order.
           *
           * @static
           * @memberOf _
           * @since 2.0.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns `object`.
           * @see _.forOwn
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.forOwnRight(new Foo, function(value, key) {
           *   console.log(key);
           * });
           * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
           */
          function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3))
          }

          /**
           * Creates an array of function property names from own enumerable properties
           * of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functionsIn
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functions(new Foo);
           * // => ['a', 'b']
           */
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object))
          }

          /**
           * Creates an array of function property names from own and inherited
           * enumerable properties of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to inspect.
           * @returns {Array} Returns the function names.
           * @see _.functions
           * @example
           *
           * function Foo() {
           *   this.a = _.constant('a');
           *   this.b = _.constant('b');
           * }
           *
           * Foo.prototype.c = _.constant('c');
           *
           * _.functionsIn(new Foo);
           * // => ['a', 'b', 'c']
           */
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object))
          }

          /**
           * Gets the value at `path` of `object`. If the resolved value is
           * `undefined`, the `defaultValue` is returned in its place.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to get.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.get(object, 'a[0].b.c');
           * // => 3
           *
           * _.get(object, ['a', '0', 'b', 'c']);
           * // => 3
           *
           * _.get(object, 'a.b.c', 'default');
           * // => 'default'
           */
          function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path)
            return result === undefined ? defaultValue : result
          }

          /**
           * Checks if `path` is a direct property of `object`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = { 'a': { 'b': 2 } };
           * var other = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.has(object, 'a');
           * // => true
           *
           * _.has(object, 'a.b');
           * // => true
           *
           * _.has(object, ['a', 'b']);
           * // => true
           *
           * _.has(other, 'a');
           * // => false
           */
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas)
          }

          /**
           * Checks if `path` is a direct or inherited property of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path to check.
           * @returns {boolean} Returns `true` if `path` exists, else `false`.
           * @example
           *
           * var object = _.create({ 'a': _.create({ 'b': 2 }) });
           *
           * _.hasIn(object, 'a');
           * // => true
           *
           * _.hasIn(object, 'a.b');
           * // => true
           *
           * _.hasIn(object, ['a', 'b']);
           * // => true
           *
           * _.hasIn(object, 'b');
           * // => false
           */
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn)
          }

          /**
           * Creates an object composed of the inverted keys and values of `object`.
           * If `object` contains duplicate values, subsequent values overwrite
           * property assignments of previous values.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Object
           * @param {Object} object The object to invert.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invert(object);
           * // => { '1': 'c', '2': 'b' }
           */
          var invert = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != 'function') {
              value = nativeObjectToString.call(value)
            }

            result[value] = key
          }, constant(identity))

          /**
           * This method is like `_.invert` except that the inverted object is generated
           * from the results of running each element of `object` thru `iteratee`. The
           * corresponding inverted value of each inverted key is an array of keys
           * responsible for generating the inverted value. The iteratee is invoked
           * with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.1.0
           * @category Object
           * @param {Object} object The object to invert.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {Object} Returns the new inverted object.
           * @example
           *
           * var object = { 'a': 1, 'b': 2, 'c': 1 };
           *
           * _.invertBy(object);
           * // => { '1': ['a', 'c'], '2': ['b'] }
           *
           * _.invertBy(object, function(value) {
           *   return 'group' + value;
           * });
           * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
           */
          var invertBy = createInverter(function (result, value, key) {
            if (value != null && typeof value.toString != 'function') {
              value = nativeObjectToString.call(value)
            }

            if (hasOwnProperty.call(result, value)) {
              result[value].push(key)
            } else {
              result[value] = [key]
            }
          }, getIteratee)

          /**
           * Invokes the method at `path` of `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {*} Returns the result of the invoked method.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
           *
           * _.invoke(object, 'a[0].b.c.slice', 1, 3);
           * // => [2, 3]
           */
          var invoke = baseRest(baseInvoke)

          /**
           * Creates an array of the own enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects. See the
           * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
           * for more details.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keys(new Foo);
           * // => ['a', 'b'] (iteration order is not guaranteed)
           *
           * _.keys('hi');
           * // => ['0', '1']
           */
          function keys(object) {
            return isArrayLike(object)
              ? arrayLikeKeys(object)
              : baseKeys(object)
          }

          /**
           * Creates an array of the own and inherited enumerable property names of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property names.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.keysIn(new Foo);
           * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
           */
          function keysIn(object) {
            return isArrayLike(object)
              ? arrayLikeKeys(object, true)
              : baseKeysIn(object)
          }

          /**
           * The opposite of `_.mapValues`; this method creates an object with the
           * same values as `object` and keys generated by running each own enumerable
           * string keyed property of `object` thru `iteratee`. The iteratee is invoked
           * with three arguments: (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 3.8.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapValues
           * @example
           *
           * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
           *   return key + value;
           * });
           * // => { 'a1': 1, 'b2': 2 }
           */
          function mapKeys(object, iteratee) {
            var result = {}
            iteratee = getIteratee(iteratee, 3)

            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, iteratee(value, key, object), value)
            })
            return result
          }

          /**
           * Creates an object with the same keys as `object` and values generated
           * by running each own enumerable string keyed property of `object` thru
           * `iteratee`. The iteratee is invoked with three arguments:
           * (value, key, object).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Object} Returns the new mapped object.
           * @see _.mapKeys
           * @example
           *
           * var users = {
           *   'fred':    { 'user': 'fred',    'age': 40 },
           *   'pebbles': { 'user': 'pebbles', 'age': 1 }
           * };
           *
           * _.mapValues(users, function(o) { return o.age; });
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           *
           * // The `_.property` iteratee shorthand.
           * _.mapValues(users, 'age');
           * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
           */
          function mapValues(object, iteratee) {
            var result = {}
            iteratee = getIteratee(iteratee, 3)

            baseForOwn(object, function (value, key, object) {
              baseAssignValue(result, key, iteratee(value, key, object))
            })
            return result
          }

          /**
           * This method is like `_.assign` except that it recursively merges own and
           * inherited enumerable string keyed properties of source objects into the
           * destination object. Source properties that resolve to `undefined` are
           * skipped if a destination value exists. Array and plain object properties
           * are merged recursively. Other objects and value types are overridden by
           * assignment. Source objects are applied from left to right. Subsequent
           * sources overwrite property assignments of previous sources.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 0.5.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} [sources] The source objects.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {
           *   'a': [{ 'b': 2 }, { 'd': 4 }]
           * };
           *
           * var other = {
           *   'a': [{ 'c': 3 }, { 'e': 5 }]
           * };
           *
           * _.merge(object, other);
           * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
           */
          var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex)
          })

          /**
           * This method is like `_.merge` except that it accepts `customizer` which
           * is invoked to produce the merged values of the destination and source
           * properties. If `customizer` returns `undefined`, merging is handled by the
           * method instead. The `customizer` is invoked with six arguments:
           * (objValue, srcValue, key, object, source, stack).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The destination object.
           * @param {...Object} sources The source objects.
           * @param {Function} customizer The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * function customizer(objValue, srcValue) {
           *   if (_.isArray(objValue)) {
           *     return objValue.concat(srcValue);
           *   }
           * }
           *
           * var object = { 'a': [1], 'b': [2] };
           * var other = { 'a': [3], 'b': [4] };
           *
           * _.mergeWith(object, other, customizer);
           * // => { 'a': [1, 3], 'b': [2, 4] }
           */
          var mergeWith = createAssigner(function (
            object,
            source,
            srcIndex,
            customizer
          ) {
            baseMerge(object, source, srcIndex, customizer)
          })

          /**
           * The opposite of `_.pick`; this method creates an object composed of the
           * own and inherited enumerable property paths of `object` that are not omitted.
           *
           * **Note:** This method is considerably slower than `_.pick`.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to omit.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omit(object, ['a', 'c']);
           * // => { 'b': '2' }
           */
          var omit = flatRest(function (object, paths) {
            var result = {}
            if (object == null) {
              return result
            }
            var isDeep = false
            paths = arrayMap(paths, function (path) {
              path = castPath(path, object)
              isDeep || (isDeep = path.length > 1)
              return path
            })
            copyObject(object, getAllKeysIn(object), result)
            if (isDeep) {
              result = baseClone(
                result,
                CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
                customOmitClone
              )
            }
            var length = paths.length
            while (length--) {
              baseUnset(result, paths[length])
            }
            return result
          })

          /**
           * The opposite of `_.pickBy`; this method creates an object composed of
           * the own and inherited enumerable string keyed properties of `object` that
           * `predicate` doesn't return truthy for. The predicate is invoked with two
           * arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.omitBy(object, _.isNumber);
           * // => { 'b': '2' }
           */
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)))
          }

          /**
           * Creates an object composed of the picked `object` properties.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The source object.
           * @param {...(string|string[])} [paths] The property paths to pick.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pick(object, ['a', 'c']);
           * // => { 'a': 1, 'c': 3 }
           */
          var pick = flatRest(function (object, paths) {
            return object == null ? {} : basePick(object, paths)
          })

          /**
           * Creates an object composed of the `object` properties `predicate` returns
           * truthy for. The predicate is invoked with two arguments: (value, key).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The source object.
           * @param {Function} [predicate=_.identity] The function invoked per property.
           * @returns {Object} Returns the new object.
           * @example
           *
           * var object = { 'a': 1, 'b': '2', 'c': 3 };
           *
           * _.pickBy(object, _.isNumber);
           * // => { 'a': 1, 'c': 3 }
           */
          function pickBy(object, predicate) {
            if (object == null) {
              return {}
            }
            var props = arrayMap(getAllKeysIn(object), function (prop) {
              return [prop]
            })
            predicate = getIteratee(predicate)
            return basePickBy(object, props, function (value, path) {
              return predicate(value, path[0])
            })
          }

          /**
           * This method is like `_.get` except that if the resolved value is a
           * function it's invoked with the `this` binding of its parent object and
           * its result is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @param {Array|string} path The path of the property to resolve.
           * @param {*} [defaultValue] The value returned for `undefined` resolved values.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
           *
           * _.result(object, 'a[0].b.c1');
           * // => 3
           *
           * _.result(object, 'a[0].b.c2');
           * // => 4
           *
           * _.result(object, 'a[0].b.c3', 'default');
           * // => 'default'
           *
           * _.result(object, 'a[0].b.c3', _.constant('default'));
           * // => 'default'
           */
          function result(object, path, defaultValue) {
            path = castPath(path, object)

            var index = -1,
              length = path.length

            // Ensure the loop is entered when path is empty.
            if (!length) {
              length = 1
              object = undefined
            }
            while (++index < length) {
              var value =
                object == null ? undefined : object[toKey(path[index])]
              if (value === undefined) {
                index = length
                value = defaultValue
              }
              object = isFunction(value) ? value.call(object) : value
            }
            return object
          }

          /**
           * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
           * it's created. Arrays are created for missing index properties while objects
           * are created for all other missing properties. Use `_.setWith` to customize
           * `path` creation.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.set(object, 'a[0].b.c', 4);
           * console.log(object.a[0].b.c);
           * // => 4
           *
           * _.set(object, ['x', '0', 'y', 'z'], 5);
           * console.log(object.x[0].y.z);
           * // => 5
           */
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value)
          }

          /**
           * This method is like `_.set` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {*} value The value to set.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.setWith(object, '[0][1]', 'a', Object);
           * // => { '0': { '1': 'a' } }
           */
          function setWith(object, path, value, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            return object == null
              ? object
              : baseSet(object, path, value, customizer)
          }

          /**
           * Creates an array of own enumerable string keyed-value pairs for `object`
           * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
           * entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entries
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairs(new Foo);
           * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
           */
          var toPairs = createToPairs(keys)

          /**
           * Creates an array of own and inherited enumerable string keyed-value pairs
           * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
           * or set, its entries are returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @alias entriesIn
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the key-value pairs.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.toPairsIn(new Foo);
           * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
           */
          var toPairsIn = createToPairs(keysIn)

          /**
           * An alternative to `_.reduce`; this method transforms `object` to a new
           * `accumulator` object which is the result of running each of its own
           * enumerable string keyed properties thru `iteratee`, with each invocation
           * potentially mutating the `accumulator` object. If `accumulator` is not
           * provided, a new object with the same `[[Prototype]]` will be used. The
           * iteratee is invoked with four arguments: (accumulator, value, key, object).
           * Iteratee functions may exit iteration early by explicitly returning `false`.
           *
           * @static
           * @memberOf _
           * @since 1.3.0
           * @category Object
           * @param {Object} object The object to iterate over.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @param {*} [accumulator] The custom accumulator value.
           * @returns {*} Returns the accumulated value.
           * @example
           *
           * _.transform([2, 3, 4], function(result, n) {
           *   result.push(n *= n);
           *   return n % 2 == 0;
           * }, []);
           * // => [4, 9]
           *
           * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
           *   (result[value] || (result[value] = [])).push(key);
           * }, {});
           * // => { '1': ['a', 'c'], '2': ['b'] }
           */
          function transform(object, iteratee, accumulator) {
            var isArr = isArray(object),
              isArrLike = isArr || isBuffer(object) || isTypedArray(object)

            iteratee = getIteratee(iteratee, 4)
            if (accumulator == null) {
              var Ctor = object && object.constructor
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : []
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor)
                  ? baseCreate(getPrototype(object))
                  : {}
              } else {
                accumulator = {}
              }
            }
            ;(isArrLike ? arrayEach : baseForOwn)(
              object,
              function (value, index, object) {
                return iteratee(accumulator, value, index, object)
              }
            )
            return accumulator
          }

          /**
           * Removes the property at `path` of `object`.
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to unset.
           * @returns {boolean} Returns `true` if the property is deleted, else `false`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 7 } }] };
           * _.unset(object, 'a[0].b.c');
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           *
           * _.unset(object, ['a', '0', 'b', 'c']);
           * // => true
           *
           * console.log(object);
           * // => { 'a': [{ 'b': {} }] };
           */
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path)
          }

          /**
           * This method is like `_.set` except that accepts `updater` to produce the
           * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
           * is invoked with one argument: (value).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = { 'a': [{ 'b': { 'c': 3 } }] };
           *
           * _.update(object, 'a[0].b.c', function(n) { return n * n; });
           * console.log(object.a[0].b.c);
           * // => 9
           *
           * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
           * console.log(object.x[0].y.z);
           * // => 0
           */
          function update(object, path, updater) {
            return object == null
              ? object
              : baseUpdate(object, path, castFunction(updater))
          }

          /**
           * This method is like `_.update` except that it accepts `customizer` which is
           * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
           * path creation is handled by the method instead. The `customizer` is invoked
           * with three arguments: (nsValue, key, nsObject).
           *
           * **Note:** This method mutates `object`.
           *
           * @static
           * @memberOf _
           * @since 4.6.0
           * @category Object
           * @param {Object} object The object to modify.
           * @param {Array|string} path The path of the property to set.
           * @param {Function} updater The function to produce the updated value.
           * @param {Function} [customizer] The function to customize assigned values.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var object = {};
           *
           * _.updateWith(object, '[0][1]', _.constant('a'), Object);
           * // => { '0': { '1': 'a' } }
           */
          function updateWith(object, path, updater, customizer) {
            customizer =
              typeof customizer == 'function' ? customizer : undefined
            return object == null
              ? object
              : baseUpdate(object, path, castFunction(updater), customizer)
          }

          /**
           * Creates an array of the own enumerable string keyed property values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.values(new Foo);
           * // => [1, 2] (iteration order is not guaranteed)
           *
           * _.values('hi');
           * // => ['h', 'i']
           */
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object))
          }

          /**
           * Creates an array of the own and inherited enumerable string keyed property
           * values of `object`.
           *
           * **Note:** Non-object values are coerced to objects.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Object
           * @param {Object} object The object to query.
           * @returns {Array} Returns the array of property values.
           * @example
           *
           * function Foo() {
           *   this.a = 1;
           *   this.b = 2;
           * }
           *
           * Foo.prototype.c = 3;
           *
           * _.valuesIn(new Foo);
           * // => [1, 2, 3] (iteration order is not guaranteed)
           */
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object))
          }

          /*------------------------------------------------------------------------*/

          /**
           * Clamps `number` within the inclusive `lower` and `upper` bounds.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Number
           * @param {number} number The number to clamp.
           * @param {number} [lower] The lower bound.
           * @param {number} upper The upper bound.
           * @returns {number} Returns the clamped number.
           * @example
           *
           * _.clamp(-10, -5, 5);
           * // => -5
           *
           * _.clamp(10, -5, 5);
           * // => 5
           */
          function clamp(number, lower, upper) {
            if (upper === undefined) {
              upper = lower
              lower = undefined
            }
            if (upper !== undefined) {
              upper = toNumber(upper)
              upper = upper === upper ? upper : 0
            }
            if (lower !== undefined) {
              lower = toNumber(lower)
              lower = lower === lower ? lower : 0
            }
            return baseClamp(toNumber(number), lower, upper)
          }

          /**
           * Checks if `n` is between `start` and up to, but not including, `end`. If
           * `end` is not specified, it's set to `start` with `start` then set to `0`.
           * If `start` is greater than `end` the params are swapped to support
           * negative ranges.
           *
           * @static
           * @memberOf _
           * @since 3.3.0
           * @category Number
           * @param {number} number The number to check.
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
           * @see _.range, _.rangeRight
           * @example
           *
           * _.inRange(3, 2, 4);
           * // => true
           *
           * _.inRange(4, 8);
           * // => true
           *
           * _.inRange(4, 2);
           * // => false
           *
           * _.inRange(2, 2);
           * // => false
           *
           * _.inRange(1.2, 2);
           * // => true
           *
           * _.inRange(5.2, 4);
           * // => false
           *
           * _.inRange(-3, -2, -6);
           * // => true
           */
          function inRange(number, start, end) {
            start = toFinite(start)
            if (end === undefined) {
              end = start
              start = 0
            } else {
              end = toFinite(end)
            }
            number = toNumber(number)
            return baseInRange(number, start, end)
          }

          /**
           * Produces a random number between the inclusive `lower` and `upper` bounds.
           * If only one argument is provided a number between `0` and the given number
           * is returned. If `floating` is `true`, or either `lower` or `upper` are
           * floats, a floating-point number is returned instead of an integer.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @memberOf _
           * @since 0.7.0
           * @category Number
           * @param {number} [lower=0] The lower bound.
           * @param {number} [upper=1] The upper bound.
           * @param {boolean} [floating] Specify returning a floating-point number.
           * @returns {number} Returns the random number.
           * @example
           *
           * _.random(0, 5);
           * // => an integer between 0 and 5
           *
           * _.random(5);
           * // => also an integer between 0 and 5
           *
           * _.random(5, true);
           * // => a floating-point number between 0 and 5
           *
           * _.random(1.2, 5.2);
           * // => a floating-point number between 1.2 and 5.2
           */
          function random(lower, upper, floating) {
            if (
              floating &&
              typeof floating != 'boolean' &&
              isIterateeCall(lower, upper, floating)
            ) {
              upper = floating = undefined
            }
            if (floating === undefined) {
              if (typeof upper == 'boolean') {
                floating = upper
                upper = undefined
              } else if (typeof lower == 'boolean') {
                floating = lower
                lower = undefined
              }
            }
            if (lower === undefined && upper === undefined) {
              lower = 0
              upper = 1
            } else {
              lower = toFinite(lower)
              if (upper === undefined) {
                upper = lower
                lower = 0
              } else {
                upper = toFinite(upper)
              }
            }
            if (lower > upper) {
              var temp = lower
              lower = upper
              upper = temp
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom()
              return nativeMin(
                lower +
                  rand *
                    (upper -
                      lower +
                      freeParseFloat('1e-' + ((rand + '').length - 1))),
                upper
              )
            }
            return baseRandom(lower, upper)
          }

          /*------------------------------------------------------------------------*/

          /**
           * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the camel cased string.
           * @example
           *
           * _.camelCase('Foo Bar');
           * // => 'fooBar'
           *
           * _.camelCase('--foo-bar--');
           * // => 'fooBar'
           *
           * _.camelCase('__FOO_BAR__');
           * // => 'fooBar'
           */
          var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase()
            return result + (index ? capitalize(word) : word)
          })

          /**
           * Converts the first character of `string` to upper case and the remaining
           * to lower case.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to capitalize.
           * @returns {string} Returns the capitalized string.
           * @example
           *
           * _.capitalize('FRED');
           * // => 'Fred'
           */
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase())
          }

          /**
           * Deburrs `string` by converting
           * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
           * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
           * letters to basic Latin letters and removing
           * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to deburr.
           * @returns {string} Returns the deburred string.
           * @example
           *
           * _.deburr('déjà vu');
           * // => 'deja vu'
           */
          function deburr(string) {
            string = toString(string)
            return (
              string &&
              string.replace(reLatin, deburrLetter).replace(reComboMark, '')
            )
          }

          /**
           * Checks if `string` ends with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=string.length] The position to search up to.
           * @returns {boolean} Returns `true` if `string` ends with `target`,
           *  else `false`.
           * @example
           *
           * _.endsWith('abc', 'c');
           * // => true
           *
           * _.endsWith('abc', 'b');
           * // => false
           *
           * _.endsWith('abc', 'b', 2);
           * // => true
           */
          function endsWith(string, target, position) {
            string = toString(string)
            target = baseToString(target)

            var length = string.length
            position =
              position === undefined
                ? length
                : baseClamp(toInteger(position), 0, length)

            var end = position
            position -= target.length
            return position >= 0 && string.slice(position, end) == target
          }

          /**
           * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
           * corresponding HTML entities.
           *
           * **Note:** No other characters are escaped. To escape additional
           * characters use a third-party library like [_he_](https://mths.be/he).
           *
           * Though the ">" character is escaped for symmetry, characters like
           * ">" and "/" don't need escaping in HTML and have no special meaning
           * unless they're part of a tag or unquoted attribute value. See
           * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
           * (under "semi-related fun fact") for more details.
           *
           * When working with HTML you should always
           * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
           * XSS vectors.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escape('fred, barney, & pebbles');
           * // => 'fred, barney, &amp; pebbles'
           */
          function escape(string) {
            string = toString(string)
            return string && reHasUnescapedHtml.test(string)
              ? string.replace(reUnescapedHtml, escapeHtmlChar)
              : string
          }

          /**
           * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
           * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to escape.
           * @returns {string} Returns the escaped string.
           * @example
           *
           * _.escapeRegExp('[lodash](https://lodash.com/)');
           * // => '\[lodash\]\(https://lodash\.com/\)'
           */
          function escapeRegExp(string) {
            string = toString(string)
            return string && reHasRegExpChar.test(string)
              ? string.replace(reRegExpChar, '\\$&')
              : string
          }

          /**
           * Converts `string` to
           * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the kebab cased string.
           * @example
           *
           * _.kebabCase('Foo Bar');
           * // => 'foo-bar'
           *
           * _.kebabCase('fooBar');
           * // => 'foo-bar'
           *
           * _.kebabCase('__FOO_BAR__');
           * // => 'foo-bar'
           */
          var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase()
          })

          /**
           * Converts `string`, as space separated words, to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.lowerCase('--Foo-Bar--');
           * // => 'foo bar'
           *
           * _.lowerCase('fooBar');
           * // => 'foo bar'
           *
           * _.lowerCase('__FOO_BAR__');
           * // => 'foo bar'
           */
          var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase()
          })

          /**
           * Converts the first character of `string` to lower case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.lowerFirst('Fred');
           * // => 'fred'
           *
           * _.lowerFirst('FRED');
           * // => 'fRED'
           */
          var lowerFirst = createCaseFirst('toLowerCase')

          /**
           * Pads `string` on the left and right sides if it's shorter than `length`.
           * Padding characters are truncated if they can't be evenly divided by `length`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.pad('abc', 8);
           * // => '  abc   '
           *
           * _.pad('abc', 8, '_-');
           * // => '_-abc_-_'
           *
           * _.pad('abc', 3);
           * // => 'abc'
           */
          function pad(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            if (!length || strLength >= length) {
              return string
            }
            var mid = (length - strLength) / 2
            return (
              createPadding(nativeFloor(mid), chars) +
              string +
              createPadding(nativeCeil(mid), chars)
            )
          }

          /**
           * Pads `string` on the right side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padEnd('abc', 6);
           * // => 'abc   '
           *
           * _.padEnd('abc', 6, '_-');
           * // => 'abc_-_'
           *
           * _.padEnd('abc', 3);
           * // => 'abc'
           */
          function padEnd(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            return length && strLength < length
              ? string + createPadding(length - strLength, chars)
              : string
          }

          /**
           * Pads `string` on the left side if it's shorter than `length`. Padding
           * characters are truncated if they exceed `length`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to pad.
           * @param {number} [length=0] The padding length.
           * @param {string} [chars=' '] The string used as padding.
           * @returns {string} Returns the padded string.
           * @example
           *
           * _.padStart('abc', 6);
           * // => '   abc'
           *
           * _.padStart('abc', 6, '_-');
           * // => '_-_abc'
           *
           * _.padStart('abc', 3);
           * // => 'abc'
           */
          function padStart(string, length, chars) {
            string = toString(string)
            length = toInteger(length)

            var strLength = length ? stringSize(string) : 0
            return length && strLength < length
              ? createPadding(length - strLength, chars) + string
              : string
          }

          /**
           * Converts `string` to an integer of the specified radix. If `radix` is
           * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
           * hexadecimal, in which case a `radix` of `16` is used.
           *
           * **Note:** This method aligns with the
           * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
           *
           * @static
           * @memberOf _
           * @since 1.1.0
           * @category String
           * @param {string} string The string to convert.
           * @param {number} [radix=10] The radix to interpret `value` by.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {number} Returns the converted integer.
           * @example
           *
           * _.parseInt('08');
           * // => 8
           *
           * _.map(['6', '08', '10'], _.parseInt);
           * // => [6, 8, 10]
           */
          function parseInt(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0
            } else if (radix) {
              radix = +radix
            }
            return nativeParseInt(
              toString(string).replace(reTrimStart, ''),
              radix || 0
            )
          }

          /**
           * Repeats the given string `n` times.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to repeat.
           * @param {number} [n=1] The number of times to repeat the string.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the repeated string.
           * @example
           *
           * _.repeat('*', 3);
           * // => '***'
           *
           * _.repeat('abc', 2);
           * // => 'abcabc'
           *
           * _.repeat('abc', 0);
           * // => ''
           */
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
              n = 1
            } else {
              n = toInteger(n)
            }
            return baseRepeat(toString(string), n)
          }

          /**
           * Replaces matches for `pattern` in `string` with `replacement`.
           *
           * **Note:** This method is based on
           * [`String#replace`](https://mdn.io/String/replace).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to modify.
           * @param {RegExp|string} pattern The pattern to replace.
           * @param {Function|string} replacement The match replacement.
           * @returns {string} Returns the modified string.
           * @example
           *
           * _.replace('Hi Fred', 'Fred', 'Barney');
           * // => 'Hi Barney'
           */
          function replace() {
            var args = arguments,
              string = toString(args[0])

            return args.length < 3 ? string : string.replace(args[1], args[2])
          }

          /**
           * Converts `string` to
           * [snake case](https://en.wikipedia.org/wiki/Snake_case).
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the snake cased string.
           * @example
           *
           * _.snakeCase('Foo Bar');
           * // => 'foo_bar'
           *
           * _.snakeCase('fooBar');
           * // => 'foo_bar'
           *
           * _.snakeCase('--FOO-BAR--');
           * // => 'foo_bar'
           */
          var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase()
          })

          /**
           * Splits `string` by `separator`.
           *
           * **Note:** This method is based on
           * [`String#split`](https://mdn.io/String/split).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to split.
           * @param {RegExp|string} separator The separator pattern to split by.
           * @param {number} [limit] The length to truncate results to.
           * @returns {Array} Returns the string segments.
           * @example
           *
           * _.split('a-b-c', '-', 2);
           * // => ['a', 'b']
           */
          function split(string, separator, limit) {
            if (
              limit &&
              typeof limit != 'number' &&
              isIterateeCall(string, separator, limit)
            ) {
              separator = limit = undefined
            }
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0
            if (!limit) {
              return []
            }
            string = toString(string)
            if (
              string &&
              (typeof separator == 'string' ||
                (separator != null && !isRegExp(separator)))
            ) {
              separator = baseToString(separator)
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit)
              }
            }
            return string.split(separator, limit)
          }

          /**
           * Converts `string` to
           * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
           *
           * @static
           * @memberOf _
           * @since 3.1.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the start cased string.
           * @example
           *
           * _.startCase('--foo-bar--');
           * // => 'Foo Bar'
           *
           * _.startCase('fooBar');
           * // => 'Foo Bar'
           *
           * _.startCase('__FOO_BAR__');
           * // => 'FOO BAR'
           */
          var startCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word)
          })

          /**
           * Checks if `string` starts with the given target string.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {string} [target] The string to search for.
           * @param {number} [position=0] The position to search from.
           * @returns {boolean} Returns `true` if `string` starts with `target`,
           *  else `false`.
           * @example
           *
           * _.startsWith('abc', 'a');
           * // => true
           *
           * _.startsWith('abc', 'b');
           * // => false
           *
           * _.startsWith('abc', 'b', 1);
           * // => true
           */
          function startsWith(string, target, position) {
            string = toString(string)
            position =
              position == null
                ? 0
                : baseClamp(toInteger(position), 0, string.length)

            target = baseToString(target)
            return string.slice(position, position + target.length) == target
          }

          /**
           * Creates a compiled template function that can interpolate data properties
           * in "interpolate" delimiters, HTML-escape interpolated data properties in
           * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
           * properties may be accessed as free variables in the template. If a setting
           * object is given, it takes precedence over `_.templateSettings` values.
           *
           * **Note:** In the development build `_.template` utilizes
           * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
           * for easier debugging.
           *
           * For more information on precompiling templates see
           * [lodash's custom builds documentation](https://lodash.com/custom-builds).
           *
           * For more information on Chrome extension sandboxes see
           * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category String
           * @param {string} [string=''] The template string.
           * @param {Object} [options={}] The options object.
           * @param {RegExp} [options.escape=_.templateSettings.escape]
           *  The HTML "escape" delimiter.
           * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
           *  The "evaluate" delimiter.
           * @param {Object} [options.imports=_.templateSettings.imports]
           *  An object to import into the template as free variables.
           * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
           *  The "interpolate" delimiter.
           * @param {string} [options.sourceURL='lodash.templateSources[n]']
           *  The sourceURL of the compiled template.
           * @param {string} [options.variable='obj']
           *  The data object variable name.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Function} Returns the compiled template function.
           * @example
           *
           * // Use the "interpolate" delimiter to create a compiled template.
           * var compiled = _.template('hello <%= user %>!');
           * compiled({ 'user': 'fred' });
           * // => 'hello fred!'
           *
           * // Use the HTML "escape" delimiter to escape data property values.
           * var compiled = _.template('<b><%- value %></b>');
           * compiled({ 'value': '<script>' });
           * // => '<b>&lt;script&gt;</b>'
           *
           * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
           * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the internal `print` function in "evaluate" delimiters.
           * var compiled = _.template('<% print("hello " + user); %>!');
           * compiled({ 'user': 'barney' });
           * // => 'hello barney!'
           *
           * // Use the ES template literal delimiter as an "interpolate" delimiter.
           * // Disable support by replacing the "interpolate" delimiter.
           * var compiled = _.template('hello ${ user }!');
           * compiled({ 'user': 'pebbles' });
           * // => 'hello pebbles!'
           *
           * // Use backslashes to treat delimiters as plain text.
           * var compiled = _.template('<%= "\\<%- value %\\>" %>');
           * compiled({ 'value': 'ignored' });
           * // => '<%- value %>'
           *
           * // Use the `imports` option to import `jQuery` as `jq`.
           * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
           * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
           * compiled({ 'users': ['fred', 'barney'] });
           * // => '<li>fred</li><li>barney</li>'
           *
           * // Use the `sourceURL` option to specify a custom sourceURL for the template.
           * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
           * compiled(data);
           * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
           *
           * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
           * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
           * compiled.source;
           * // => function(data) {
           * //   var __t, __p = '';
           * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
           * //   return __p;
           * // }
           *
           * // Use custom template delimiters.
           * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
           * var compiled = _.template('hello {{ user }}!');
           * compiled({ 'user': 'mustache' });
           * // => 'hello mustache!'
           *
           * // Use the `source` property to inline compiled templates for meaningful
           * // line numbers in error messages and stack traces.
           * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
           *   var JST = {\
           *     "main": ' + _.template(mainText).source + '\
           *   };\
           * ');
           */
          function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings

            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined
            }
            string = toString(string)
            options = assignInWith(
              {},
              options,
              settings,
              customDefaultsAssignIn
            )

            var imports = assignInWith(
                {},
                options.imports,
                settings.imports,
                customDefaultsAssignIn
              ),
              importsKeys = keys(imports),
              importsValues = baseValues(imports, importsKeys)

            var isEscaping,
              isEvaluating,
              index = 0,
              interpolate = options.interpolate || reNoMatch,
              source = "__p += '"

            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp(
              (options.escape || reNoMatch).source +
                '|' +
                interpolate.source +
                '|' +
                (interpolate === reInterpolate ? reEsTemplate : reNoMatch)
                  .source +
                '|' +
                (options.evaluate || reNoMatch).source +
                '|$',
              'g'
            )

            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL =
              '//# sourceURL=' +
              (hasOwnProperty.call(options, 'sourceURL')
                ? (options.sourceURL + '').replace(/\s/g, ' ')
                : 'lodash.templateSources[' + ++templateCounter + ']') +
              '\n'

            string.replace(
              reDelimiters,
              function (
                match,
                escapeValue,
                interpolateValue,
                esTemplateValue,
                evaluateValue,
                offset
              ) {
                interpolateValue || (interpolateValue = esTemplateValue)

                // Escape characters that can't be included in string literals.
                source += string
                  .slice(index, offset)
                  .replace(reUnescapedString, escapeStringChar)

                // Replace delimiters with snippets.
                if (escapeValue) {
                  isEscaping = true
                  source += "' +\n__e(" + escapeValue + ") +\n'"
                }
                if (evaluateValue) {
                  isEvaluating = true
                  source += "';\n" + evaluateValue + ";\n__p += '"
                }
                if (interpolateValue) {
                  source +=
                    "' +\n((__t = (" +
                    interpolateValue +
                    ")) == null ? '' : __t) +\n'"
                }
                index = offset + match.length

                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match
              }
            )

            source += "';\n"

            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable =
              hasOwnProperty.call(options, 'variable') && options.variable
            if (!variable) {
              source = 'with (obj) {\n' + source + '\n}\n'
            }
            // Cleanup code by stripping empty strings.
            source = (isEvaluating
              ? source.replace(reEmptyStringLeading, '')
              : source
            )
              .replace(reEmptyStringMiddle, '$1')
              .replace(reEmptyStringTrailing, '$1;')

            // Frame code as the function body.
            source =
              'function(' +
              (variable || 'obj') +
              ') {\n' +
              (variable ? '' : 'obj || (obj = {});\n') +
              "var __t, __p = ''" +
              (isEscaping ? ', __e = _.escape' : '') +
              (isEvaluating
                ? ', __j = Array.prototype.join;\n' +
                  "function print() { __p += __j.call(arguments, '') }\n"
                : ';\n') +
              source +
              'return __p\n}'

            var result = attempt(function () {
              return Function(
                importsKeys,
                sourceURL + 'return ' + source
              ).apply(undefined, importsValues)
            })

            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source
            if (isError(result)) {
              throw result
            }
            return result
          }

          /**
           * Converts `string`, as a whole, to lower case just like
           * [String#toLowerCase](https://mdn.io/toLowerCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the lower cased string.
           * @example
           *
           * _.toLower('--Foo-Bar--');
           * // => '--foo-bar--'
           *
           * _.toLower('fooBar');
           * // => 'foobar'
           *
           * _.toLower('__FOO_BAR__');
           * // => '__foo_bar__'
           */
          function toLower(value) {
            return toString(value).toLowerCase()
          }

          /**
           * Converts `string`, as a whole, to upper case just like
           * [String#toUpperCase](https://mdn.io/toUpperCase).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.toUpper('--foo-bar--');
           * // => '--FOO-BAR--'
           *
           * _.toUpper('fooBar');
           * // => 'FOOBAR'
           *
           * _.toUpper('__foo_bar__');
           * // => '__FOO_BAR__'
           */
          function toUpper(value) {
            return toString(value).toUpperCase()
          }

          /**
           * Removes leading and trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trim('  abc  ');
           * // => 'abc'
           *
           * _.trim('-_-abc-_-', '_-');
           * // => 'abc'
           *
           * _.map(['  foo  ', '  bar  '], _.trim);
           * // => ['foo', 'bar']
           */
          function trim(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return string.replace(reTrim, '')
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              chrSymbols = stringToArray(chars),
              start = charsStartIndex(strSymbols, chrSymbols),
              end = charsEndIndex(strSymbols, chrSymbols) + 1

            return castSlice(strSymbols, start, end).join('')
          }

          /**
           * Removes trailing whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimEnd('  abc  ');
           * // => '  abc'
           *
           * _.trimEnd('-_-abc-_-', '_-');
           * // => '-_-abc'
           */
          function trimEnd(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return string.replace(reTrimEnd, '')
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              end = charsEndIndex(strSymbols, stringToArray(chars)) + 1

            return castSlice(strSymbols, 0, end).join('')
          }

          /**
           * Removes leading whitespace or specified characters from `string`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to trim.
           * @param {string} [chars=whitespace] The characters to trim.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {string} Returns the trimmed string.
           * @example
           *
           * _.trimStart('  abc  ');
           * // => 'abc  '
           *
           * _.trimStart('-_-abc-_-', '_-');
           * // => 'abc-_-'
           */
          function trimStart(string, chars, guard) {
            string = toString(string)
            if (string && (guard || chars === undefined)) {
              return string.replace(reTrimStart, '')
            }
            if (!string || !(chars = baseToString(chars))) {
              return string
            }
            var strSymbols = stringToArray(string),
              start = charsStartIndex(strSymbols, stringToArray(chars))

            return castSlice(strSymbols, start).join('')
          }

          /**
           * Truncates `string` if it's longer than the given maximum string length.
           * The last characters of the truncated string are replaced with the omission
           * string which defaults to "...".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to truncate.
           * @param {Object} [options={}] The options object.
           * @param {number} [options.length=30] The maximum string length.
           * @param {string} [options.omission='...'] The string to indicate text is omitted.
           * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
           * @returns {string} Returns the truncated string.
           * @example
           *
           * _.truncate('hi-diddly-ho there, neighborino');
           * // => 'hi-diddly-ho there, neighbo...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': ' '
           * });
           * // => 'hi-diddly-ho there,...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'length': 24,
           *   'separator': /,? +/
           * });
           * // => 'hi-diddly-ho there...'
           *
           * _.truncate('hi-diddly-ho there, neighborino', {
           *   'omission': ' [...]'
           * });
           * // => 'hi-diddly-ho there, neig [...]'
           */
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH,
              omission = DEFAULT_TRUNC_OMISSION

            if (isObject(options)) {
              var separator =
                'separator' in options ? options.separator : separator
              length = 'length' in options ? toInteger(options.length) : length
              omission =
                'omission' in options
                  ? baseToString(options.omission)
                  : omission
            }
            string = toString(string)

            var strLength = string.length
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string)
              strLength = strSymbols.length
            }
            if (length >= strLength) {
              return string
            }
            var end = length - stringSize(omission)
            if (end < 1) {
              return omission
            }
            var result = strSymbols
              ? castSlice(strSymbols, 0, end).join('')
              : string.slice(0, end)

            if (separator === undefined) {
              return result + omission
            }
            if (strSymbols) {
              end += result.length - end
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match,
                  substring = result

                if (!separator.global) {
                  separator = RegExp(
                    separator.source,
                    toString(reFlags.exec(separator)) + 'g'
                  )
                }
                separator.lastIndex = 0
                while ((match = separator.exec(substring))) {
                  var newEnd = match.index
                }
                result = result.slice(0, newEnd === undefined ? end : newEnd)
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result.lastIndexOf(separator)
              if (index > -1) {
                result = result.slice(0, index)
              }
            }
            return result + omission
          }

          /**
           * The inverse of `_.escape`; this method converts the HTML entities
           * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
           * their corresponding characters.
           *
           * **Note:** No other HTML entities are unescaped. To unescape additional
           * HTML entities use a third-party library like [_he_](https://mths.be/he).
           *
           * @static
           * @memberOf _
           * @since 0.6.0
           * @category String
           * @param {string} [string=''] The string to unescape.
           * @returns {string} Returns the unescaped string.
           * @example
           *
           * _.unescape('fred, barney, &amp; pebbles');
           * // => 'fred, barney, & pebbles'
           */
          function unescape(string) {
            string = toString(string)
            return string && reHasEscapedHtml.test(string)
              ? string.replace(reEscapedHtml, unescapeHtmlChar)
              : string
          }

          /**
           * Converts `string`, as space separated words, to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the upper cased string.
           * @example
           *
           * _.upperCase('--foo-bar');
           * // => 'FOO BAR'
           *
           * _.upperCase('fooBar');
           * // => 'FOO BAR'
           *
           * _.upperCase('__foo_bar__');
           * // => 'FOO BAR'
           */
          var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase()
          })

          /**
           * Converts the first character of `string` to upper case.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category String
           * @param {string} [string=''] The string to convert.
           * @returns {string} Returns the converted string.
           * @example
           *
           * _.upperFirst('fred');
           * // => 'Fred'
           *
           * _.upperFirst('FRED');
           * // => 'FRED'
           */
          var upperFirst = createCaseFirst('toUpperCase')

          /**
           * Splits `string` into an array of its words.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category String
           * @param {string} [string=''] The string to inspect.
           * @param {RegExp|string} [pattern] The pattern to match words.
           * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
           * @returns {Array} Returns the words of `string`.
           * @example
           *
           * _.words('fred, barney, & pebbles');
           * // => ['fred', 'barney', 'pebbles']
           *
           * _.words('fred, barney, & pebbles', /[^, ]+/g);
           * // => ['fred', 'barney', '&', 'pebbles']
           */
          function words(string, pattern, guard) {
            string = toString(string)
            pattern = guard ? undefined : pattern

            if (pattern === undefined) {
              return hasUnicodeWord(string)
                ? unicodeWords(string)
                : asciiWords(string)
            }
            return string.match(pattern) || []
          }

          /*------------------------------------------------------------------------*/

          /**
           * Attempts to invoke `func`, returning either the result or the caught error
           * object. Any additional arguments are provided to `func` when it's invoked.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Function} func The function to attempt.
           * @param {...*} [args] The arguments to invoke `func` with.
           * @returns {*} Returns the `func` result or error object.
           * @example
           *
           * // Avoid throwing errors for invalid selectors.
           * var elements = _.attempt(function(selector) {
           *   return document.querySelectorAll(selector);
           * }, '>_>');
           *
           * if (_.isError(elements)) {
           *   elements = [];
           * }
           */
          var attempt = baseRest(function (func, args) {
            try {
              return apply(func, undefined, args)
            } catch (e) {
              return isError(e) ? e : new Error(e)
            }
          })

          /**
           * Binds methods of an object to the object itself, overwriting the existing
           * method.
           *
           * **Note:** This method doesn't set the "length" property of bound functions.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Object} object The object to bind and assign the bound methods to.
           * @param {...(string|string[])} methodNames The object method names to bind.
           * @returns {Object} Returns `object`.
           * @example
           *
           * var view = {
           *   'label': 'docs',
           *   'click': function() {
           *     console.log('clicked ' + this.label);
           *   }
           * };
           *
           * _.bindAll(view, ['click']);
           * jQuery(element).on('click', view.click);
           * // => Logs 'clicked docs' when clicked.
           */
          var bindAll = flatRest(function (object, methodNames) {
            arrayEach(methodNames, function (key) {
              key = toKey(key)
              baseAssignValue(object, key, bind(object[key], object))
            })
            return object
          })

          /**
           * Creates a function that iterates over `pairs` and invokes the corresponding
           * function of the first predicate to return truthy. The predicate-function
           * pairs are invoked with the `this` binding and arguments of the created
           * function.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Array} pairs The predicate-function pairs.
           * @returns {Function} Returns the new composite function.
           * @example
           *
           * var func = _.cond([
           *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
           *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
           *   [_.stubTrue,                      _.constant('no match')]
           * ]);
           *
           * func({ 'a': 1, 'b': 2 });
           * // => 'matches A'
           *
           * func({ 'a': 0, 'b': 1 });
           * // => 'matches B'
           *
           * func({ 'a': '1', 'b': '2' });
           * // => 'no match'
           */
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length,
              toIteratee = getIteratee()

            pairs = !length
              ? []
              : arrayMap(pairs, function (pair) {
                  if (typeof pair[1] != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT)
                  }
                  return [toIteratee(pair[0]), pair[1]]
                })

            return baseRest(function (args) {
              var index = -1
              while (++index < length) {
                var pair = pairs[index]
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args)
                }
              }
            })
          }

          /**
           * Creates a function that invokes the predicate properties of `source` with
           * the corresponding property values of a given object, returning `true` if
           * all predicates return truthy, else `false`.
           *
           * **Note:** The created function is equivalent to `_.conformsTo` with
           * `source` partially applied.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {Object} source The object of property predicates to conform to.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 2, 'b': 1 },
           *   { 'a': 1, 'b': 2 }
           * ];
           *
           * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
           * // => [{ 'a': 1, 'b': 2 }]
           */
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that returns `value`.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {*} value The value to return from the new function.
           * @returns {Function} Returns the new constant function.
           * @example
           *
           * var objects = _.times(2, _.constant({ 'a': 1 }));
           *
           * console.log(objects);
           * // => [{ 'a': 1 }, { 'a': 1 }]
           *
           * console.log(objects[0] === objects[1]);
           * // => true
           */
          function constant(value) {
            return function () {
              return value
            }
          }

          /**
           * Checks `value` to determine whether a default value should be returned in
           * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
           * or `undefined`.
           *
           * @static
           * @memberOf _
           * @since 4.14.0
           * @category Util
           * @param {*} value The value to check.
           * @param {*} defaultValue The default value.
           * @returns {*} Returns the resolved value.
           * @example
           *
           * _.defaultTo(1, 10);
           * // => 1
           *
           * _.defaultTo(undefined, 10);
           * // => 10
           */
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value
          }

          /**
           * Creates a function that returns the result of invoking the given functions
           * with the `this` binding of the created function, where each successive
           * invocation is supplied the return value of the previous.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flowRight
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flow([_.add, square]);
           * addSquare(1, 2);
           * // => 9
           */
          var flow = createFlow()

          /**
           * This method is like `_.flow` except that it creates a function that
           * invokes the given functions from right to left.
           *
           * @static
           * @since 3.0.0
           * @memberOf _
           * @category Util
           * @param {...(Function|Function[])} [funcs] The functions to invoke.
           * @returns {Function} Returns the new composite function.
           * @see _.flow
           * @example
           *
           * function square(n) {
           *   return n * n;
           * }
           *
           * var addSquare = _.flowRight([square, _.add]);
           * addSquare(1, 2);
           * // => 9
           */
          var flowRight = createFlow(true)

          /**
           * This method returns the first argument it receives.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {*} value Any value.
           * @returns {*} Returns `value`.
           * @example
           *
           * var object = { 'a': 1 };
           *
           * console.log(_.identity(object) === object);
           * // => true
           */
          function identity(value) {
            return value
          }

          /**
           * Creates a function that invokes `func` with the arguments of the created
           * function. If `func` is a property name, the created function returns the
           * property value for a given element. If `func` is an array or object, the
           * created function returns `true` for elements that contain the equivalent
           * source properties, otherwise it returns `false`.
           *
           * @static
           * @since 4.0.0
           * @memberOf _
           * @category Util
           * @param {*} [func=_.identity] The value to convert to a callback.
           * @returns {Function} Returns the callback.
           * @example
           *
           * var users = [
           *   { 'user': 'barney', 'age': 36, 'active': true },
           *   { 'user': 'fred',   'age': 40, 'active': false }
           * ];
           *
           * // The `_.matches` iteratee shorthand.
           * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
           * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
           *
           * // The `_.matchesProperty` iteratee shorthand.
           * _.filter(users, _.iteratee(['user', 'fred']));
           * // => [{ 'user': 'fred', 'age': 40 }]
           *
           * // The `_.property` iteratee shorthand.
           * _.map(users, _.iteratee('user'));
           * // => ['barney', 'fred']
           *
           * // Create custom iteratee shorthands.
           * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
           *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
           *     return func.test(string);
           *   };
           * });
           *
           * _.filter(['abc', 'def'], /ef/);
           * // => ['def']
           */
          function iteratee(func) {
            return baseIteratee(
              typeof func == 'function'
                ? func
                : baseClone(func, CLONE_DEEP_FLAG)
            )
          }

          /**
           * Creates a function that performs a partial deep comparison between a given
           * object and `source`, returning `true` if the given object has equivalent
           * property values, else `false`.
           *
           * **Note:** The created function is equivalent to `_.isMatch` with `source`
           * partially applied.
           *
           * Partial comparisons will match empty array and empty object `source`
           * values against any array or object value, respectively. See `_.isEqual`
           * for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} source The object of property values to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
           * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG))
          }

          /**
           * Creates a function that performs a partial deep comparison between the
           * value at `path` of a given object to `srcValue`, returning `true` if the
           * object value is equivalent, else `false`.
           *
           * **Note:** Partial comparisons will match empty array and empty object
           * `srcValue` values against any array or object value, respectively. See
           * `_.isEqual` for a list of supported value comparisons.
           *
           * **Note:** Multiple values can be checked by combining several matchers
           * using `_.overSome`
           *
           * @static
           * @memberOf _
           * @since 3.2.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @param {*} srcValue The value to match.
           * @returns {Function} Returns the new spec function.
           * @example
           *
           * var objects = [
           *   { 'a': 1, 'b': 2, 'c': 3 },
           *   { 'a': 4, 'b': 5, 'c': 6 }
           * ];
           *
           * _.find(objects, _.matchesProperty('a', 4));
           * // => { 'a': 4, 'b': 5, 'c': 6 }
           *
           * // Checking for several possible values
           * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
           * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
           */
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(
              path,
              baseClone(srcValue, CLONE_DEEP_FLAG)
            )
          }

          /**
           * Creates a function that invokes the method at `path` of a given object.
           * Any additional arguments are provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Array|string} path The path of the method to invoke.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': _.constant(2) } },
           *   { 'a': { 'b': _.constant(1) } }
           * ];
           *
           * _.map(objects, _.method('a.b'));
           * // => [2, 1]
           *
           * _.map(objects, _.method(['a', 'b']));
           * // => [2, 1]
           */
          var method = baseRest(function (path, args) {
            return function (object) {
              return baseInvoke(object, path, args)
            }
          })

          /**
           * The opposite of `_.method`; this method creates a function that invokes
           * the method at a given path of `object`. Any additional arguments are
           * provided to the invoked method.
           *
           * @static
           * @memberOf _
           * @since 3.7.0
           * @category Util
           * @param {Object} object The object to query.
           * @param {...*} [args] The arguments to invoke the method with.
           * @returns {Function} Returns the new invoker function.
           * @example
           *
           * var array = _.times(3, _.constant),
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.methodOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
           * // => [2, 0]
           */
          var methodOf = baseRest(function (object, args) {
            return function (path) {
              return baseInvoke(object, path, args)
            }
          })

          /**
           * Adds all own enumerable string keyed function properties of a source
           * object to the destination object. If `object` is a function, then methods
           * are added to its prototype as well.
           *
           * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
           * avoid conflicts caused by modifying the original.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {Function|Object} [object=lodash] The destination object.
           * @param {Object} source The object of functions to add.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
           * @returns {Function|Object} Returns `object`.
           * @example
           *
           * function vowels(string) {
           *   return _.filter(string, function(v) {
           *     return /[aeiou]/i.test(v);
           *   });
           * }
           *
           * _.mixin({ 'vowels': vowels });
           * _.vowels('fred');
           * // => ['e']
           *
           * _('fred').vowels().value();
           * // => ['e']
           *
           * _.mixin({ 'vowels': vowels }, { 'chain': false });
           * _('fred').vowels();
           * // => ['e']
           */
          function mixin(object, source, options) {
            var props = keys(source),
              methodNames = baseFunctions(source, props)

            if (
              options == null &&
              !(isObject(source) && (methodNames.length || !props.length))
            ) {
              options = source
              source = object
              object = this
              methodNames = baseFunctions(source, keys(source))
            }
            var chain =
                !(isObject(options) && 'chain' in options) || !!options.chain,
              isFunc = isFunction(object)

            arrayEach(methodNames, function (methodName) {
              var func = source[methodName]
              object[methodName] = func
              if (isFunc) {
                object.prototype[methodName] = function () {
                  var chainAll = this.__chain__
                  if (chain || chainAll) {
                    var result = object(this.__wrapped__),
                      actions = (result.__actions__ = copyArray(
                        this.__actions__
                      ))

                    actions.push({
                      func: func,
                      args: arguments,
                      thisArg: object,
                    })
                    result.__chain__ = chainAll
                    return result
                  }
                  return func.apply(
                    object,
                    arrayPush([this.value()], arguments)
                  )
                }
              }
            })

            return object
          }

          /**
           * Reverts the `_` variable to its previous value and returns a reference to
           * the `lodash` function.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @returns {Function} Returns the `lodash` function.
           * @example
           *
           * var lodash = _.noConflict();
           */
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash
            }
            return this
          }

          /**
           * This method returns `undefined`.
           *
           * @static
           * @memberOf _
           * @since 2.3.0
           * @category Util
           * @example
           *
           * _.times(2, _.noop);
           * // => [undefined, undefined]
           */
          function noop() {
            // No operation performed.
          }

          /**
           * Creates a function that gets the argument at index `n`. If `n` is negative,
           * the nth argument from the end is returned.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [n=0] The index of the argument to return.
           * @returns {Function} Returns the new pass-thru function.
           * @example
           *
           * var func = _.nthArg(1);
           * func('a', 'b', 'c', 'd');
           * // => 'b'
           *
           * var func = _.nthArg(-2);
           * func('a', 'b', 'c', 'd');
           * // => 'c'
           */
          function nthArg(n) {
            n = toInteger(n)
            return baseRest(function (args) {
              return baseNth(args, n)
            })
          }

          /**
           * Creates a function that invokes `iteratees` with the arguments it receives
           * and returns their results.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [iteratees=[_.identity]]
           *  The iteratees to invoke.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.over([Math.max, Math.min]);
           *
           * func(1, 2, 3, 4);
           * // => [4, 1]
           */
          var over = createOver(arrayMap)

          /**
           * Creates a function that checks if **all** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overEvery([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => false
           *
           * func(NaN);
           * // => false
           */
          var overEvery = createOver(arrayEvery)

          /**
           * Creates a function that checks if **any** of the `predicates` return
           * truthy when invoked with the arguments it receives.
           *
           * Following shorthands are possible for providing predicates.
           * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
           * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {...(Function|Function[])} [predicates=[_.identity]]
           *  The predicates to check.
           * @returns {Function} Returns the new function.
           * @example
           *
           * var func = _.overSome([Boolean, isFinite]);
           *
           * func('1');
           * // => true
           *
           * func(null);
           * // => true
           *
           * func(NaN);
           * // => false
           *
           * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
           * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
           */
          var overSome = createOver(arraySome)

          /**
           * Creates a function that returns the value at `path` of a given object.
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Util
           * @param {Array|string} path The path of the property to get.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var objects = [
           *   { 'a': { 'b': 2 } },
           *   { 'a': { 'b': 1 } }
           * ];
           *
           * _.map(objects, _.property('a.b'));
           * // => [2, 1]
           *
           * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
           * // => [1, 2]
           */
          function property(path) {
            return isKey(path)
              ? baseProperty(toKey(path))
              : basePropertyDeep(path)
          }

          /**
           * The opposite of `_.property`; this method creates a function that returns
           * the value at a given path of `object`.
           *
           * @static
           * @memberOf _
           * @since 3.0.0
           * @category Util
           * @param {Object} object The object to query.
           * @returns {Function} Returns the new accessor function.
           * @example
           *
           * var array = [0, 1, 2],
           *     object = { 'a': array, 'b': array, 'c': array };
           *
           * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
           * // => [2, 0]
           *
           * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
           * // => [2, 0]
           */
          function propertyOf(object) {
            return function (path) {
              return object == null ? undefined : baseGet(object, path)
            }
          }

          /**
           * Creates an array of numbers (positive and/or negative) progressing from
           * `start` up to, but not including, `end`. A step of `-1` is used if a negative
           * `start` is specified without an `end` or `step`. If `end` is not specified,
           * it's set to `start` with `start` then set to `0`.
           *
           * **Note:** JavaScript follows the IEEE-754 standard for resolving
           * floating-point values which can produce unexpected results.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.rangeRight
           * @example
           *
           * _.range(4);
           * // => [0, 1, 2, 3]
           *
           * _.range(-4);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 5);
           * // => [1, 2, 3, 4]
           *
           * _.range(0, 20, 5);
           * // => [0, 5, 10, 15]
           *
           * _.range(0, -4, -1);
           * // => [0, -1, -2, -3]
           *
           * _.range(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.range(0);
           * // => []
           */
          var range = createRange()

          /**
           * This method is like `_.range` except that it populates values in
           * descending order.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {number} [start=0] The start of the range.
           * @param {number} end The end of the range.
           * @param {number} [step=1] The value to increment or decrement by.
           * @returns {Array} Returns the range of numbers.
           * @see _.inRange, _.range
           * @example
           *
           * _.rangeRight(4);
           * // => [3, 2, 1, 0]
           *
           * _.rangeRight(-4);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 5);
           * // => [4, 3, 2, 1]
           *
           * _.rangeRight(0, 20, 5);
           * // => [15, 10, 5, 0]
           *
           * _.rangeRight(0, -4, -1);
           * // => [-3, -2, -1, 0]
           *
           * _.rangeRight(1, 4, 0);
           * // => [1, 1, 1]
           *
           * _.rangeRight(0);
           * // => []
           */
          var rangeRight = createRange(true)

          /**
           * This method returns a new empty array.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Array} Returns the new empty array.
           * @example
           *
           * var arrays = _.times(2, _.stubArray);
           *
           * console.log(arrays);
           * // => [[], []]
           *
           * console.log(arrays[0] === arrays[1]);
           * // => false
           */
          function stubArray() {
            return []
          }

          /**
           * This method returns `false`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `false`.
           * @example
           *
           * _.times(2, _.stubFalse);
           * // => [false, false]
           */
          function stubFalse() {
            return false
          }

          /**
           * This method returns a new empty object.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {Object} Returns the new empty object.
           * @example
           *
           * var objects = _.times(2, _.stubObject);
           *
           * console.log(objects);
           * // => [{}, {}]
           *
           * console.log(objects[0] === objects[1]);
           * // => false
           */
          function stubObject() {
            return {}
          }

          /**
           * This method returns an empty string.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {string} Returns the empty string.
           * @example
           *
           * _.times(2, _.stubString);
           * // => ['', '']
           */
          function stubString() {
            return ''
          }

          /**
           * This method returns `true`.
           *
           * @static
           * @memberOf _
           * @since 4.13.0
           * @category Util
           * @returns {boolean} Returns `true`.
           * @example
           *
           * _.times(2, _.stubTrue);
           * // => [true, true]
           */
          function stubTrue() {
            return true
          }

          /**
           * Invokes the iteratee `n` times, returning an array of the results of
           * each invocation. The iteratee is invoked with one argument; (index).
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {number} n The number of times to invoke `iteratee`.
           * @param {Function} [iteratee=_.identity] The function invoked per iteration.
           * @returns {Array} Returns the array of results.
           * @example
           *
           * _.times(3, String);
           * // => ['0', '1', '2']
           *
           *  _.times(4, _.constant(0));
           * // => [0, 0, 0, 0]
           */
          function times(n, iteratee) {
            n = toInteger(n)
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return []
            }
            var index = MAX_ARRAY_LENGTH,
              length = nativeMin(n, MAX_ARRAY_LENGTH)

            iteratee = getIteratee(iteratee)
            n -= MAX_ARRAY_LENGTH

            var result = baseTimes(length, iteratee)
            while (++index < n) {
              iteratee(index)
            }
            return result
          }

          /**
           * Converts `value` to a property path array.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Util
           * @param {*} value The value to convert.
           * @returns {Array} Returns the new property path array.
           * @example
           *
           * _.toPath('a.b.c');
           * // => ['a', 'b', 'c']
           *
           * _.toPath('a[0].b.c');
           * // => ['a', '0', 'b', 'c']
           */
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey)
            }
            return isSymbol(value)
              ? [value]
              : copyArray(stringToPath(toString(value)))
          }

          /**
           * Generates a unique ID. If `prefix` is given, the ID is appended to it.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Util
           * @param {string} [prefix=''] The value to prefix the ID with.
           * @returns {string} Returns the unique ID.
           * @example
           *
           * _.uniqueId('contact_');
           * // => 'contact_104'
           *
           * _.uniqueId();
           * // => '105'
           */
          function uniqueId(prefix) {
            var id = ++idCounter
            return toString(prefix) + id
          }

          /*------------------------------------------------------------------------*/

          /**
           * Adds two numbers.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {number} augend The first number in an addition.
           * @param {number} addend The second number in an addition.
           * @returns {number} Returns the total.
           * @example
           *
           * _.add(6, 4);
           * // => 10
           */
          var add = createMathOperation(function (augend, addend) {
            return augend + addend
          }, 0)

          /**
           * Computes `number` rounded up to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round up.
           * @param {number} [precision=0] The precision to round up to.
           * @returns {number} Returns the rounded up number.
           * @example
           *
           * _.ceil(4.006);
           * // => 5
           *
           * _.ceil(6.004, 2);
           * // => 6.01
           *
           * _.ceil(6040, -2);
           * // => 6100
           */
          var ceil = createRound('ceil')

          /**
           * Divide two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} dividend The first number in a division.
           * @param {number} divisor The second number in a division.
           * @returns {number} Returns the quotient.
           * @example
           *
           * _.divide(6, 4);
           * // => 1.5
           */
          var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor
          }, 1)

          /**
           * Computes `number` rounded down to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round down.
           * @param {number} [precision=0] The precision to round down to.
           * @returns {number} Returns the rounded down number.
           * @example
           *
           * _.floor(4.006);
           * // => 4
           *
           * _.floor(0.046, 2);
           * // => 0.04
           *
           * _.floor(4060, -2);
           * // => 4000
           */
          var floor = createRound('floor')

          /**
           * Computes the maximum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * _.max([4, 2, 8, 6]);
           * // => 8
           *
           * _.max([]);
           * // => undefined
           */
          function max(array) {
            return array && array.length
              ? baseExtremum(array, identity, baseGt)
              : undefined
          }

          /**
           * This method is like `_.max` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the maximum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.maxBy(objects, function(o) { return o.n; });
           * // => { 'n': 2 }
           *
           * // The `_.property` iteratee shorthand.
           * _.maxBy(objects, 'n');
           * // => { 'n': 2 }
           */
          function maxBy(array, iteratee) {
            return array && array.length
              ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
              : undefined
          }

          /**
           * Computes the mean of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the mean.
           * @example
           *
           * _.mean([4, 2, 8, 6]);
           * // => 5
           */
          function mean(array) {
            return baseMean(array, identity)
          }

          /**
           * This method is like `_.mean` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be averaged.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the mean.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.meanBy(objects, function(o) { return o.n; });
           * // => 5
           *
           * // The `_.property` iteratee shorthand.
           * _.meanBy(objects, 'n');
           * // => 5
           */
          function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2))
          }

          /**
           * Computes the minimum value of `array`. If `array` is empty or falsey,
           * `undefined` is returned.
           *
           * @static
           * @since 0.1.0
           * @memberOf _
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * _.min([4, 2, 8, 6]);
           * // => 2
           *
           * _.min([]);
           * // => undefined
           */
          function min(array) {
            return array && array.length
              ? baseExtremum(array, identity, baseLt)
              : undefined
          }

          /**
           * This method is like `_.min` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the criterion by which
           * the value is ranked. The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {*} Returns the minimum value.
           * @example
           *
           * var objects = [{ 'n': 1 }, { 'n': 2 }];
           *
           * _.minBy(objects, function(o) { return o.n; });
           * // => { 'n': 1 }
           *
           * // The `_.property` iteratee shorthand.
           * _.minBy(objects, 'n');
           * // => { 'n': 1 }
           */
          function minBy(array, iteratee) {
            return array && array.length
              ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
              : undefined
          }

          /**
           * Multiply two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.7.0
           * @category Math
           * @param {number} multiplier The first number in a multiplication.
           * @param {number} multiplicand The second number in a multiplication.
           * @returns {number} Returns the product.
           * @example
           *
           * _.multiply(6, 4);
           * // => 24
           */
          var multiply = createMathOperation(function (
            multiplier,
            multiplicand
          ) {
            return multiplier * multiplicand
          },
          1)

          /**
           * Computes `number` rounded to `precision`.
           *
           * @static
           * @memberOf _
           * @since 3.10.0
           * @category Math
           * @param {number} number The number to round.
           * @param {number} [precision=0] The precision to round to.
           * @returns {number} Returns the rounded number.
           * @example
           *
           * _.round(4.006);
           * // => 4
           *
           * _.round(4.006, 2);
           * // => 4.01
           *
           * _.round(4060, -2);
           * // => 4100
           */
          var round = createRound('round')

          /**
           * Subtract two numbers.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {number} minuend The first number in a subtraction.
           * @param {number} subtrahend The second number in a subtraction.
           * @returns {number} Returns the difference.
           * @example
           *
           * _.subtract(6, 4);
           * // => 2
           */
          var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend
          }, 0)

          /**
           * Computes the sum of the values in `array`.
           *
           * @static
           * @memberOf _
           * @since 3.4.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @returns {number} Returns the sum.
           * @example
           *
           * _.sum([4, 2, 8, 6]);
           * // => 20
           */
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0
          }

          /**
           * This method is like `_.sum` except that it accepts `iteratee` which is
           * invoked for each element in `array` to generate the value to be summed.
           * The iteratee is invoked with one argument: (value).
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Math
           * @param {Array} array The array to iterate over.
           * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
           * @returns {number} Returns the sum.
           * @example
           *
           * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
           *
           * _.sumBy(objects, function(o) { return o.n; });
           * // => 20
           *
           * // The `_.property` iteratee shorthand.
           * _.sumBy(objects, 'n');
           * // => 20
           */
          function sumBy(array, iteratee) {
            return array && array.length
              ? baseSum(array, getIteratee(iteratee, 2))
              : 0
          }

          /*------------------------------------------------------------------------*/

          // Add methods that return wrapped values in chain sequences.
          lodash.after = after
          lodash.ary = ary
          lodash.assign = assign
          lodash.assignIn = assignIn
          lodash.assignInWith = assignInWith
          lodash.assignWith = assignWith
          lodash.at = at
          lodash.before = before
          lodash.bind = bind
          lodash.bindAll = bindAll
          lodash.bindKey = bindKey
          lodash.castArray = castArray
          lodash.chain = chain
          lodash.chunk = chunk
          lodash.compact = compact
          lodash.concat = concat
          lodash.cond = cond
          lodash.conforms = conforms
          lodash.constant = constant
          lodash.countBy = countBy
          lodash.create = create
          lodash.curry = curry
          lodash.curryRight = curryRight
          lodash.debounce = debounce
          lodash.defaults = defaults
          lodash.defaultsDeep = defaultsDeep
          lodash.defer = defer
          lodash.delay = delay
          lodash.difference = difference
          lodash.differenceBy = differenceBy
          lodash.differenceWith = differenceWith
          lodash.drop = drop
          lodash.dropRight = dropRight
          lodash.dropRightWhile = dropRightWhile
          lodash.dropWhile = dropWhile
          lodash.fill = fill
          lodash.filter = filter
          lodash.flatMap = flatMap
          lodash.flatMapDeep = flatMapDeep
          lodash.flatMapDepth = flatMapDepth
          lodash.flatten = flatten
          lodash.flattenDeep = flattenDeep
          lodash.flattenDepth = flattenDepth
          lodash.flip = flip
          lodash.flow = flow
          lodash.flowRight = flowRight
          lodash.fromPairs = fromPairs
          lodash.functions = functions
          lodash.functionsIn = functionsIn
          lodash.groupBy = groupBy
          lodash.initial = initial
          lodash.intersection = intersection
          lodash.intersectionBy = intersectionBy
          lodash.intersectionWith = intersectionWith
          lodash.invert = invert
          lodash.invertBy = invertBy
          lodash.invokeMap = invokeMap
          lodash.iteratee = iteratee
          lodash.keyBy = keyBy
          lodash.keys = keys
          lodash.keysIn = keysIn
          lodash.map = map
          lodash.mapKeys = mapKeys
          lodash.mapValues = mapValues
          lodash.matches = matches
          lodash.matchesProperty = matchesProperty
          lodash.memoize = memoize
          lodash.merge = merge
          lodash.mergeWith = mergeWith
          lodash.method = method
          lodash.methodOf = methodOf
          lodash.mixin = mixin
          lodash.negate = negate
          lodash.nthArg = nthArg
          lodash.omit = omit
          lodash.omitBy = omitBy
          lodash.once = once
          lodash.orderBy = orderBy
          lodash.over = over
          lodash.overArgs = overArgs
          lodash.overEvery = overEvery
          lodash.overSome = overSome
          lodash.partial = partial
          lodash.partialRight = partialRight
          lodash.partition = partition
          lodash.pick = pick
          lodash.pickBy = pickBy
          lodash.property = property
          lodash.propertyOf = propertyOf
          lodash.pull = pull
          lodash.pullAll = pullAll
          lodash.pullAllBy = pullAllBy
          lodash.pullAllWith = pullAllWith
          lodash.pullAt = pullAt
          lodash.range = range
          lodash.rangeRight = rangeRight
          lodash.rearg = rearg
          lodash.reject = reject
          lodash.remove = remove
          lodash.rest = rest
          lodash.reverse = reverse
          lodash.sampleSize = sampleSize
          lodash.set = set
          lodash.setWith = setWith
          lodash.shuffle = shuffle
          lodash.slice = slice
          lodash.sortBy = sortBy
          lodash.sortedUniq = sortedUniq
          lodash.sortedUniqBy = sortedUniqBy
          lodash.split = split
          lodash.spread = spread
          lodash.tail = tail
          lodash.take = take
          lodash.takeRight = takeRight
          lodash.takeRightWhile = takeRightWhile
          lodash.takeWhile = takeWhile
          lodash.tap = tap
          lodash.throttle = throttle
          lodash.thru = thru
          lodash.toArray = toArray
          lodash.toPairs = toPairs
          lodash.toPairsIn = toPairsIn
          lodash.toPath = toPath
          lodash.toPlainObject = toPlainObject
          lodash.transform = transform
          lodash.unary = unary
          lodash.union = union
          lodash.unionBy = unionBy
          lodash.unionWith = unionWith
          lodash.uniq = uniq
          lodash.uniqBy = uniqBy
          lodash.uniqWith = uniqWith
          lodash.unset = unset
          lodash.unzip = unzip
          lodash.unzipWith = unzipWith
          lodash.update = update
          lodash.updateWith = updateWith
          lodash.values = values
          lodash.valuesIn = valuesIn
          lodash.without = without
          lodash.words = words
          lodash.wrap = wrap
          lodash.xor = xor
          lodash.xorBy = xorBy
          lodash.xorWith = xorWith
          lodash.zip = zip
          lodash.zipObject = zipObject
          lodash.zipObjectDeep = zipObjectDeep
          lodash.zipWith = zipWith

          // Add aliases.
          lodash.entries = toPairs
          lodash.entriesIn = toPairsIn
          lodash.extend = assignIn
          lodash.extendWith = assignInWith

          // Add methods to `lodash.prototype`.
          mixin(lodash, lodash)

          /*------------------------------------------------------------------------*/

          // Add methods that return unwrapped values in chain sequences.
          lodash.add = add
          lodash.attempt = attempt
          lodash.camelCase = camelCase
          lodash.capitalize = capitalize
          lodash.ceil = ceil
          lodash.clamp = clamp
          lodash.clone = clone
          lodash.cloneDeep = cloneDeep
          lodash.cloneDeepWith = cloneDeepWith
          lodash.cloneWith = cloneWith
          lodash.conformsTo = conformsTo
          lodash.deburr = deburr
          lodash.defaultTo = defaultTo
          lodash.divide = divide
          lodash.endsWith = endsWith
          lodash.eq = eq
          lodash.escape = escape
          lodash.escapeRegExp = escapeRegExp
          lodash.every = every
          lodash.find = find
          lodash.findIndex = findIndex
          lodash.findKey = findKey
          lodash.findLast = findLast
          lodash.findLastIndex = findLastIndex
          lodash.findLastKey = findLastKey
          lodash.floor = floor
          lodash.forEach = forEach
          lodash.forEachRight = forEachRight
          lodash.forIn = forIn
          lodash.forInRight = forInRight
          lodash.forOwn = forOwn
          lodash.forOwnRight = forOwnRight
          lodash.get = get
          lodash.gt = gt
          lodash.gte = gte
          lodash.has = has
          lodash.hasIn = hasIn
          lodash.head = head
          lodash.identity = identity
          lodash.includes = includes
          lodash.indexOf = indexOf
          lodash.inRange = inRange
          lodash.invoke = invoke
          lodash.isArguments = isArguments
          lodash.isArray = isArray
          lodash.isArrayBuffer = isArrayBuffer
          lodash.isArrayLike = isArrayLike
          lodash.isArrayLikeObject = isArrayLikeObject
          lodash.isBoolean = isBoolean
          lodash.isBuffer = isBuffer
          lodash.isDate = isDate
          lodash.isElement = isElement
          lodash.isEmpty = isEmpty
          lodash.isEqual = isEqual
          lodash.isEqualWith = isEqualWith
          lodash.isError = isError
          lodash.isFinite = isFinite
          lodash.isFunction = isFunction
          lodash.isInteger = isInteger
          lodash.isLength = isLength
          lodash.isMap = isMap
          lodash.isMatch = isMatch
          lodash.isMatchWith = isMatchWith
          lodash.isNaN = isNaN
          lodash.isNative = isNative
          lodash.isNil = isNil
          lodash.isNull = isNull
          lodash.isNumber = isNumber
          lodash.isObject = isObject
          lodash.isObjectLike = isObjectLike
          lodash.isPlainObject = isPlainObject
          lodash.isRegExp = isRegExp
          lodash.isSafeInteger = isSafeInteger
          lodash.isSet = isSet
          lodash.isString = isString
          lodash.isSymbol = isSymbol
          lodash.isTypedArray = isTypedArray
          lodash.isUndefined = isUndefined
          lodash.isWeakMap = isWeakMap
          lodash.isWeakSet = isWeakSet
          lodash.join = join
          lodash.kebabCase = kebabCase
          lodash.last = last
          lodash.lastIndexOf = lastIndexOf
          lodash.lowerCase = lowerCase
          lodash.lowerFirst = lowerFirst
          lodash.lt = lt
          lodash.lte = lte
          lodash.max = max
          lodash.maxBy = maxBy
          lodash.mean = mean
          lodash.meanBy = meanBy
          lodash.min = min
          lodash.minBy = minBy
          lodash.stubArray = stubArray
          lodash.stubFalse = stubFalse
          lodash.stubObject = stubObject
          lodash.stubString = stubString
          lodash.stubTrue = stubTrue
          lodash.multiply = multiply
          lodash.nth = nth
          lodash.noConflict = noConflict
          lodash.noop = noop
          lodash.now = now
          lodash.pad = pad
          lodash.padEnd = padEnd
          lodash.padStart = padStart
          lodash.parseInt = parseInt
          lodash.random = random
          lodash.reduce = reduce
          lodash.reduceRight = reduceRight
          lodash.repeat = repeat
          lodash.replace = replace
          lodash.result = result
          lodash.round = round
          lodash.runInContext = runInContext
          lodash.sample = sample
          lodash.size = size
          lodash.snakeCase = snakeCase
          lodash.some = some
          lodash.sortedIndex = sortedIndex
          lodash.sortedIndexBy = sortedIndexBy
          lodash.sortedIndexOf = sortedIndexOf
          lodash.sortedLastIndex = sortedLastIndex
          lodash.sortedLastIndexBy = sortedLastIndexBy
          lodash.sortedLastIndexOf = sortedLastIndexOf
          lodash.startCase = startCase
          lodash.startsWith = startsWith
          lodash.subtract = subtract
          lodash.sum = sum
          lodash.sumBy = sumBy
          lodash.template = template
          lodash.times = times
          lodash.toFinite = toFinite
          lodash.toInteger = toInteger
          lodash.toLength = toLength
          lodash.toLower = toLower
          lodash.toNumber = toNumber
          lodash.toSafeInteger = toSafeInteger
          lodash.toString = toString
          lodash.toUpper = toUpper
          lodash.trim = trim
          lodash.trimEnd = trimEnd
          lodash.trimStart = trimStart
          lodash.truncate = truncate
          lodash.unescape = unescape
          lodash.uniqueId = uniqueId
          lodash.upperCase = upperCase
          lodash.upperFirst = upperFirst

          // Add aliases.
          lodash.each = forEach
          lodash.eachRight = forEachRight
          lodash.first = head

          mixin(
            lodash,
            (function () {
              var source = {}
              baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                  source[methodName] = func
                }
              })
              return source
            })(),
            { chain: false }
          )

          /*------------------------------------------------------------------------*/

          /**
           * The semantic version number.
           *
           * @static
           * @memberOf _
           * @type {string}
           */
          lodash.VERSION = VERSION

          // Assign default placeholders.
          arrayEach(
            [
              'bind',
              'bindKey',
              'curry',
              'curryRight',
              'partial',
              'partialRight',
            ],
            function (methodName) {
              lodash[methodName].placeholder = lodash
            }
          )

          // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
          arrayEach(['drop', 'take'], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
              n = n === undefined ? 1 : nativeMax(toInteger(n), 0)

              var result =
                this.__filtered__ && !index
                  ? new LazyWrapper(this)
                  : this.clone()

              if (result.__filtered__) {
                result.__takeCount__ = nativeMin(n, result.__takeCount__)
              } else {
                result.__views__.push({
                  size: nativeMin(n, MAX_ARRAY_LENGTH),
                  type: methodName + (result.__dir__ < 0 ? 'Right' : ''),
                })
              }
              return result
            }

            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
              return this.reverse()[methodName](n).reverse()
            }
          })

          // Add `LazyWrapper` methods that accept an `iteratee` value.
          arrayEach(
            ['filter', 'map', 'takeWhile'],
            function (methodName, index) {
              var type = index + 1,
                isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG

              LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone()
                result.__iteratees__.push({
                  iteratee: getIteratee(iteratee, 3),
                  type: type,
                })
                result.__filtered__ = result.__filtered__ || isFilter
                return result
              }
            }
          )

          // Add `LazyWrapper` methods for `_.head` and `_.last`.
          arrayEach(['head', 'last'], function (methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '')

            LazyWrapper.prototype[methodName] = function () {
              return this[takeName](1).value()[0]
            }
          })

          // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
          arrayEach(['initial', 'tail'], function (methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right')

            LazyWrapper.prototype[methodName] = function () {
              return this.__filtered__
                ? new LazyWrapper(this)
                : this[dropName](1)
            }
          })

          LazyWrapper.prototype.compact = function () {
            return this.filter(identity)
          }

          LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head()
          }

          LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate)
          }

          LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
            if (typeof path == 'function') {
              return new LazyWrapper(this)
            }
            return this.map(function (value) {
              return baseInvoke(value, path, args)
            })
          })

          LazyWrapper.prototype.reject = function (predicate) {
            return this.filter(negate(getIteratee(predicate)))
          }

          LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start)

            var result = this
            if (result.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result)
            }
            if (start < 0) {
              result = result.takeRight(-start)
            } else if (start) {
              result = result.drop(start)
            }
            if (end !== undefined) {
              end = toInteger(end)
              result =
                end < 0 ? result.dropRight(-end) : result.take(end - start)
            }
            return result
          }

          LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse()
          }

          LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH)
          }

          // Add `LazyWrapper` methods to `lodash.prototype`.
          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(
                methodName
              ),
              isTaker = /^(?:head|last)$/.test(methodName),
              lodashFunc =
                lodash[
                  isTaker
                    ? 'take' + (methodName == 'last' ? 'Right' : '')
                    : methodName
                ],
              retUnwrapped = isTaker || /^find/.test(methodName)

            if (!lodashFunc) {
              return
            }
            lodash.prototype[methodName] = function () {
              var value = this.__wrapped__,
                args = isTaker ? [1] : arguments,
                isLazy = value instanceof LazyWrapper,
                iteratee = args[0],
                useLazy = isLazy || isArray(value)

              var interceptor = function (value) {
                var result = lodashFunc.apply(lodash, arrayPush([value], args))
                return isTaker && chainAll ? result[0] : result
              }

              if (
                useLazy &&
                checkIteratee &&
                typeof iteratee == 'function' &&
                iteratee.length != 1
              ) {
                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false
              }
              var chainAll = this.__chain__,
                isHybrid = !!this.__actions__.length,
                isUnwrapped = retUnwrapped && !chainAll,
                onlyLazy = isLazy && !isHybrid

              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this)
                var result = func.apply(value, args)
                result.__actions__.push({
                  func: thru,
                  args: [interceptor],
                  thisArg: undefined,
                })
                return new LodashWrapper(result, chainAll)
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args)
              }
              result = this.thru(interceptor)
              return isUnwrapped
                ? isTaker
                  ? result.value()[0]
                  : result.value()
                : result
            }
          })

          // Add `Array` methods to `lodash.prototype`.
          arrayEach(
            ['pop', 'push', 'shift', 'sort', 'splice', 'unshift'],
            function (methodName) {
              var func = arrayProto[methodName],
                chainName = /^(?:push|sort|unshift)$/.test(methodName)
                  ? 'tap'
                  : 'thru',
                retUnwrapped = /^(?:pop|shift)$/.test(methodName)

              lodash.prototype[methodName] = function () {
                var args = arguments
                if (retUnwrapped && !this.__chain__) {
                  var value = this.value()
                  return func.apply(isArray(value) ? value : [], args)
                }
                return this[chainName](function (value) {
                  return func.apply(isArray(value) ? value : [], args)
                })
              }
            }
          )

          // Map minified method names to their real names.
          baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName]
            if (lodashFunc) {
              var key = lodashFunc.name + ''
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = []
              }
              realNames[key].push({ name: methodName, func: lodashFunc })
            }
          })

          realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
              name: 'wrapper',
              func: undefined,
            },
          ]

          // Add methods to `LazyWrapper`.
          LazyWrapper.prototype.clone = lazyClone
          LazyWrapper.prototype.reverse = lazyReverse
          LazyWrapper.prototype.value = lazyValue

          // Add chain sequence methods to the `lodash` wrapper.
          lodash.prototype.at = wrapperAt
          lodash.prototype.chain = wrapperChain
          lodash.prototype.commit = wrapperCommit
          lodash.prototype.next = wrapperNext
          lodash.prototype.plant = wrapperPlant
          lodash.prototype.reverse = wrapperReverse
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue

          // Add lazy aliases.
          lodash.prototype.first = lodash.prototype.head

          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator
          }
          return lodash
        }

        /*--------------------------------------------------------------------------*/

        // Export lodash.
        var _ = runInContext()

        // Some AMD build optimizers, like r.js, check for condition patterns like:
        if (
          typeof define == 'function' &&
          typeof define.amd == 'object' &&
          define.amd
        ) {
          // Expose Lodash on the global object to prevent errors when Lodash is
          // loaded by a script tag in the presence of an AMD loader.
          // See http://requirejs.org/docs/errors.html#mismatch for more details.
          // Use `_.noConflict` to remove Lodash from the global object.
          root._ = _

          // Define as an anonymous module so, through path mapping, it can be
          // referenced as the "underscore" module.
          define(function () {
            return _
          })
        }
        // Check for `exports` after `define` in case a build optimizer adds it.
        else if (freeModule) {
          // Export for Node.js.
          ;(freeModule.exports = _)._ = _
          // Export for CommonJS support.
          freeExports._ = _
        } else {
          // Export to the global object.
          root._ = _
        }
      }.call(this))

      /***/
    },

    /***/ 5871: /***/ (module) => {
      module.exports = function (args, opts) {
        if (!opts) opts = {}

        var flags = { bools: {}, strings: {}, unknownFn: null }

        if (typeof opts['unknown'] === 'function') {
          flags.unknownFn = opts['unknown']
        }

        if (typeof opts['boolean'] === 'boolean' && opts['boolean']) {
          flags.allBools = true
        } else {
          ;[]
            .concat(opts['boolean'])
            .filter(Boolean)
            .forEach(function (key) {
              flags.bools[key] = true
            })
        }

        var aliases = {}
        Object.keys(opts.alias || {}).forEach(function (key) {
          aliases[key] = [].concat(opts.alias[key])
          aliases[key].forEach(function (x) {
            aliases[x] = [key].concat(
              aliases[key].filter(function (y) {
                return x !== y
              })
            )
          })
        })

        ;[]
          .concat(opts.string)
          .filter(Boolean)
          .forEach(function (key) {
            flags.strings[key] = true
            if (aliases[key]) {
              flags.strings[aliases[key]] = true
            }
          })

        var defaults = opts['default'] || {}

        var argv = { _: [] }
        Object.keys(flags.bools).forEach(function (key) {
          setArg(key, defaults[key] === undefined ? false : defaults[key])
        })

        var notFlags = []

        if (args.indexOf('--') !== -1) {
          notFlags = args.slice(args.indexOf('--') + 1)
          args = args.slice(0, args.indexOf('--'))
        }

        function argDefined(key, arg) {
          return (
            (flags.allBools && /^--[^=]+$/.test(arg)) ||
            flags.strings[key] ||
            flags.bools[key] ||
            aliases[key]
          )
        }

        function setArg(key, val, arg) {
          if (arg && flags.unknownFn && !argDefined(key, arg)) {
            if (flags.unknownFn(arg) === false) return
          }

          var value = !flags.strings[key] && isNumber(val) ? Number(val) : val
          setKey(argv, key.split('.'), value)

          ;(aliases[key] || []).forEach(function (x) {
            setKey(argv, x.split('.'), value)
          })
        }

        function setKey(obj, keys, value) {
          var o = obj
          for (var i = 0; i < keys.length - 1; i++) {
            var key = keys[i]
            if (key === '__proto__') return
            if (o[key] === undefined) o[key] = {}
            if (
              o[key] === Object.prototype ||
              o[key] === Number.prototype ||
              o[key] === String.prototype
            )
              o[key] = {}
            if (o[key] === Array.prototype) o[key] = []
            o = o[key]
          }

          var key = keys[keys.length - 1]
          if (key === '__proto__') return
          if (
            o === Object.prototype ||
            o === Number.prototype ||
            o === String.prototype
          )
            o = {}
          if (o === Array.prototype) o = []
          if (
            o[key] === undefined ||
            flags.bools[key] ||
            typeof o[key] === 'boolean'
          ) {
            o[key] = value
          } else if (Array.isArray(o[key])) {
            o[key].push(value)
          } else {
            o[key] = [o[key], value]
          }
        }

        function aliasIsBoolean(key) {
          return aliases[key].some(function (x) {
            return flags.bools[x]
          })
        }

        for (var i = 0; i < args.length; i++) {
          var arg = args[i]

          if (/^--.+=/.test(arg)) {
            // Using [\s\S] instead of . because js doesn't support the
            // 'dotall' regex modifier. See:
            // http://stackoverflow.com/a/1068308/13216
            var m = arg.match(/^--([^=]+)=([\s\S]*)$/)
            var key = m[1]
            var value = m[2]
            if (flags.bools[key]) {
              value = value !== 'false'
            }
            setArg(key, value, arg)
          } else if (/^--no-.+/.test(arg)) {
            var key = arg.match(/^--no-(.+)/)[1]
            setArg(key, false, arg)
          } else if (/^--.+/.test(arg)) {
            var key = arg.match(/^--(.+)/)[1]
            var next = args[i + 1]
            if (
              next !== undefined &&
              !/^-/.test(next) &&
              !flags.bools[key] &&
              !flags.allBools &&
              (aliases[key] ? !aliasIsBoolean(key) : true)
            ) {
              setArg(key, next, arg)
              i++
            } else if (/^(true|false)$/.test(next)) {
              setArg(key, next === 'true', arg)
              i++
            } else {
              setArg(key, flags.strings[key] ? '' : true, arg)
            }
          } else if (/^-[^-]+/.test(arg)) {
            var letters = arg.slice(1, -1).split('')

            var broken = false
            for (var j = 0; j < letters.length; j++) {
              var next = arg.slice(j + 2)

              if (next === '-') {
                setArg(letters[j], next, arg)
                continue
              }

              if (/[A-Za-z]/.test(letters[j]) && /=/.test(next)) {
                setArg(letters[j], next.split('=')[1], arg)
                broken = true
                break
              }

              if (
                /[A-Za-z]/.test(letters[j]) &&
                /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)
              ) {
                setArg(letters[j], next, arg)
                broken = true
                break
              }

              if (letters[j + 1] && letters[j + 1].match(/\W/)) {
                setArg(letters[j], arg.slice(j + 2), arg)
                broken = true
                break
              } else {
                setArg(letters[j], flags.strings[letters[j]] ? '' : true, arg)
              }
            }

            var key = arg.slice(-1)[0]
            if (!broken && key !== '-') {
              if (
                args[i + 1] &&
                !/^(-|--)[^-]/.test(args[i + 1]) &&
                !flags.bools[key] &&
                (aliases[key] ? !aliasIsBoolean(key) : true)
              ) {
                setArg(key, args[i + 1], arg)
                i++
              } else if (args[i + 1] && /^(true|false)$/.test(args[i + 1])) {
                setArg(key, args[i + 1] === 'true', arg)
                i++
              } else {
                setArg(key, flags.strings[key] ? '' : true, arg)
              }
            }
          } else {
            if (!flags.unknownFn || flags.unknownFn(arg) !== false) {
              argv._.push(
                flags.strings['_'] || !isNumber(arg) ? arg : Number(arg)
              )
            }
            if (opts.stopEarly) {
              argv._.push.apply(argv._, args.slice(i + 1))
              break
            }
          }
        }

        Object.keys(defaults).forEach(function (key) {
          if (!hasKey(argv, key.split('.'))) {
            setKey(argv, key.split('.'), defaults[key])

            ;(aliases[key] || []).forEach(function (x) {
              setKey(argv, x.split('.'), defaults[key])
            })
          }
        })

        if (opts['--']) {
          argv['--'] = new Array()
          notFlags.forEach(function (key) {
            argv['--'].push(key)
          })
        } else {
          notFlags.forEach(function (key) {
            argv._.push(key)
          })
        }

        return argv
      }

      function hasKey(obj, keys) {
        var o = obj
        keys.slice(0, -1).forEach(function (key) {
          o = o[key] || {}
        })

        var key = keys[keys.length - 1]
        return key in o
      }

      function isNumber(x) {
        if (typeof x === 'number') return true
        if (/^0x[0-9a-f]+$/i.test(x)) return true
        return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x)
      }

      /***/
    },

    /***/ 4856: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      // This is a generated file, modify: generate/templates/templates/enums.js

      var NodeGit = __nccwpck_require__(2596)
      NodeGit.Enums = {}

      NodeGit.Apply.FLAGS = {
        CHECK: 1,
      }
      NodeGit.Apply.LOCATION = {
        WORKDIR: 0,
        INDEX: 1,
        BOTH: 2,
      }
      NodeGit.Attr.VALUE = {
        UNSPECIFIED: 0,
        TRUE: 1,
        FALSE: 2,
        STRING: 3,
      }
      NodeGit.Blame.FLAG = {
        NORMAL: 0,
        TRACK_COPIES_SAME_FILE: 1,
        TRACK_COPIES_SAME_COMMIT_MOVES: 2,
        TRACK_COPIES_SAME_COMMIT_COPIES: 4,
        TRACK_COPIES_ANY_COMMIT_COPIES: 8,
        FIRST_PARENT: 16,
        USE_MAILMAP: 32,
      }
      NodeGit.Blob.FILTER_FLAG = {
        CHECK_FOR_BINARY: 1,
        NO_SYSTEM_ATTRIBUTES: 2,
        ATTTRIBUTES_FROM_HEAD: 4,
      }
      NodeGit.Branch.BRANCH = {
        LOCAL: 1,
        REMOTE: 2,
        ALL: 3,
      }
      NodeGit.Cert.TYPE = {
        NONE: 0,
        X509: 1,
        HOSTKEY_LIBSSH2: 2,
        STRARRAY: 3,
      }
      NodeGit.Cert.SSH = {
        MD5: 1,
        SHA1: 2,
        SHA256: 4,
      }
      NodeGit.Checkout.NOTIFY = {
        NONE: 0,
        CONFLICT: 1,
        DIRTY: 2,
        UPDATED: 4,
        UNTRACKED: 8,
        IGNORED: 16,
        ALL: 65535,
      }
      NodeGit.Checkout.STRATEGY = {
        NONE: 0,
        SAFE: 1,
        FORCE: 2,
        RECREATE_MISSING: 4,
        ALLOW_CONFLICTS: 16,
        REMOVE_UNTRACKED: 32,
        REMOVE_IGNORED: 64,
        UPDATE_ONLY: 128,
        DONT_UPDATE_INDEX: 256,
        NO_REFRESH: 512,
        SKIP_UNMERGED: 1024,
        USE_OURS: 2048,
        USE_THEIRS: 4096,
        DISABLE_PATHSPEC_MATCH: 8192,
        SKIP_LOCKED_DIRECTORIES: 262144,
        DONT_OVERWRITE_IGNORED: 524288,
        CONFLICT_STYLE_MERGE: 1048576,
        CONFLICT_STYLE_DIFF3: 2097152,
        DONT_REMOVE_EXISTING: 4194304,
        DONT_WRITE_INDEX: 8388608,
        UPDATE_SUBMODULES: 65536,
        UPDATE_SUBMODULES_IF_CHANGED: 131072,
      }
      NodeGit.Clone.LOCAL = {
        AUTO: 0,
        LOCAL: 1,
        NO_LOCAL: 2,
        NO_LINKS: 3,
      }
      NodeGit.Config.LEVEL = {
        PROGRAMDATA: 1,
        SYSTEM: 2,
        XDG: 3,
        GLOBAL: 4,
        LOCAL: 5,
        APP: 6,
        HIGHEST_LEVEL: -1,
      }
      NodeGit.Config.MAP = {
        FALSE: 0,
        TRUE: 1,
        INT32: 2,
        STRING: 3,
      }
      NodeGit.Cred.TYPE = {
        USERPASS_PLAINTEXT: 1,
        SSH_KEY: 2,
        SSH_CUSTOM: 4,
        DEFAULT: 8,
        SSH_INTERACTIVE: 16,
        USERNAME: 32,
        SSH_MEMORY: 64,
      }
      NodeGit.Diff.DELTA = {
        UNMODIFIED: 0,
        ADDED: 1,
        DELETED: 2,
        MODIFIED: 3,
        RENAMED: 4,
        COPIED: 5,
        IGNORED: 6,
        UNTRACKED: 7,
        TYPECHANGE: 8,
        UNREADABLE: 9,
        CONFLICTED: 10,
      }
      NodeGit.DiffBinary.DIFF_BINARY = {
        NONE: 0,
        LITERAL: 1,
        DELTA: 2,
      }
      NodeGit.Diff.FIND = {
        BY_CONFIG: 0,
        RENAMES: 1,
        RENAMES_FROM_REWRITES: 2,
        COPIES: 4,
        COPIES_FROM_UNMODIFIED: 8,
        REWRITES: 16,
        BREAK_REWRITES: 32,
        AND_BREAK_REWRITES: 48,
        FOR_UNTRACKED: 64,
        ALL: 255,
        IGNORE_LEADING_WHITESPACE: 0,
        IGNORE_WHITESPACE: 4096,
        DONT_IGNORE_WHITESPACE: 8192,
        EXACT_MATCH_ONLY: 16384,
        BREAK_REWRITES_FOR_RENAMES_ONLY: 32768,
        REMOVE_UNMODIFIED: 65536,
      }
      NodeGit.Diff.FLAG = {
        BINARY: 1,
        NOT_BINARY: 2,
        VALID_ID: 4,
        EXISTS: 8,
      }
      NodeGit.Diff.FORMAT = {
        PATCH: 1,
        PATCH_HEADER: 2,
        RAW: 3,
        NAME_ONLY: 4,
        NAME_STATUS: 5,
        PATCH_ID: 6,
      }
      NodeGit.Diff.FORMAT_EMAIL_FLAGS = {
        FORMAT_EMAIL_NONE: 0,
        FORMAT_EMAIL_EXCLUDE_SUBJECT_PATCH_MARKER: 1,
      }
      NodeGit.Diff.LINE = {
        CONTEXT: 32,
        ADDITION: 43,
        DELETION: 45,
        CONTEXT_EOFNL: 61,
        ADD_EOFNL: 62,
        DEL_EOFNL: 60,
        FILE_HDR: 70,
        HUNK_HDR: 72,
        BINARY: 66,
      }
      NodeGit.Diff.OPTION = {
        NORMAL: 0,
        REVERSE: 1,
        INCLUDE_IGNORED: 2,
        RECURSE_IGNORED_DIRS: 4,
        INCLUDE_UNTRACKED: 8,
        RECURSE_UNTRACKED_DIRS: 16,
        INCLUDE_UNMODIFIED: 32,
        INCLUDE_TYPECHANGE: 64,
        INCLUDE_TYPECHANGE_TREES: 128,
        IGNORE_FILEMODE: 256,
        IGNORE_SUBMODULES: 512,
        IGNORE_CASE: 1024,
        INCLUDE_CASECHANGE: 2048,
        DISABLE_PATHSPEC_MATCH: 4096,
        SKIP_BINARY_CHECK: 8192,
        ENABLE_FAST_UNTRACKED_DIRS: 16384,
        UPDATE_INDEX: 32768,
        INCLUDE_UNREADABLE: 65536,
        INCLUDE_UNREADABLE_AS_UNTRACKED: 131072,
        INDENT_HEURISTIC: 262144,
        FORCE_TEXT: 1048576,
        FORCE_BINARY: 2097152,
        IGNORE_WHITESPACE: 4194304,
        IGNORE_WHITESPACE_CHANGE: 8388608,
        IGNORE_WHITESPACE_EOL: 16777216,
        SHOW_UNTRACKED_CONTENT: 33554432,
        SHOW_UNMODIFIED: 67108864,
        PATIENCE: 268435456,
        MINIMAL: 536870912,
        SHOW_BINARY: 1073741824,
      }
      NodeGit.Diff.STATS_FORMAT = {
        STATS_NONE: 0,
        STATS_FULL: 1,
        STATS_SHORT: 2,
        STATS_NUMBER: 4,
        STATS_INCLUDE_SUMMARY: 8,
      }
      NodeGit.Enums.DIRECTION = {
        FETCH: 0,
        PUSH: 1,
      }
      NodeGit.Error.ERROR = {
        NONE: 0,
        NOMEMORY: 1,
        OS: 2,
        INVALID: 3,
        REFERENCE: 4,
        ZLIB: 5,
        REPOSITORY: 6,
        CONFIG: 7,
        REGEX: 8,
        ODB: 9,
        INDEX: 10,
        OBJECT: 11,
        NET: 12,
        TAG: 13,
        TREE: 14,
        INDEXER: 15,
        SSL: 16,
        SUBMODULE: 17,
        THREAD: 18,
        STASH: 19,
        CHECKOUT: 20,
        FETCHHEAD: 21,
        MERGE: 22,
        SSH: 23,
        FILTER: 24,
        REVERT: 25,
        CALLBACK: 26,
        CHERRYPICK: 27,
        DESCRIBE: 28,
        REBASE: 29,
        FILESYSTEM: 30,
        PATCH: 31,
        WORKTREE: 32,
        SHA1: 33,
      }
      NodeGit.Error.CODE = {
        OK: 0,
        ERROR: -1,
        ENOTFOUND: -3,
        EEXISTS: -4,
        EAMBIGUOUS: -5,
        EBUFS: -6,
        EUSER: -7,
        EBAREREPO: -8,
        EUNBORNBRANCH: -9,
        EUNMERGED: -10,
        ENONFASTFORWARD: -11,
        EINVALIDSPEC: -12,
        ECONFLICT: -13,
        ELOCKED: -14,
        EMODIFIED: -15,
        EAUTH: -16,
        ECERTIFICATE: -17,
        EAPPLIED: -18,
        EPEEL: -19,
        EEOF: -20,
        EINVALID: -21,
        EUNCOMMITTED: -22,
        EDIRECTORY: -23,
        EMERGECONFLICT: -24,
        PASSTHROUGH: -30,
        ITEROVER: -31,
        RETRY: -32,
        EMISMATCH: -33,
        EINDEXDIRTY: -34,
        EAPPLYFAIL: -35,
      }
      NodeGit.Enums.FEATURE = {
        THREADS: 1,
        HTTPS: 2,
        SSH: 4,
        NSEC: 8,
      }
      NodeGit.Fetch.PRUNE = {
        GIT_FETCH_PRUNE_UNSPECIFIED: 0,
        GIT_FETCH_PRUNE: 1,
        GIT_FETCH_NO_PRUNE: 2,
      }
      NodeGit.TreeEntry.FILEMODE = {
        UNREADABLE: 0,
        TREE: 16384,
        BLOB: 33188,
        EXECUTABLE: 33261,
        LINK: 40960,
        COMMIT: 57344,
      }
      NodeGit.Filter.FLAG = {
        DEFAULT: 0,
        ALLOW_UNSAFE: 1,
        NO_SYSTEM_ATTRIBUTES: 2,
        ATTRIBUTES_FROM_HEAD: 4,
      }
      NodeGit.Filter.MODE = {
        TO_WORKTREE: 0,
        SMUDGE: 0,
        TO_ODB: 1,
        CLEAN: 1,
      }
      NodeGit.Hashsig.OPTION = {
        NORMAL: 0,
        IGNORE_WHITESPACE: 1,
        SMART_WHITESPACE: 2,
        ALLOW_SMALL_FILES: 4,
      }
      NodeGit.Index.ADD_OPTION = {
        ADD_DEFAULT: 0,
        ADD_FORCE: 1,
        ADD_DISABLE_PATHSPEC_MATCH: 2,
        ADD_CHECK_PATHSPEC: 4,
      }
      NodeGit.Index.CAPABILITY = {
        IGNORE_CASE: 1,
        NO_FILEMODE: 2,
        NO_SYMLINKS: 4,
        FROM_OWNER: -1,
      }
      NodeGit.Index.ENTRY_EXTENDED_FLAG = {
        ENTRY_INTENT_TO_ADD: 8192,
        ENTRY_SKIP_WORKTREE: 16384,
        S: 24576,
        ENTRY_UPTODATE: 4,
      }
      NodeGit.Index.ENTRY_FLAG = {
        ENTRY_EXTENDED: 16384,
        ENTRY_VALID: 32768,
      }
      NodeGit.Index.STAGE = {
        ANY: -1,
        NORMAL: 0,
        ANCESTOR: 1,
        OURS: 2,
        THEIRS: 3,
      }
      NodeGit.Libgit2.OPT = {
        GET_MWINDOW_SIZE: 0,
        SET_MWINDOW_SIZE: 1,
        GET_MWINDOW_MAPPED_LIMIT: 2,
        SET_MWINDOW_MAPPED_LIMIT: 3,
        GET_SEARCH_PATH: 4,
        SET_SEARCH_PATH: 5,
        SET_CACHE_OBJECT_LIMIT: 6,
        SET_CACHE_MAX_SIZE: 7,
        ENABLE_CACHING: 8,
        GET_CACHED_MEMORY: 9,
        GET_TEMPLATE_PATH: 10,
        SET_TEMPLATE_PATH: 11,
        SET_SSL_CERT_LOCATIONS: 12,
        SET_USER_AGENT: 13,
        ENABLE_STRICT_OBJECT_CREATION: 14,
        ENABLE_STRICT_SYMBOLIC_REF_CREATION: 15,
        SET_SSL_CIPHERS: 16,
        GET_USER_AGENT: 17,
        ENABLE_OFS_DELTA: 18,
        ENABLE_FSYNC_GITDIR: 19,
        GET_WINDOWS_SHAREMODE: 20,
        SET_WINDOWS_SHAREMODE: 21,
        ENABLE_STRICT_HASH_VERIFICATION: 22,
        SET_ALLOCATOR: 23,
        ENABLE_UNSAVED_INDEX_SAFETY: 24,
        GET_PACK_MAX_OBJECTS: 25,
        SET_PACK_MAX_OBJECTS: 26,
        DISABLE_PACK_KEEP_FILE_CHECKS: 27,
      }
      NodeGit.Merge.ANALYSIS = {
        NONE: 0,
        NORMAL: 1,
        UP_TO_DATE: 2,
        FASTFORWARD: 4,
        UNBORN: 8,
      }
      NodeGit.Merge.FILE_FAVOR = {
        NORMAL: 0,
        OURS: 1,
        THEIRS: 2,
        UNION: 3,
      }
      NodeGit.Merge.FILE_FLAG = {
        FILE_DEFAULT: 0,
        FILE_STYLE_MERGE: 1,
        FILE_STYLE_DIFF3: 2,
        FILE_SIMPLIFY_ALNUM: 4,
        FILE_IGNORE_WHITESPACE: 8,
        FILE_IGNORE_WHITESPACE_CHANGE: 16,
        FILE_IGNORE_WHITESPACE_EOL: 32,
        FILE_DIFF_PATIENCE: 64,
        FILE_DIFF_MINIMAL: 128,
      }
      NodeGit.Merge.FLAG = {
        FIND_RENAMES: 1,
        FAIL_ON_CONFLICT: 2,
        SKIP_REUC: 4,
        NO_RECURSIVE: 8,
      }
      NodeGit.Merge.PREFERENCE = {
        NONE: 0,
        NO_FASTFORWARD: 1,
        FASTFORWARD_ONLY: 2,
      }
      NodeGit.Object.TYPE = {
        ANY: -2,
        INVALID: -1,
        COMMIT: 1,
        TREE: 2,
        BLOB: 3,
        TAG: 4,
        OFS_DELTA: 6,
        REF_DELTA: 7,
      }
      NodeGit.Odb.STREAM = {
        RDONLY: 2,
        WRONLY: 4,
        RW: 6,
      }
      NodeGit.Packbuilder.STAGE = {
        ADDING_OBJECTS: 0,
        DELTAFICATION: 1,
      }
      NodeGit.Path.FS = {
        GENERIC: 0,
        NTFS: 1,
        HFS: 2,
      }
      NodeGit.Path.GITFILE = {
        GITIGNORE: 0,
        GITMODULES: 1,
        GITATTRIBUTES: 1,
      }
      NodeGit.Pathspec.FLAG = {
        DEFAULT: 0,
        IGNORE_CASE: 1,
        USE_CASE: 2,
        NO_GLOB: 4,
        NO_MATCH_ERROR: 8,
        FIND_FAILURES: 16,
        FAILURES_ONLY: 32,
      }
      NodeGit.Proxy.PROXY = {
        NONE: 0,
        AUTO: 1,
        SPECIFIED: 2,
      }
      NodeGit.RebaseOperation.REBASE_OPERATION = {
        PICK: 0,
        REWORD: 1,
        EDIT: 2,
        SQUASH: 3,
        FIXUP: 4,
        EXEC: 5,
      }
      NodeGit.Reference.TYPE = {
        INVALID: 0,
        DIRECT: 1,
        SYMBOLIC: 2,
        ALL: 3,
      }
      NodeGit.Reference.FORMAT = {
        NORMAL: 0,
        ALLOW_ONELEVEL: 1,
        REFSPEC_PATTERN: 2,
        REFSPEC_SHORTHAND: 4,
      }
      NodeGit.Remote.AUTOTAG_OPTION = {
        DOWNLOAD_TAGS_UNSPECIFIED: 0,
        DOWNLOAD_TAGS_AUTO: 1,
        DOWNLOAD_TAGS_NONE: 2,
        DOWNLOAD_TAGS_ALL: 3,
      }
      NodeGit.Remote.COMPLETION = {
        DOWNLOAD: 0,
        INDEXING: 1,
        ERROR: 2,
      }
      NodeGit.Remote.CREATE_FLAGS = {
        CREATE_SKIP_INSTEADOF: 1,
        CREATE_SKIP_DEFAULT_FETCHSPEC: 2,
      }
      NodeGit.Repository.INIT_FLAG = {
        BARE: 1,
        NO_REINIT: 2,
        NO_DOTGIT_DIR: 4,
        MKDIR: 8,
        MKPATH: 16,
        EXTERNAL_TEMPLATE: 32,
        RELATIVE_GITLINK: 64,
      }
      NodeGit.Repository.INIT_MODE = {
        INIT_SHARED_UMASK: 0,
        INIT_SHARED_GROUP: 1533,
        INIT_SHARED_ALL: 1535,
      }
      NodeGit.Repository.ITEM = {
        GITDIR: 0,
        WORKDIR: 1,
        COMMONDIR: 2,
        INDEX: 3,
        OBJECTS: 4,
        REFS: 5,
        PACKED_REFS: 6,
        REMOTES: 7,
        CONFIG: 8,
        INFO: 9,
        HOOKS: 10,
        LOGS: 11,
        MODULES: 12,
        WORKTREES: 13,
        _LAST: 14,
      }
      NodeGit.Repository.OPEN_FLAG = {
        OPEN_NO_SEARCH: 1,
        OPEN_CROSS_FS: 2,
        OPEN_BARE: 4,
        OPEN_NO_DOTGIT: 8,
        OPEN_FROM_ENV: 16,
      }
      NodeGit.Repository.STATE = {
        NONE: 0,
        MERGE: 1,
        REVERT: 2,
        REVERT_SEQUENCE: 3,
        CHERRYPICK: 4,
        CHERRYPICK_SEQUENCE: 5,
        BISECT: 6,
        REBASE: 7,
        REBASE_INTERACTIVE: 8,
        REBASE_MERGE: 9,
        APPLY_MAILBOX: 10,
        APPLY_MAILBOX_OR_REBASE: 11,
      }
      NodeGit.Reset.TYPE = {
        SOFT: 1,
        MIXED: 2,
        HARD: 3,
      }
      NodeGit.Revparse.MODE = {
        SINGLE: 1,
        RANGE: 2,
        MERGE_BASE: 4,
      }
      NodeGit.Enums.SMART_SERVICE = {
        SERVICE_UPLOADPACK_LS: 1,
        SERVICE_UPLOADPACK: 2,
        SERVICE_RECEIVEPACK_LS: 3,
        SERVICE_RECEIVEPACK: 4,
      }
      NodeGit.Revwalk.SORT = {
        NONE: 0,
        TOPOLOGICAL: 1,
        TIME: 2,
        REVERSE: 4,
      }
      NodeGit.Stash.APPLY_FLAGS = {
        APPLY_DEFAULT: 0,
        APPLY_REINSTATE_INDEX: 1,
      }
      NodeGit.Stash.APPLY_PROGRESS = {
        NONE: 0,
        LOADING_STASH: 1,
        ANALYZE_INDEX: 2,
        ANALYZE_MODIFIED: 3,
        ANALYZE_UNTRACKED: 4,
        CHECKOUT_UNTRACKED: 5,
        CHECKOUT_MODIFIED: 6,
        DONE: 7,
      }
      NodeGit.Stash.FLAGS = {
        DEFAULT: 0,
        KEEP_INDEX: 1,
        INCLUDE_UNTRACKED: 2,
        INCLUDE_IGNORED: 4,
      }
      NodeGit.Status.STATUS = {
        CURRENT: 0,
        INDEX_NEW: 1,
        INDEX_MODIFIED: 2,
        INDEX_DELETED: 4,
        INDEX_RENAMED: 8,
        INDEX_TYPECHANGE: 16,
        WT_NEW: 128,
        WT_MODIFIED: 256,
        WT_DELETED: 512,
        WT_TYPECHANGE: 1024,
        WT_RENAMED: 2048,
        WT_UNREADABLE: 4096,
        IGNORED: 16384,
        CONFLICTED: 32768,
      }
      NodeGit.Status.OPT = {
        INCLUDE_UNTRACKED: 1,
        INCLUDE_IGNORED: 2,
        INCLUDE_UNMODIFIED: 4,
        EXCLUDE_SUBMODULES: 8,
        RECURSE_UNTRACKED_DIRS: 16,
        DISABLE_PATHSPEC_MATCH: 32,
        RECURSE_IGNORED_DIRS: 64,
        RENAMES_HEAD_TO_INDEX: 128,
        RENAMES_INDEX_TO_WORKDIR: 256,
        SORT_CASE_SENSITIVELY: 512,
        SORT_CASE_INSENSITIVELY: 1024,
        RENAMES_FROM_REWRITES: 2048,
        NO_REFRESH: 4096,
        UPDATE_INDEX: 8192,
        INCLUDE_UNREADABLE: 16384,
        INCLUDE_UNREADABLE_AS_UNTRACKED: 32768,
      }
      NodeGit.Status.SHOW = {
        INDEX_AND_WORKDIR: 0,
        INDEX_ONLY: 1,
        WORKDIR_ONLY: 2,
      }
      NodeGit.Submodule.IGNORE = {
        UNSPECIFIED: -1,
        NONE: 1,
        UNTRACKED: 2,
        DIRTY: 3,
        ALL: 4,
      }
      NodeGit.Submodule.RECURSE = {
        NO: 0,
        YES: 1,
        ONDEMAND: 2,
      }
      NodeGit.Submodule.STATUS = {
        IN_HEAD: 1,
        IN_INDEX: 2,
        IN_CONFIG: 4,
        IN_WD: 8,
        INDEX_ADDED: 16,
        INDEX_DELETED: 32,
        INDEX_MODIFIED: 64,
        WD_UNINITIALIZED: 128,
        WD_ADDED: 256,
        WD_DELETED: 512,
        WD_MODIFIED: 1024,
        WD_INDEX_MODIFIED: 2048,
        WD_WD_MODIFIED: 4096,
        WD_UNTRACKED: 8192,
      }
      NodeGit.Submodule.UPDATE = {
        CHECKOUT: 1,
        REBASE: 2,
        MERGE: 3,
        NONE: 4,
        DEFAULT: 0,
      }
      NodeGit.Trace.LEVEL = {
        NONE: 0,
        FATAL: 1,
        ERROR: 2,
        WARN: 3,
        INFO: 4,
        DEBUG: 5,
        TRACE: 6,
      }
      NodeGit.Tree.UPDATE = {
        UPSERT: 0,
        REMOVE: 1,
      }
      NodeGit.Tree.WALK_MODE = {
        WALK_PRE: 0,
        WALK_POST: 1,
      }
      NodeGit.Worktree.PRUNE = {
        GIT_WORKTREE_PRUNE_VALID: 1,
        GIT_WORKTREE_PRUNE_LOCKED: 2,
        GIT_WORKTREE_PRUNE_WORKING_TREE: 4,
      }

      /***/
    },

    /***/ 2596: /***/ (
      __unused_webpack_module,
      exports,
      __nccwpck_require__
    ) => {
      'use strict'

      // This is a generated file, modify: generate/templates/templates/nodegit.js

      var _ = __nccwpck_require__(250)
      var util = __nccwpck_require__(1669)
      var rawApi

      // Attempt to load the production release first, if it fails fall back to the
      // debug release.
      try {
        rawApi = __nccwpck_require__(5553)
      } catch (ex) {
        /* istanbul ignore next */
        if (ex.code !== 'MODULE_NOT_FOUND') {
          throw ex
        }

        rawApi = __nccwpck_require__(2987)
      }

      var promisify = function promisify(fn) {
        return fn && util.promisify(fn)
      } // jshint ignore:line

      // For disccussion on why `cloneDeep` is required, see:
      // https://github.com/facebook/jest/issues/3552
      // https://github.com/facebook/jest/issues/3550
      // https://github.com/nodejs/node/issues/5016
      rawApi = _.cloneDeep(rawApi)

      // Native methods do not return an identifiable function, so we
      // have to override them here
      /* jshint ignore:start */
      var _AnnotatedCommit = rawApi.AnnotatedCommit

      var _AnnotatedCommit_fromFetchhead = _AnnotatedCommit.fromFetchhead
      _AnnotatedCommit.fromFetchhead = promisify(_AnnotatedCommit_fromFetchhead)

      var _AnnotatedCommit_fromRef = _AnnotatedCommit.fromRef
      _AnnotatedCommit.fromRef = promisify(_AnnotatedCommit_fromRef)

      var _AnnotatedCommit_fromRevspec = _AnnotatedCommit.fromRevspec
      _AnnotatedCommit.fromRevspec = promisify(_AnnotatedCommit_fromRevspec)

      var _AnnotatedCommit_lookup = _AnnotatedCommit.lookup
      _AnnotatedCommit.lookup = promisify(_AnnotatedCommit_lookup)

      var _Apply = rawApi.Apply

      var _Apply_toTree = _Apply.toTree
      _Apply.toTree = promisify(_Apply_toTree)

      var _Attr = rawApi.Attr

      var _Attr_get = _Attr.get
      _Attr.get = promisify(_Attr_get)

      var _Attr_getMany = _Attr.getMany
      _Attr.getMany = promisify(_Attr_getMany)

      var _Blame = rawApi.Blame

      var _Blame_buffer = _Blame.prototype.buffer
      _Blame.prototype.buffer = promisify(_Blame_buffer)

      var _Blame_file = _Blame.file
      _Blame.file = promisify(_Blame_file)

      var _Blob = rawApi.Blob

      var _Blob_createFromBuffer = _Blob.createFromBuffer
      _Blob.createFromBuffer = promisify(_Blob_createFromBuffer)

      var _Blob_createFromDisk = _Blob.createFromDisk
      _Blob.createFromDisk = promisify(_Blob_createFromDisk)

      var _Blob_createFromWorkdir = _Blob.createFromWorkdir
      _Blob.createFromWorkdir = promisify(_Blob_createFromWorkdir)

      var _Blob_dup = _Blob.prototype.dup
      _Blob.prototype.dup = promisify(_Blob_dup)

      var _Blob_filter = _Blob.prototype.filter
      _Blob.prototype.filter = promisify(_Blob_filter)

      var _Blob_filteredContent = _Blob.filteredContent
      _Blob.filteredContent = promisify(_Blob_filteredContent)

      var _Blob_lookup = _Blob.lookup
      _Blob.lookup = promisify(_Blob_lookup)

      var _Blob_lookupPrefix = _Blob.lookupPrefix
      _Blob.lookupPrefix = promisify(_Blob_lookupPrefix)

      var _Branch = rawApi.Branch

      var _Branch_create = _Branch.create
      _Branch.create = promisify(_Branch_create)

      var _Branch_createFromAnnotated = _Branch.createFromAnnotated
      _Branch.createFromAnnotated = promisify(_Branch_createFromAnnotated)

      var _Branch_lookup = _Branch.lookup
      _Branch.lookup = promisify(_Branch_lookup)

      var _Branch_move = _Branch.move
      _Branch.move = promisify(_Branch_move)

      var _Branch_name = _Branch.name
      _Branch.name = promisify(_Branch_name)

      var _Branch_remoteName = _Branch.remoteName
      _Branch.remoteName = promisify(_Branch_remoteName)

      var _Branch_setUpstream = _Branch.setUpstream
      _Branch.setUpstream = promisify(_Branch_setUpstream)

      var _Branch_upstream = _Branch.upstream
      _Branch.upstream = promisify(_Branch_upstream)

      var _Branch_upstreamName = _Branch.upstreamName
      _Branch.upstreamName = promisify(_Branch_upstreamName)

      var _Buf = rawApi.Buf
      var _Checkout = rawApi.Checkout

      var _Checkout_head = _Checkout.head
      _Checkout.head = promisify(_Checkout_head)

      var _Checkout_index = _Checkout.index
      _Checkout.index = promisify(_Checkout_index)

      var _Checkout_tree = _Checkout.tree
      _Checkout.tree = promisify(_Checkout_tree)

      var _Cherrypick = rawApi.Cherrypick

      var _Cherrypick_cherrypick = _Cherrypick.cherrypick
      _Cherrypick.cherrypick = promisify(_Cherrypick_cherrypick)

      var _Cherrypick_commit = _Cherrypick.commit
      _Cherrypick.commit = promisify(_Cherrypick_commit)

      var _Clone = rawApi.Clone

      var _Clone_clone = _Clone.clone
      _Clone.clone = promisify(_Clone_clone)

      var _Commit = rawApi.Commit

      var _Commit_amend = _Commit.prototype.amend
      _Commit.prototype.amend = promisify(_Commit_amend)

      var _Commit_authorWithMailmap = _Commit.prototype.authorWithMailmap
      _Commit.prototype.authorWithMailmap = promisify(_Commit_authorWithMailmap)

      var _Commit_committerWithMailmap = _Commit.prototype.committerWithMailmap
      _Commit.prototype.committerWithMailmap = promisify(
        _Commit_committerWithMailmap
      )

      var _Commit_create = _Commit.create
      _Commit.create = promisify(_Commit_create)

      var _Commit_createBuffer = _Commit.createBuffer
      _Commit.createBuffer = promisify(_Commit_createBuffer)

      var _Commit_createWithSignature = _Commit.createWithSignature
      _Commit.createWithSignature = promisify(_Commit_createWithSignature)

      var _Commit_dup = _Commit.prototype.dup
      _Commit.prototype.dup = promisify(_Commit_dup)

      var _Commit_extractSignature = _Commit.extractSignature
      _Commit.extractSignature = promisify(_Commit_extractSignature)

      var _Commit_headerField = _Commit.prototype.headerField
      _Commit.prototype.headerField = promisify(_Commit_headerField)

      var _Commit_lookup = _Commit.lookup
      _Commit.lookup = promisify(_Commit_lookup)

      var _Commit_lookupPrefix = _Commit.lookupPrefix
      _Commit.lookupPrefix = promisify(_Commit_lookupPrefix)

      var _Commit_nthGenAncestor = _Commit.prototype.nthGenAncestor
      _Commit.prototype.nthGenAncestor = promisify(_Commit_nthGenAncestor)

      var _Commit_parent = _Commit.prototype.parent
      _Commit.prototype.parent = promisify(_Commit_parent)

      var _Config = rawApi.Config

      var _Config_findGlobal = _Config.findGlobal
      _Config.findGlobal = promisify(_Config_findGlobal)

      var _Config_findProgramdata = _Config.findProgramdata
      _Config.findProgramdata = promisify(_Config_findProgramdata)

      var _Config_findSystem = _Config.findSystem
      _Config.findSystem = promisify(_Config_findSystem)

      var _Config_findXdg = _Config.findXdg
      _Config.findXdg = promisify(_Config_findXdg)

      var _Config_getBool = _Config.prototype.getBool
      _Config.prototype.getBool = promisify(_Config_getBool)

      var _Config_getEntry = _Config.prototype.getEntry
      _Config.prototype.getEntry = promisify(_Config_getEntry)

      var _Config_getInt32 = _Config.prototype.getInt32
      _Config.prototype.getInt32 = promisify(_Config_getInt32)

      var _Config_getInt64 = _Config.prototype.getInt64
      _Config.prototype.getInt64 = promisify(_Config_getInt64)

      var _Config_getPath = _Config.prototype.getPath
      _Config.prototype.getPath = promisify(_Config_getPath)

      var _Config_getStringBuf = _Config.prototype.getStringBuf
      _Config.prototype.getStringBuf = promisify(_Config_getStringBuf)

      var _Config_lock = _Config.prototype.lock
      _Config.prototype.lock = promisify(_Config_lock)

      var _Config_openDefault = _Config.openDefault
      _Config.openDefault = promisify(_Config_openDefault)

      var _Config_openOndisk = _Config.openOndisk
      _Config.openOndisk = promisify(_Config_openOndisk)

      var _Config_setBool = _Config.prototype.setBool
      _Config.prototype.setBool = promisify(_Config_setBool)

      var _Config_setInt32 = _Config.prototype.setInt32
      _Config.prototype.setInt32 = promisify(_Config_setInt32)

      var _Config_setInt64 = _Config.prototype.setInt64
      _Config.prototype.setInt64 = promisify(_Config_setInt64)

      var _Config_setMultivar = _Config.prototype.setMultivar
      _Config.prototype.setMultivar = promisify(_Config_setMultivar)

      var _Config_setString = _Config.prototype.setString
      _Config.prototype.setString = promisify(_Config_setString)

      var _Config_snapshot = _Config.prototype.snapshot
      _Config.prototype.snapshot = promisify(_Config_snapshot)

      var _ConfigIterator = rawApi.ConfigIterator

      var _ConfigIterator_create = _ConfigIterator.create
      _ConfigIterator.create = promisify(_ConfigIterator_create)

      var _ConfigIterator_createGlob = _ConfigIterator.createGlob
      _ConfigIterator.createGlob = promisify(_ConfigIterator_createGlob)

      var _ConfigIterator_createMultivar = _ConfigIterator.createMultivar
      _ConfigIterator.createMultivar = promisify(_ConfigIterator_createMultivar)

      var _Cred = rawApi.Cred

      var _Cred_sshKeyMemoryNew = _Cred.sshKeyMemoryNew
      _Cred.sshKeyMemoryNew = promisify(_Cred_sshKeyMemoryNew)

      var _Cred_usernameNew = _Cred.usernameNew
      _Cred.usernameNew = promisify(_Cred_usernameNew)

      var _Diff = rawApi.Diff

      var _Diff_blobToBuffer = _Diff.blobToBuffer
      _Diff.blobToBuffer = promisify(_Diff_blobToBuffer)

      var _Diff_findSimilar = _Diff.prototype.findSimilar
      _Diff.prototype.findSimilar = promisify(_Diff_findSimilar)

      var _Diff_fromBuffer = _Diff.fromBuffer
      _Diff.fromBuffer = promisify(_Diff_fromBuffer)

      var _Diff_getStats = _Diff.prototype.getStats
      _Diff.prototype.getStats = promisify(_Diff_getStats)

      var _Diff_indexToIndex = _Diff.indexToIndex
      _Diff.indexToIndex = promisify(_Diff_indexToIndex)

      var _Diff_indexToWorkdir = _Diff.indexToWorkdir
      _Diff.indexToWorkdir = promisify(_Diff_indexToWorkdir)

      var _Diff_merge = _Diff.prototype.merge
      _Diff.prototype.merge = promisify(_Diff_merge)

      var _Diff_patchid = _Diff.prototype.patchid
      _Diff.prototype.patchid = promisify(_Diff_patchid)

      var _Diff_toBuf = _Diff.prototype.toBuf
      _Diff.prototype.toBuf = promisify(_Diff_toBuf)

      var _Diff_treeToIndex = _Diff.treeToIndex
      _Diff.treeToIndex = promisify(_Diff_treeToIndex)

      var _Diff_treeToTree = _Diff.treeToTree
      _Diff.treeToTree = promisify(_Diff_treeToTree)

      var _Diff_treeToWorkdir = _Diff.treeToWorkdir
      _Diff.treeToWorkdir = promisify(_Diff_treeToWorkdir)

      var _Diff_treeToWorkdirWithIndex = _Diff.treeToWorkdirWithIndex
      _Diff.treeToWorkdirWithIndex = promisify(_Diff_treeToWorkdirWithIndex)

      var _DiffStats = rawApi.DiffStats

      var _DiffStats_toBuf = _DiffStats.prototype.toBuf
      _DiffStats.prototype.toBuf = promisify(_DiffStats_toBuf)

      var _Error = rawApi.Error
      var _Filter = rawApi.Filter

      var _Filter_applyToBlob = _Filter.prototype.applyToBlob
      _Filter.prototype.applyToBlob = promisify(_Filter_applyToBlob)

      var _Filter_applyToData = _Filter.prototype.applyToData
      _Filter.prototype.applyToData = promisify(_Filter_applyToData)

      var _Filter_applyToFile = _Filter.prototype.applyToFile
      _Filter.prototype.applyToFile = promisify(_Filter_applyToFile)

      var _Filter_load = _Filter.load
      _Filter.load = promisify(_Filter_load)

      var _FilterList = rawApi.FilterList

      var _FilterList_applyToBlob = _FilterList.prototype.applyToBlob
      _FilterList.prototype.applyToBlob = promisify(_FilterList_applyToBlob)

      var _FilterList_applyToData = _FilterList.prototype.applyToData
      _FilterList.prototype.applyToData = promisify(_FilterList_applyToData)

      var _FilterList_applyToFile = _FilterList.prototype.applyToFile
      _FilterList.prototype.applyToFile = promisify(_FilterList_applyToFile)

      var _FilterList_load = _FilterList.load
      _FilterList.load = promisify(_FilterList_load)

      var _FilterSource = rawApi.FilterSource

      var _FilterSource_repo = _FilterSource.prototype.repo
      _FilterSource.prototype.repo = promisify(_FilterSource_repo)

      var _Graph = rawApi.Graph

      var _Graph_aheadBehind = _Graph.aheadBehind
      _Graph.aheadBehind = promisify(_Graph_aheadBehind)

      var _Graph_descendantOf = _Graph.descendantOf
      _Graph.descendantOf = promisify(_Graph_descendantOf)

      var _Hashsig = rawApi.Hashsig

      var _Hashsig_create = _Hashsig.create
      _Hashsig.create = promisify(_Hashsig_create)

      var _Hashsig_createFromFile = _Hashsig.createFromFile
      _Hashsig.createFromFile = promisify(_Hashsig_createFromFile)

      var _Ignore = rawApi.Ignore

      var _Ignore_pathIsIgnored = _Ignore.pathIsIgnored
      _Ignore.pathIsIgnored = promisify(_Ignore_pathIsIgnored)

      var _Index = rawApi.Index

      var _Index_add = _Index.prototype.add
      _Index.prototype.add = promisify(_Index_add)

      var _Index_addAll = _Index.prototype.addAll
      _Index.prototype.addAll = promisify(_Index_addAll)

      var _Index_addByPath = _Index.prototype.addByPath
      _Index.prototype.addByPath = promisify(_Index_addByPath)

      var _Index_clear = _Index.prototype.clear
      _Index.prototype.clear = promisify(_Index_clear)

      var _Index_conflictAdd = _Index.prototype.conflictAdd
      _Index.prototype.conflictAdd = promisify(_Index_conflictAdd)

      var _Index_conflictCleanup = _Index.prototype.conflictCleanup
      _Index.prototype.conflictCleanup = promisify(_Index_conflictCleanup)

      var _Index_conflictGet = _Index.prototype.conflictGet
      _Index.prototype.conflictGet = promisify(_Index_conflictGet)

      var _Index_conflictRemove = _Index.prototype.conflictRemove
      _Index.prototype.conflictRemove = promisify(_Index_conflictRemove)

      var _Index_find = _Index.prototype.find
      _Index.prototype.find = promisify(_Index_find)

      var _Index_findPrefix = _Index.prototype.findPrefix
      _Index.prototype.findPrefix = promisify(_Index_findPrefix)

      var _Index_open = _Index.open
      _Index.open = promisify(_Index_open)

      var _Index_read = _Index.prototype.read
      _Index.prototype.read = promisify(_Index_read)

      var _Index_readTree = _Index.prototype.readTree
      _Index.prototype.readTree = promisify(_Index_readTree)

      var _Index_remove = _Index.prototype.remove
      _Index.prototype.remove = promisify(_Index_remove)

      var _Index_removeAll = _Index.prototype.removeAll
      _Index.prototype.removeAll = promisify(_Index_removeAll)

      var _Index_removeByPath = _Index.prototype.removeByPath
      _Index.prototype.removeByPath = promisify(_Index_removeByPath)

      var _Index_removeDirectory = _Index.prototype.removeDirectory
      _Index.prototype.removeDirectory = promisify(_Index_removeDirectory)

      var _Index_updateAll = _Index.prototype.updateAll
      _Index.prototype.updateAll = promisify(_Index_updateAll)

      var _Index_write = _Index.prototype.write
      _Index.prototype.write = promisify(_Index_write)

      var _Index_writeTree = _Index.prototype.writeTree
      _Index.prototype.writeTree = promisify(_Index_writeTree)

      var _Index_writeTreeTo = _Index.prototype.writeTreeTo
      _Index.prototype.writeTreeTo = promisify(_Index_writeTreeTo)

      var _IndexConflictIterator = rawApi.IndexConflictIterator

      var _IndexConflictIterator_create = _IndexConflictIterator.create
      _IndexConflictIterator.create = promisify(_IndexConflictIterator_create)

      var _IndexIterator = rawApi.IndexIterator

      var _IndexIterator_create = _IndexIterator.create
      _IndexIterator.create = promisify(_IndexIterator_create)

      var _IndexNameEntry = rawApi.IndexNameEntry

      var _IndexNameEntry_add = _IndexNameEntry.add
      _IndexNameEntry.add = promisify(_IndexNameEntry_add)

      var _IndexNameEntry_clear = _IndexNameEntry.clear
      _IndexNameEntry.clear = promisify(_IndexNameEntry_clear)

      var _IndexReucEntry = rawApi.IndexReucEntry

      var _IndexReucEntry_add = _IndexReucEntry.add
      _IndexReucEntry.add = promisify(_IndexReucEntry_add)

      var _IndexReucEntry_clear = _IndexReucEntry.clear
      _IndexReucEntry.clear = promisify(_IndexReucEntry_clear)

      var _IndexReucEntry_find = _IndexReucEntry.find
      _IndexReucEntry.find = promisify(_IndexReucEntry_find)

      var _IndexReucEntry_remove = _IndexReucEntry.remove
      _IndexReucEntry.remove = promisify(_IndexReucEntry_remove)

      var _Libgit2 = rawApi.Libgit2
      var _Mailmap = rawApi.Mailmap

      var _Mailmap_addEntry = _Mailmap.prototype.addEntry
      _Mailmap.prototype.addEntry = promisify(_Mailmap_addEntry)

      var _Mailmap_fromBuffer = _Mailmap.fromBuffer
      _Mailmap.fromBuffer = promisify(_Mailmap_fromBuffer)

      var _Mailmap_fromRepository = _Mailmap.fromRepository
      _Mailmap.fromRepository = promisify(_Mailmap_fromRepository)

      var _Mailmap_create = _Mailmap.create
      _Mailmap.create = promisify(_Mailmap_create)

      var _Mailmap_resolve = _Mailmap.prototype.resolve
      _Mailmap.prototype.resolve = promisify(_Mailmap_resolve)

      var _Mailmap_resolveSignature = _Mailmap.prototype.resolveSignature
      _Mailmap.prototype.resolveSignature = promisify(_Mailmap_resolveSignature)

      var _Merge = rawApi.Merge

      var _Merge_merge = _Merge.merge
      _Merge.merge = promisify(_Merge_merge)

      var _Merge_analysis = _Merge.analysis
      _Merge.analysis = promisify(_Merge_analysis)

      var _Merge_analysisForRef = _Merge.analysisForRef
      _Merge.analysisForRef = promisify(_Merge_analysisForRef)

      var _Merge_base = _Merge.base
      _Merge.base = promisify(_Merge_base)

      var _Merge_bases = _Merge.bases
      _Merge.bases = promisify(_Merge_bases)

      var _Merge_commits = _Merge.commits
      _Merge.commits = promisify(_Merge_commits)

      var _Merge_trees = _Merge.trees
      _Merge.trees = promisify(_Merge_trees)

      var _Note = rawApi.Note

      var _Note_commitIteratorNew = _Note.commitIteratorNew
      _Note.commitIteratorNew = promisify(_Note_commitIteratorNew)

      var _Note_commitRead = _Note.commitRead
      _Note.commitRead = promisify(_Note_commitRead)

      var _Note_commitRemove = _Note.commitRemove
      _Note.commitRemove = promisify(_Note_commitRemove)

      var _Note_create = _Note.create
      _Note.create = promisify(_Note_create)

      var _Note_defaultRef = _Note.defaultRef
      _Note.defaultRef = promisify(_Note_defaultRef)

      var _Note_foreach = _Note.foreach
      _Note.foreach = promisify(_Note_foreach)

      var _Note_read = _Note.read
      _Note.read = promisify(_Note_read)

      var _Note_remove = _Note.remove
      _Note.remove = promisify(_Note_remove)

      var _Object = rawApi.Object

      var _Object_dup = _Object.prototype.dup
      _Object.prototype.dup = promisify(_Object_dup)

      var _Object_lookup = _Object.lookup
      _Object.lookup = promisify(_Object_lookup)

      var _Object_lookupByPath = _Object.prototype.lookupByPath
      _Object.prototype.lookupByPath = promisify(_Object_lookupByPath)

      var _Object_lookupPrefix = _Object.lookupPrefix
      _Object.lookupPrefix = promisify(_Object_lookupPrefix)

      var _Object_peel = _Object.prototype.peel
      _Object.prototype.peel = promisify(_Object_peel)

      var _Object_shortId = _Object.prototype.shortId
      _Object.prototype.shortId = promisify(_Object_shortId)

      var _Odb = rawApi.Odb

      var _Odb_addDiskAlternate = _Odb.prototype.addDiskAlternate
      _Odb.prototype.addDiskAlternate = promisify(_Odb_addDiskAlternate)

      var _Odb_existsPrefix = _Odb.prototype.existsPrefix
      _Odb.prototype.existsPrefix = promisify(_Odb_existsPrefix)

      var _Odb_hashfile = _Odb.hashfile
      _Odb.hashfile = promisify(_Odb_hashfile)

      var _Odb_open = _Odb.open
      _Odb.open = promisify(_Odb_open)

      var _Odb_read = _Odb.prototype.read
      _Odb.prototype.read = promisify(_Odb_read)

      var _Odb_readPrefix = _Odb.prototype.readPrefix
      _Odb.prototype.readPrefix = promisify(_Odb_readPrefix)

      var _Odb_write = _Odb.prototype.write
      _Odb.prototype.write = promisify(_Odb_write)

      var _OdbObject = rawApi.OdbObject
      var _Oid = rawApi.Oid
      var _OidShorten = rawApi.OidShorten
      var _Packbuilder = rawApi.Packbuilder

      var _Packbuilder_insert = _Packbuilder.prototype.insert
      _Packbuilder.prototype.insert = promisify(_Packbuilder_insert)

      var _Packbuilder_insertCommit = _Packbuilder.prototype.insertCommit
      _Packbuilder.prototype.insertCommit = promisify(_Packbuilder_insertCommit)

      var _Packbuilder_insertRecur = _Packbuilder.prototype.insertRecur
      _Packbuilder.prototype.insertRecur = promisify(_Packbuilder_insertRecur)

      var _Packbuilder_insertWalk = _Packbuilder.prototype.insertWalk
      _Packbuilder.prototype.insertWalk = promisify(_Packbuilder_insertWalk)

      var _Patch = rawApi.Patch

      var _Patch_fromBlobs = _Patch.fromBlobs
      _Patch.fromBlobs = promisify(_Patch_fromBlobs)

      var _Patch_fromDiff = _Patch.fromDiff
      _Patch.fromDiff = promisify(_Patch_fromDiff)

      var _Patch_getHunk = _Patch.prototype.getHunk
      _Patch.prototype.getHunk = promisify(_Patch_getHunk)

      var _Patch_getLineInHunk = _Patch.prototype.getLineInHunk
      _Patch.prototype.getLineInHunk = promisify(_Patch_getLineInHunk)

      var _Patch_convenientFromDiff = _Patch.convenientFromDiff
      _Patch.convenientFromDiff = promisify(_Patch_convenientFromDiff)

      var _Path = rawApi.Path
      var _Pathspec = rawApi.Pathspec

      var _Pathspec_matchDiff = _Pathspec.prototype.matchDiff
      _Pathspec.prototype.matchDiff = promisify(_Pathspec_matchDiff)

      var _Pathspec_matchIndex = _Pathspec.prototype.matchIndex
      _Pathspec.prototype.matchIndex = promisify(_Pathspec_matchIndex)

      var _Pathspec_matchTree = _Pathspec.prototype.matchTree
      _Pathspec.prototype.matchTree = promisify(_Pathspec_matchTree)

      var _Pathspec_matchWorkdir = _Pathspec.prototype.matchWorkdir
      _Pathspec.prototype.matchWorkdir = promisify(_Pathspec_matchWorkdir)

      var _PathspecMatchList = rawApi.PathspecMatchList
      var _Rebase = rawApi.Rebase

      var _Rebase_abort = _Rebase.prototype.abort
      _Rebase.prototype.abort = promisify(_Rebase_abort)

      var _Rebase_commit = _Rebase.prototype.commit
      _Rebase.prototype.commit = promisify(_Rebase_commit)

      var _Rebase_init = _Rebase.init
      _Rebase.init = promisify(_Rebase_init)

      var _Rebase_next = _Rebase.prototype.next
      _Rebase.prototype.next = promisify(_Rebase_next)

      var _Rebase_open = _Rebase.open
      _Rebase.open = promisify(_Rebase_open)

      var _Refdb = rawApi.Refdb

      var _Refdb_open = _Refdb.open
      _Refdb.open = promisify(_Refdb_open)

      var _Reference = rawApi.Reference

      var _Reference_create = _Reference.create
      _Reference.create = promisify(_Reference_create)

      var _Reference_createMatching = _Reference.createMatching
      _Reference.createMatching = promisify(_Reference_createMatching)

      var _Reference_dup = _Reference.prototype.dup
      _Reference.prototype.dup = promisify(_Reference_dup)

      var _Reference_dwim = _Reference.dwim
      _Reference.dwim = promisify(_Reference_dwim)

      var _Reference_list = _Reference.list
      _Reference.list = promisify(_Reference_list)

      var _Reference_lookup = _Reference.lookup
      _Reference.lookup = promisify(_Reference_lookup)

      var _Reference_nameToId = _Reference.nameToId
      _Reference.nameToId = promisify(_Reference_nameToId)

      var _Reference_peel = _Reference.prototype.peel
      _Reference.prototype.peel = promisify(_Reference_peel)

      var _Reference_rename = _Reference.prototype.rename
      _Reference.prototype.rename = promisify(_Reference_rename)

      var _Reference_resolve = _Reference.prototype.resolve
      _Reference.prototype.resolve = promisify(_Reference_resolve)

      var _Reference_setTarget = _Reference.prototype.setTarget
      _Reference.prototype.setTarget = promisify(_Reference_setTarget)

      var _Reference_symbolicCreate = _Reference.symbolicCreate
      _Reference.symbolicCreate = promisify(_Reference_symbolicCreate)

      var _Reference_symbolicCreateMatching = _Reference.symbolicCreateMatching
      _Reference.symbolicCreateMatching = promisify(
        _Reference_symbolicCreateMatching
      )

      var _Reference_symbolicSetTarget = _Reference.prototype.symbolicSetTarget
      _Reference.prototype.symbolicSetTarget = promisify(
        _Reference_symbolicSetTarget
      )

      var _Reflog = rawApi.Reflog

      var _Reflog_read = _Reflog.read
      _Reflog.read = promisify(_Reflog_read)

      var _Reflog_write = _Reflog.prototype.write
      _Reflog.prototype.write = promisify(_Reflog_write)

      var _ReflogEntry = rawApi.ReflogEntry
      var _Refspec = rawApi.Refspec

      var _Refspec_parse = _Refspec.parse
      _Refspec.parse = promisify(_Refspec_parse)

      var _Remote = rawApi.Remote

      var _Remote_connect = _Remote.prototype.connect
      _Remote.prototype.connect = promisify(_Remote_connect)

      var _Remote_create = _Remote.create
      _Remote.create = promisify(_Remote_create)

      var _Remote_createAnonymous = _Remote.createAnonymous
      _Remote.createAnonymous = promisify(_Remote_createAnonymous)

      var _Remote_createDetached = _Remote.createDetached
      _Remote.createDetached = promisify(_Remote_createDetached)

      var _Remote_createWithFetchspec = _Remote.createWithFetchspec
      _Remote.createWithFetchspec = promisify(_Remote_createWithFetchspec)

      var _Remote_createWithOpts = _Remote.createWithOpts
      _Remote.createWithOpts = promisify(_Remote_createWithOpts)

      var _Remote_defaultBranch = _Remote.prototype.defaultBranch
      _Remote.prototype.defaultBranch = promisify(_Remote_defaultBranch)

      var _Remote_delete = _Remote.delete
      _Remote.delete = promisify(_Remote_delete)

      var _Remote_disconnect = _Remote.prototype.disconnect
      _Remote.prototype.disconnect = promisify(_Remote_disconnect)

      var _Remote_download = _Remote.prototype.download
      _Remote.prototype.download = promisify(_Remote_download)

      var _Remote_dup = _Remote.prototype.dup
      _Remote.prototype.dup = promisify(_Remote_dup)

      var _Remote_fetch = _Remote.prototype.fetch
      _Remote.prototype.fetch = promisify(_Remote_fetch)

      var _Remote_getFetchRefspecs = _Remote.prototype.getFetchRefspecs
      _Remote.prototype.getFetchRefspecs = promisify(_Remote_getFetchRefspecs)

      var _Remote_getPushRefspecs = _Remote.prototype.getPushRefspecs
      _Remote.prototype.getPushRefspecs = promisify(_Remote_getPushRefspecs)

      var _Remote_list = _Remote.list
      _Remote.list = promisify(_Remote_list)

      var _Remote_lookup = _Remote.lookup
      _Remote.lookup = promisify(_Remote_lookup)

      var _Remote_push = _Remote.prototype.push
      _Remote.prototype.push = promisify(_Remote_push)

      var _Remote_rename = _Remote.rename
      _Remote.rename = promisify(_Remote_rename)

      var _Remote_updateTips = _Remote.prototype.updateTips
      _Remote.prototype.updateTips = promisify(_Remote_updateTips)

      var _Remote_upload = _Remote.prototype.upload
      _Remote.prototype.upload = promisify(_Remote_upload)

      var _Remote_referenceList = _Remote.prototype.referenceList
      _Remote.prototype.referenceList = promisify(_Remote_referenceList)

      var _Repository = rawApi.Repository

      var _Repository_config = _Repository.prototype.config
      _Repository.prototype.config = promisify(_Repository_config)

      var _Repository_discover = _Repository.discover
      _Repository.discover = promisify(_Repository_discover)

      var _Repository_fetchheadForeach = _Repository.prototype.fetchheadForeach
      _Repository.prototype.fetchheadForeach = promisify(
        _Repository_fetchheadForeach
      )

      var _Repository_head = _Repository.prototype.head
      _Repository.prototype.head = promisify(_Repository_head)

      var _Repository_headForWorktree = _Repository.prototype.headForWorktree
      _Repository.prototype.headForWorktree = promisify(
        _Repository_headForWorktree
      )

      var _Repository_index = _Repository.prototype.index
      _Repository.prototype.index = promisify(_Repository_index)

      var _Repository_init = _Repository.init
      _Repository.init = promisify(_Repository_init)

      var _Repository_initExt = _Repository.initExt
      _Repository.initExt = promisify(_Repository_initExt)

      var _Repository_itemPath = _Repository.prototype.itemPath
      _Repository.prototype.itemPath = promisify(_Repository_itemPath)

      var _Repository_mergeheadForeach = _Repository.prototype.mergeheadForeach
      _Repository.prototype.mergeheadForeach = promisify(
        _Repository_mergeheadForeach
      )

      var _Repository_odb = _Repository.prototype.odb
      _Repository.prototype.odb = promisify(_Repository_odb)

      var _Repository_open = _Repository.open
      _Repository.open = promisify(_Repository_open)

      var _Repository_openBare = _Repository.openBare
      _Repository.openBare = promisify(_Repository_openBare)

      var _Repository_openExt = _Repository.openExt
      _Repository.openExt = promisify(_Repository_openExt)

      var _Repository_openFromWorktree = _Repository.openFromWorktree
      _Repository.openFromWorktree = promisify(_Repository_openFromWorktree)

      var _Repository_refdb = _Repository.prototype.refdb
      _Repository.prototype.refdb = promisify(_Repository_refdb)

      var _Repository_setHead = _Repository.prototype.setHead
      _Repository.prototype.setHead = promisify(_Repository_setHead)

      var _Repository_wrapOdb = _Repository.wrapOdb
      _Repository.wrapOdb = promisify(_Repository_wrapOdb)

      var _Repository_cleanup = _Repository.prototype.cleanup
      _Repository.prototype.cleanup = promisify(_Repository_cleanup)

      var _Repository_getReferences = _Repository.prototype.getReferences
      _Repository.prototype.getReferences = promisify(_Repository_getReferences)

      var _Repository_getSubmodules = _Repository.prototype.getSubmodules
      _Repository.prototype.getSubmodules = promisify(_Repository_getSubmodules)

      var _Repository_getRemotes = _Repository.prototype.getRemotes
      _Repository.prototype.getRemotes = promisify(_Repository_getRemotes)

      var _Repository_refreshReferences =
        _Repository.prototype.refreshReferences
      _Repository.prototype.refreshReferences = promisify(
        _Repository_refreshReferences
      )

      var _Reset = rawApi.Reset

      var _Reset_reset = _Reset.reset
      _Reset.reset = promisify(_Reset_reset)

      var _Reset_default = _Reset.default
      _Reset.default = promisify(_Reset_default)

      var _Reset_fromAnnotated = _Reset.fromAnnotated
      _Reset.fromAnnotated = promisify(_Reset_fromAnnotated)

      var _Revert = rawApi.Revert

      var _Revert_revert = _Revert.revert
      _Revert.revert = promisify(_Revert_revert)

      var _Revert_commit = _Revert.commit
      _Revert.commit = promisify(_Revert_commit)

      var _Revparse = rawApi.Revparse

      var _Revparse_single = _Revparse.single
      _Revparse.single = promisify(_Revparse_single)

      var _Revwalk = rawApi.Revwalk

      var _Revwalk_next = _Revwalk.prototype.next
      _Revwalk.prototype.next = promisify(_Revwalk_next)

      var _Revwalk_commitWalk = _Revwalk.prototype.commitWalk
      _Revwalk.prototype.commitWalk = promisify(_Revwalk_commitWalk)

      var _Revwalk_fastWalk = _Revwalk.prototype.fastWalk
      _Revwalk.prototype.fastWalk = promisify(_Revwalk_fastWalk)

      var _Revwalk_fileHistoryWalk = _Revwalk.prototype.fileHistoryWalk
      _Revwalk.prototype.fileHistoryWalk = promisify(_Revwalk_fileHistoryWalk)

      var _Signature = rawApi.Signature

      var _Signature_default = _Signature.default
      _Signature.default = promisify(_Signature_default)

      var _Signature_fromBuffer = _Signature.fromBuffer
      _Signature.fromBuffer = promisify(_Signature_fromBuffer)

      var _Stash = rawApi.Stash

      var _Stash_apply = _Stash.apply
      _Stash.apply = promisify(_Stash_apply)

      var _Stash_drop = _Stash.drop
      _Stash.drop = promisify(_Stash_drop)

      var _Stash_foreach = _Stash.foreach
      _Stash.foreach = promisify(_Stash_foreach)

      var _Stash_pop = _Stash.pop
      _Stash.pop = promisify(_Stash_pop)

      var _Stash_save = _Stash.save
      _Stash.save = promisify(_Stash_save)

      var _Status = rawApi.Status

      var _Status_file = _Status.file
      _Status.file = promisify(_Status_file)

      var _Status_foreach = _Status.foreach
      _Status.foreach = promisify(_Status_foreach)

      var _Status_foreachExt = _Status.foreachExt
      _Status.foreachExt = promisify(_Status_foreachExt)

      var _StatusList = rawApi.StatusList

      var _StatusList_create = _StatusList.create
      _StatusList.create = promisify(_StatusList_create)

      var _Strarray = rawApi.Strarray
      var _Submodule = rawApi.Submodule

      var _Submodule_addFinalize = _Submodule.prototype.addFinalize
      _Submodule.prototype.addFinalize = promisify(_Submodule_addFinalize)

      var _Submodule_addSetup = _Submodule.addSetup
      _Submodule.addSetup = promisify(_Submodule_addSetup)

      var _Submodule_addToIndex = _Submodule.prototype.addToIndex
      _Submodule.prototype.addToIndex = promisify(_Submodule_addToIndex)

      var _Submodule_clone = _Submodule.prototype.clone
      _Submodule.prototype.clone = promisify(_Submodule_clone)

      var _Submodule_foreach = _Submodule.foreach
      _Submodule.foreach = promisify(_Submodule_foreach)

      var _Submodule_init = _Submodule.prototype.init
      _Submodule.prototype.init = promisify(_Submodule_init)

      var _Submodule_location = _Submodule.prototype.location
      _Submodule.prototype.location = promisify(_Submodule_location)

      var _Submodule_lookup = _Submodule.lookup
      _Submodule.lookup = promisify(_Submodule_lookup)

      var _Submodule_open = _Submodule.prototype.open
      _Submodule.prototype.open = promisify(_Submodule_open)

      var _Submodule_repoInit = _Submodule.prototype.repoInit
      _Submodule.prototype.repoInit = promisify(_Submodule_repoInit)

      var _Submodule_resolveUrl = _Submodule.resolveUrl
      _Submodule.resolveUrl = promisify(_Submodule_resolveUrl)

      var _Submodule_setIgnore = _Submodule.setIgnore
      _Submodule.setIgnore = promisify(_Submodule_setIgnore)

      var _Submodule_setUpdate = _Submodule.setUpdate
      _Submodule.setUpdate = promisify(_Submodule_setUpdate)

      var _Submodule_setUrl = _Submodule.setUrl
      _Submodule.setUrl = promisify(_Submodule_setUrl)

      var _Submodule_status = _Submodule.status
      _Submodule.status = promisify(_Submodule_status)

      var _Submodule_sync = _Submodule.prototype.sync
      _Submodule.prototype.sync = promisify(_Submodule_sync)

      var _Submodule_update = _Submodule.prototype.update
      _Submodule.prototype.update = promisify(_Submodule_update)

      var _Tag = rawApi.Tag

      var _Tag_annotationCreate = _Tag.annotationCreate
      _Tag.annotationCreate = promisify(_Tag_annotationCreate)

      var _Tag_create = _Tag.create
      _Tag.create = promisify(_Tag_create)

      var _Tag_createFromBuffer = _Tag.createFromBuffer
      _Tag.createFromBuffer = promisify(_Tag_createFromBuffer)

      var _Tag_createLightweight = _Tag.createLightweight
      _Tag.createLightweight = promisify(_Tag_createLightweight)

      var _Tag_delete = _Tag.delete
      _Tag.delete = promisify(_Tag_delete)

      var _Tag_dup = _Tag.prototype.dup
      _Tag.prototype.dup = promisify(_Tag_dup)

      var _Tag_list = _Tag.list
      _Tag.list = promisify(_Tag_list)

      var _Tag_listMatch = _Tag.listMatch
      _Tag.listMatch = promisify(_Tag_listMatch)

      var _Tag_lookup = _Tag.lookup
      _Tag.lookup = promisify(_Tag_lookup)

      var _Tag_lookupPrefix = _Tag.lookupPrefix
      _Tag.lookupPrefix = promisify(_Tag_lookupPrefix)

      var _Tag_peel = _Tag.prototype.peel
      _Tag.prototype.peel = promisify(_Tag_peel)

      var _Tag_target = _Tag.prototype.target
      _Tag.prototype.target = promisify(_Tag_target)

      var _Transaction = rawApi.Transaction

      var _Transaction_create = _Transaction.create
      _Transaction.create = promisify(_Transaction_create)

      var _Tree = rawApi.Tree

      var _Tree_createUpdated = _Tree.prototype.createUpdated
      _Tree.prototype.createUpdated = promisify(_Tree_createUpdated)

      var _Tree_dup = _Tree.prototype.dup
      _Tree.prototype.dup = promisify(_Tree_dup)

      var _Tree_entryByPath = _Tree.prototype.entryByPath
      _Tree.prototype.entryByPath = promisify(_Tree_entryByPath)

      var _Tree_lookup = _Tree.lookup
      _Tree.lookup = promisify(_Tree_lookup)

      var _Tree_lookupPrefix = _Tree.lookupPrefix
      _Tree.lookupPrefix = promisify(_Tree_lookupPrefix)

      var _TreeEntry = rawApi.TreeEntry

      var _TreeEntry_toObject = _TreeEntry.prototype.toObject
      _TreeEntry.prototype.toObject = promisify(_TreeEntry_toObject)

      var _Treebuilder = rawApi.Treebuilder

      var _Treebuilder_create = _Treebuilder.create
      _Treebuilder.create = promisify(_Treebuilder_create)

      var _Treebuilder_write = _Treebuilder.prototype.write
      _Treebuilder.prototype.write = promisify(_Treebuilder_write)

      var _Worktree = rawApi.Worktree

      var _Worktree_add = _Worktree.add
      _Worktree.add = promisify(_Worktree_add)

      var _Worktree_list = _Worktree.list
      _Worktree.list = promisify(_Worktree_list)

      var _Worktree_lookup = _Worktree.lookup
      _Worktree.lookup = promisify(_Worktree_lookup)

      var _Worktree_openFromRepository = _Worktree.openFromRepository
      _Worktree.openFromRepository = promisify(_Worktree_openFromRepository)

      var _ConvenientPatch = rawApi.ConvenientPatch
      var _ConvenientPatch_hunks = _ConvenientPatch.prototype.hunks
      _ConvenientPatch.prototype.hunks = promisify(_ConvenientPatch_hunks)

      var _ConvenientHunk = rawApi.ConvenientHunk
      var _ConvenientHunk_lines = _ConvenientHunk.prototype.lines
      _ConvenientHunk.prototype.lines = promisify(_ConvenientHunk_lines)

      var _FilterRegistry = rawApi.FilterRegistry
      var _FilterRegistry_register = _FilterRegistry.register
      _FilterRegistry.register = promisify(_FilterRegistry_register)

      var _FilterRegistry_unregister = _FilterRegistry.unregister
      _FilterRegistry.unregister = promisify(_FilterRegistry_unregister)

      /* jshint ignore:end */

      // Set the exports prototype to the raw API.
      exports.__proto__ = rawApi

      var importExtension = function importExtension(name) {
        try {
          require('./' + name)
        } catch (unhandledException) {
          if (unhandledException.code != 'MODULE_NOT_FOUND') {
            throw unhandledException
          }
        }
      }

      // Load up utils
      rawApi.Utils = {}
      __nccwpck_require__(8901)
      __nccwpck_require__(1379)
      __nccwpck_require__(394)
      __nccwpck_require__(9988)

      // Load up extra types;
      __nccwpck_require__(5130)
      __nccwpck_require__(4856)

      // Import extensions
      // [Manual] extensions
      importExtension('filter_registry')
      importExtension('annotated_commit')
      importExtension('apply')
      importExtension('apply_options')
      importExtension('apply_options')
      importExtension('attr')
      importExtension('blame')
      importExtension('blame_hunk')
      importExtension('blame_options')
      importExtension('blob')
      importExtension('blob_filter_options')
      importExtension('blob_filter_options')
      importExtension('branch')
      importExtension('branch_iterator')
      importExtension('buf')
      importExtension('cert')
      importExtension('cert_hostkey')
      importExtension('cert_x509')
      importExtension('checkout')
      importExtension('checkout_options')
      importExtension('checkout_perfdata')
      importExtension('cherrypick')
      importExtension('cherrypick_options')
      importExtension('clone')
      importExtension('clone_options')
      importExtension('commit')
      importExtension('config')
      importExtension('config_entry')
      importExtension('config_entry')
      importExtension('config_iterator')
      importExtension('configmap')
      importExtension('cred')
      importExtension('describe_format_options')
      importExtension('describe_format_options')
      importExtension('describe_options')
      importExtension('describe_options')
      importExtension('describe_result')
      importExtension('diff')
      importExtension('diff_binary')
      importExtension('diff_binary_file')
      importExtension('diff_delta')
      importExtension('diff_file')
      importExtension('diff_find_options')
      importExtension('diff_hunk')
      importExtension('diff_line')
      importExtension('diff_options')
      importExtension('diff_patchid_options')
      importExtension('diff_perfdata')
      importExtension('diff_stats')
      importExtension('error')
      importExtension('fetch')
      importExtension('fetch_options')
      importExtension('fetch_options')
      importExtension('filter')
      importExtension('filter')
      importExtension('filter_list')
      importExtension('filter_source')
      importExtension('graph')
      importExtension('hashsig')
      importExtension('ignore')
      importExtension('index')
      importExtension('index_conflict_iterator')
      importExtension('index_entry')
      importExtension('index_iterator')
      importExtension('index_name_entry')
      importExtension('index_reuc_entry')
      importExtension('index_time')
      importExtension('indexer_progress')
      importExtension('libgit2')
      importExtension('mailmap')
      importExtension('merge')
      importExtension('merge_file_input')
      importExtension('merge_file_options')
      importExtension('merge_options')
      importExtension('note')
      importExtension('note_iterator')
      importExtension('object')
      importExtension('odb')
      importExtension('odb_object')
      importExtension('oid')
      importExtension('oid_shorten')
      importExtension('oidarray')
      importExtension('packbuilder')
      importExtension('patch')
      importExtension('path')
      importExtension('pathspec')
      importExtension('pathspec_match_list')
      importExtension('proxy')
      importExtension('proxy_options')
      importExtension('push_options')
      importExtension('push_update')
      importExtension('rebase')
      importExtension('rebase_operation')
      importExtension('rebase_options')
      importExtension('rebase_options')
      importExtension('refdb')
      importExtension('reference')
      importExtension('reflog')
      importExtension('reflog_entry')
      importExtension('refspec')
      importExtension('remote')
      importExtension('remote_callbacks')
      importExtension('remote_callbacks')
      importExtension('remote_create_options')
      importExtension('remote_create_options')
      importExtension('remote_head')
      importExtension('remote_head')
      importExtension('repository')
      importExtension('repository_init_options')
      importExtension('reset')
      importExtension('revert')
      importExtension('revert_options')
      importExtension('revparse')
      importExtension('revwalk')
      importExtension('signature')
      importExtension('stash')
      importExtension('stash_apply_options')
      importExtension('stash_apply_options')
      importExtension('status')
      importExtension('status_entry')
      importExtension('status_list')
      importExtension('status_options')
      importExtension('status_options')
      importExtension('strarray')
      importExtension('submodule')
      importExtension('submodule_update_options')
      importExtension('tag')
      importExtension('time')
      importExtension('trace')
      importExtension('transaction')
      importExtension('transport')
      importExtension('tree')
      importExtension('tree_entry')
      importExtension('tree_update')
      importExtension('treebuilder')
      importExtension('worktree')
      importExtension('worktree_add_options')
      importExtension('worktree_add_options')
      importExtension('worktree_prune_options')
      importExtension('worktree_prune_options')
      importExtension('writestream')
      /* jshint ignore:start */

      // Inherit directly from the original Apply object.
      _Apply.apply.__proto__ = _Apply

      // Ensure we're using the correct prototype.
      _Apply.apply.prototype = _Apply.prototype

      // Assign the function as the root
      rawApi.Apply = _Apply.apply

      // Inherit directly from the original Cherrypick object.
      _Cherrypick.cherrypick.__proto__ = _Cherrypick

      // Ensure we're using the correct prototype.
      _Cherrypick.cherrypick.prototype = _Cherrypick.prototype

      // Assign the function as the root
      rawApi.Cherrypick = _Cherrypick.cherrypick

      // Inherit directly from the original Clone object.
      _Clone.clone.__proto__ = _Clone

      // Ensure we're using the correct prototype.
      _Clone.clone.prototype = _Clone.prototype

      // Assign the function as the root
      rawApi.Clone = _Clone.clone

      // Inherit directly from the original Merge object.
      _Merge.merge.__proto__ = _Merge

      // Ensure we're using the correct prototype.
      _Merge.merge.prototype = _Merge.prototype

      // Assign the function as the root
      rawApi.Merge = _Merge.merge

      // Inherit directly from the original Reset object.
      _Reset.reset.__proto__ = _Reset

      // Ensure we're using the correct prototype.
      _Reset.reset.prototype = _Reset.prototype

      // Assign the function as the root
      rawApi.Reset = _Reset.reset

      // Inherit directly from the original Revert object.
      _Revert.revert.__proto__ = _Revert

      // Ensure we're using the correct prototype.
      _Revert.revert.prototype = _Revert.prototype

      // Assign the function as the root
      rawApi.Revert = _Revert.revert

      /* jshint ignore:end */

      // Set version.
      exports.version = __nccwpck_require__(8115).version

      // Expose Promise implementation.
      exports.Promise = Promise

      /***/
    },

    /***/ 5130: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      var NodeGit = __nccwpck_require__(2596)
      var Status = NodeGit.Status

      var StatusFile = function StatusFile(args) {
        var path = args.path
        var status = args.status
        var entry = args.entry

        if (entry) {
          status = entry.status()
          if (entry.indexToWorkdir()) {
            path = entry.indexToWorkdir().newFile().path()
          } else {
            path = entry.headToIndex().newFile().path()
          }
        }

        var codes = Status.STATUS

        var getStatus = function getStatus() {
          var fileStatuses = []

          for (var key in Status.STATUS) {
            if (status & Status.STATUS[key]) {
              fileStatuses.push(key)
            }
          }

          return fileStatuses
        }

        var data = {
          path: path,
          entry: entry,
          statusBit: status,
          statuses: getStatus(),
        }

        return {
          headToIndex: function headToIndex() {
            if (data.entry) {
              return entry.headToIndex()
            } else {
              return undefined
            }
          },
          indexToWorkdir: function indexToWorkdir() {
            if (data.entry) {
              return entry.indexToWorkdir()
            } else {
              return undefined
            }
          },
          inIndex: function inIndex() {
            return (
              status & codes.INDEX_NEW ||
              status & codes.INDEX_MODIFIED ||
              status & codes.INDEX_DELETED ||
              status & codes.INDEX_TYPECHANGE ||
              status & codes.INDEX_RENAMED
            )
          },
          inWorkingTree: function inWorkingTree() {
            return (
              status & codes.WT_NEW ||
              status & codes.WT_MODIFIED ||
              status & codes.WT_DELETED ||
              status & codes.WT_TYPECHANGE ||
              status & codes.WT_RENAMED
            )
          },
          isConflicted: function isConflicted() {
            return status & codes.CONFLICTED
          },
          isDeleted: function isDeleted() {
            return status & codes.WT_DELETED || status & codes.INDEX_DELETED
          },
          isIgnored: function isIgnored() {
            return status & codes.IGNORED
          },
          isModified: function isModified() {
            return status & codes.WT_MODIFIED || status & codes.INDEX_MODIFIED
          },
          isNew: function isNew() {
            return status & codes.WT_NEW || status & codes.INDEX_NEW
          },
          isRenamed: function isRenamed() {
            return status & codes.WT_RENAMED || status & codes.INDEX_RENAMED
          },
          isTypechange: function isTypechange() {
            return (
              status & codes.WT_TYPECHANGE || status & codes.INDEX_TYPECHANGE
            )
          },
          path: function path() {
            return data.path
          },
          status: function status() {
            return data.statuses
          },
          statusBit: function statusBit() {
            return data.statusBit
          },
        }
      }

      NodeGit.StatusFile = StatusFile

      /***/
    },

    /***/ 8901: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      var NodeGit = __nccwpck_require__(2596)

      /**
       * Wraps a method so that you can pass in either a string, OID or the object
       * itself and you will always get back a promise that resolves to the object.
       * @param {Object} objectType The object type that you're expecting to receive.
       * @param {Function} lookupFunction  The function to do the lookup for the
       *                                   object. Defaults to `objectType.lookup`.
       * @return {Function}
       */
      function lookupWrapper(objectType, lookupFunction) {
        lookupFunction = lookupFunction || objectType.lookup

        return function (repo, id, callback) {
          if (id instanceof objectType) {
            return Promise.resolve(id).then(function (obj) {
              obj.repo = repo

              if (typeof callback === 'function') {
                callback(null, obj)
              }

              return obj
            }, callback)
          }

          return lookupFunction(repo, id).then(function (obj) {
            obj.repo = repo

            if (typeof callback === 'function') {
              callback(null, obj)
            }

            return obj
          }, callback)
        }
      }

      NodeGit.Utils.lookupWrapper = lookupWrapper

      /***/
    },

    /***/ 9988: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      var NodeGit = __nccwpck_require__(2596)
      var normalizeOptions = NodeGit.Utils.normalizeOptions
      var shallowClone = NodeGit.Utils.shallowClone

      /**
       * Normalize an object to match a struct.
       *
       * @param {String, Object} oid - The oid string or instance.
       * @return {Object} An Oid instance.
       */
      function normalizeFetchOptions(options) {
        if (options instanceof NodeGit.FetchOptions) {
          return options
        }

        var callbacks
        var proxyOpts

        if (options) {
          options = shallowClone(options)
          callbacks = options.callbacks
          proxyOpts = options.proxyOpts
          delete options.callbacks
          delete options.proxyOpts
        } else {
          options = {}
        }

        options = normalizeOptions(options, NodeGit.FetchOptions)

        if (callbacks) {
          options.callbacks = normalizeOptions(
            callbacks,
            NodeGit.RemoteCallbacks
          )
        }

        if (proxyOpts) {
          options.proxyOpts = normalizeOptions(proxyOpts, NodeGit.ProxyOptions)
        }
        return options
      }

      NodeGit.Utils.normalizeFetchOptions = normalizeFetchOptions

      /***/
    },

    /***/ 1379: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      var NodeGit = __nccwpck_require__(2596)

      /**
       * Normalize an object to match a struct.
       *
       * @param {String, Object} oid - The oid string or instance.
       * @return {Object} An Oid instance.
       */
      function normalizeOptions(options, Ctor) {
        if (!options) {
          return null
        }

        if (options instanceof Ctor) {
          return options
        }

        var instance = new Ctor()

        Object.keys(options).forEach(function (key) {
          if (typeof options[key] !== 'undefined') {
            instance[key] = options[key]
          }
        })

        return instance
      }

      NodeGit.Utils.normalizeOptions = normalizeOptions

      /***/
    },

    /***/ 394: /***/ (
      __unused_webpack_module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      var NodeGit = __nccwpck_require__(2596)

      function shallowClone() {
        var merges = Array.prototype.slice.call(arguments)

        return merges.reduce(function (obj, merge) {
          return Object.keys(merge).reduce(function (obj, key) {
            obj[key] = merge[key]
            return obj
          }, obj)
        }, {})
      }

      NodeGit.Utils.shallowClone = shallowClone

      /***/
    },

    /***/ 6939: /***/ (
      __unused_webpack_module,
      exports,
      __nccwpck_require__
    ) => {
      'use strict'
      /*
       * readlineSync
       * https://github.com/anseki/readline-sync
       *
       * Copyright (c) 2019 anseki
       * Licensed under the MIT license.
       */

      var IS_WIN = process.platform === 'win32',
        ALGORITHM_CIPHER = 'aes-256-cbc',
        ALGORITHM_HASH = 'sha256',
        DEFAULT_ERR_MSG =
          "The current environment doesn't support interactive reading from TTY.",
        fs = __nccwpck_require__(5747),
        TTY = process.binding('tty_wrap').TTY,
        childProc = __nccwpck_require__(3129),
        pathUtil = __nccwpck_require__(5622),
        defaultOptions = {
          /* eslint-disable key-spacing */
          prompt: '> ',
          hideEchoBack: false,
          mask: '*',
          limit: [],
          limitMessage: 'Input another, please.$<( [)limit(])>',
          defaultInput: '',
          trueValue: [],
          falseValue: [],
          caseSensitive: false,
          keepWhitespace: false,
          encoding: 'utf8',
          bufferSize: 1024,
          print: void 0,
          history: true,
          cd: false,
          phContent: void 0,
          preCheck: void 0,
          /* eslint-enable key-spacing */
        },
        fdR = 'none',
        isRawMode = false,
        salt = 0,
        lastInput = '',
        inputHistory = [],
        _DBG_useExt = false,
        _DBG_checkOptions = false,
        _DBG_checkMethod = false,
        fdW,
        ttyR,
        extHostPath,
        extHostArgs,
        tempdir,
        rawInput

      function getHostArgs(options) {
        // Send any text to crazy Windows shell safely.
        function encodeArg(arg) {
          return arg.replace(/[^\w\u0080-\uFFFF]/g, function (chr) {
            return '#' + chr.charCodeAt(0) + ';'
          })
        }

        return extHostArgs.concat(
          (function (conf) {
            var args = []
            Object.keys(conf).forEach(function (optionName) {
              if (conf[optionName] === 'boolean') {
                if (options[optionName]) {
                  args.push('--' + optionName)
                }
              } else if (conf[optionName] === 'string') {
                if (options[optionName]) {
                  args.push('--' + optionName, encodeArg(options[optionName]))
                }
              }
            })
            return args
          })({
            /* eslint-disable key-spacing */
            display: 'string',
            displayOnly: 'boolean',
            keyIn: 'boolean',
            hideEchoBack: 'boolean',
            mask: 'string',
            limit: 'string',
            caseSensitive: 'boolean',
            /* eslint-enable key-spacing */
          })
        )
      }

      // piping via files (for Node.js v0.10-)
      function _execFileSync(options, execOptions) {
        function getTempfile(name) {
          var suffix = '',
            filepath,
            fd
          tempdir = tempdir || __nccwpck_require__(2087).tmpdir()

          while (true) {
            filepath = pathUtil.join(tempdir, name + suffix)
            try {
              fd = fs.openSync(filepath, 'wx')
            } catch (e) {
              if (e.code === 'EEXIST') {
                suffix++
                continue
              } else {
                throw e
              }
            }
            fs.closeSync(fd)
            break
          }
          return filepath
        }

        var res = {},
          pathStdout = getTempfile('readline-sync.stdout'),
          pathStderr = getTempfile('readline-sync.stderr'),
          pathExit = getTempfile('readline-sync.exit'),
          pathDone = getTempfile('readline-sync.done'),
          crypto = __nccwpck_require__(6417),
          hostArgs,
          shellPath,
          shellArgs,
          exitCode,
          extMessage,
          shasum,
          decipher,
          password

        shasum = crypto.createHash(ALGORITHM_HASH)
        shasum.update('' + process.pid + salt++ + Math.random())
        password = shasum.digest('hex')
        decipher = crypto.createDecipher(ALGORITHM_CIPHER, password)

        hostArgs = getHostArgs(options)
        if (IS_WIN) {
          shellPath = process.env.ComSpec || 'cmd.exe'
          process.env.Q = '"' // The quote (") that isn't escaped.
          // `()` for ignore space by echo
          shellArgs = [
            '/V:ON',
            '/S',
            '/C',
            '(%Q%' +
              shellPath +
              '%Q% /V:ON /S /C %Q%' /* ESLint bug? */ + // eslint-disable-line no-path-concat
              '%Q%' +
              extHostPath +
              '%Q%' +
              hostArgs
                .map(function (arg) {
                  return ' %Q%' + arg + '%Q%'
                })
                .join('') +
              ' & (echo !ERRORLEVEL!)>%Q%' +
              pathExit +
              '%Q%%Q%) 2>%Q%' +
              pathStderr +
              '%Q%' +
              ' |%Q%' +
              process.execPath +
              '%Q% %Q%' +
              __dirname +
              '\\encrypt.js%Q%' +
              ' %Q%' +
              ALGORITHM_CIPHER +
              '%Q% %Q%' +
              password +
              '%Q%' +
              ' >%Q%' +
              pathStdout +
              '%Q%' +
              ' & (echo 1)>%Q%' +
              pathDone +
              '%Q%',
          ]
        } else {
          shellPath = '/bin/sh'
          shellArgs = [
            '-c',
            // Use `()`, not `{}` for `-c` (text param)
            '("' +
              extHostPath +
              '"' /* ESLint bug? */ + // eslint-disable-line no-path-concat
              hostArgs
                .map(function (arg) {
                  return " '" + arg.replace(/'/g, "'\\''") + "'"
                })
                .join('') +
              '; echo $?>"' +
              pathExit +
              '") 2>"' +
              pathStderr +
              '"' +
              ' |"' +
              process.execPath +
              '" "' +
              __dirname +
              '/encrypt.js"' +
              ' "' +
              ALGORITHM_CIPHER +
              '" "' +
              password +
              '"' +
              ' >"' +
              pathStdout +
              '"' +
              '; echo 1 >"' +
              pathDone +
              '"',
          ]
        }
        if (_DBG_checkMethod) {
          _DBG_checkMethod('_execFileSync', hostArgs)
        }
        try {
          childProc.spawn(shellPath, shellArgs, execOptions)
        } catch (e) {
          res.error = new Error(e.message)
          res.error.method = '_execFileSync - spawn'
          res.error.program = shellPath
          res.error.args = shellArgs
        }

        while (
          fs.readFileSync(pathDone, { encoding: options.encoding }).trim() !==
          '1'
        ) {} // eslint-disable-line no-empty
        if (
          (exitCode = fs
            .readFileSync(pathExit, { encoding: options.encoding })
            .trim()) === '0'
        ) {
          res.input =
            decipher.update(
              fs.readFileSync(pathStdout, { encoding: 'binary' }),
              'hex',
              options.encoding
            ) + decipher.final(options.encoding)
        } else {
          extMessage = fs
            .readFileSync(pathStderr, { encoding: options.encoding })
            .trim()
          res.error = new Error(
            DEFAULT_ERR_MSG + (extMessage ? '\n' + extMessage : '')
          )
          res.error.method = '_execFileSync'
          res.error.program = shellPath
          res.error.args = shellArgs
          res.error.extMessage = extMessage
          res.error.exitCode = +exitCode
        }

        fs.unlinkSync(pathStdout)
        fs.unlinkSync(pathStderr)
        fs.unlinkSync(pathExit)
        fs.unlinkSync(pathDone)

        return res
      }

      function readlineExt(options) {
        var res = {},
          execOptions = { env: process.env, encoding: options.encoding },
          hostArgs,
          extMessage

        if (!extHostPath) {
          if (IS_WIN) {
            if (process.env.PSModulePath) {
              // Windows PowerShell
              extHostPath = 'powershell.exe'
              extHostArgs = [
                '-ExecutionPolicy',
                'Bypass',
                '-File',
                __dirname + '\\read.ps1',
              ] // eslint-disable-line no-path-concat
            } else {
              // Windows Script Host
              extHostPath = 'cscript.exe'
              extHostArgs = ['//nologo', __dirname + '\\read.cs.js'] // eslint-disable-line no-path-concat
            }
          } else {
            extHostPath = '/bin/sh'
            extHostArgs = [__nccwpck_require__.ab + 'read.sh'] // eslint-disable-line no-path-concat
          }
        }
        if (IS_WIN && !process.env.PSModulePath) {
          // Windows Script Host
          // ScriptPW (Win XP and Server2003) needs TTY stream as STDIN.
          // In this case, If STDIN isn't TTY, an error is thrown.
          execOptions.stdio = [process.stdin]
        }

        if (childProc.execFileSync) {
          hostArgs = getHostArgs(options)
          if (_DBG_checkMethod) {
            _DBG_checkMethod('execFileSync', hostArgs)
          }
          try {
            res.input = childProc.execFileSync(
              extHostPath,
              hostArgs,
              execOptions
            )
          } catch (e) {
            // non-zero exit code
            extMessage = e.stderr ? (e.stderr + '').trim() : ''
            res.error = new Error(
              DEFAULT_ERR_MSG + (extMessage ? '\n' + extMessage : '')
            )
            res.error.method = 'execFileSync'
            res.error.program = extHostPath
            res.error.args = hostArgs
            res.error.extMessage = extMessage
            res.error.exitCode = e.status
            res.error.code = e.code
            res.error.signal = e.signal
          }
        } else {
          res = _execFileSync(options, execOptions)
        }
        if (!res.error) {
          res.input = res.input.replace(/^\s*'|'\s*$/g, '')
          options.display = ''
        }

        return res
      }

      /*
  display:            string
  displayOnly:        boolean
  keyIn:              boolean
  hideEchoBack:       boolean
  mask:               string
  limit:              string (pattern)
  caseSensitive:      boolean
  keepWhitespace:     boolean
  encoding, bufferSize, print
*/
      function _readlineSync(options) {
        var input = '',
          displaySave = options.display,
          silent =
            !options.display &&
            options.keyIn &&
            options.hideEchoBack &&
            !options.mask

        function tryExt() {
          var res = readlineExt(options)
          if (res.error) {
            throw res.error
          }
          return res.input
        }

        if (_DBG_checkOptions) {
          _DBG_checkOptions(options)
        }

        ;(function () {
          // open TTY
          var fsB, constants, verNum

          function getFsB() {
            if (!fsB) {
              fsB = process.binding('fs') // For raw device path
              constants = process.binding('constants')
              // for v6.3.0+
              constants =
                constants &&
                constants.fs &&
                typeof constants.fs.O_RDWR === 'number'
                  ? constants.fs
                  : constants
            }
            return fsB
          }

          if (typeof fdR !== 'string') {
            return
          }
          fdR = null

          if (IS_WIN) {
            // iojs-v2.3.2+ input stream can't read first line. (#18)
            // ** Don't get process.stdin before check! **
            // Fixed v5.1.0
            // Fixed v4.2.4
            // It regressed again in v5.6.0, it is fixed in v6.2.0.
            verNum = (function (ver) {
              // getVerNum
              var nums = ver.replace(/^\D+/, '').split('.')
              var verNum = 0
              if ((nums[0] = +nums[0])) {
                verNum += nums[0] * 10000
              }
              if ((nums[1] = +nums[1])) {
                verNum += nums[1] * 100
              }
              if ((nums[2] = +nums[2])) {
                verNum += nums[2]
              }
              return verNum
            })(process.version)
            if (
              !(
                (verNum >= 20302 && verNum < 40204) ||
                (verNum >= 50000 && verNum < 50100) ||
                (verNum >= 50600 && verNum < 60200)
              ) &&
              process.stdin.isTTY
            ) {
              process.stdin.pause()
              fdR = process.stdin.fd
              ttyR = process.stdin._handle
            } else {
              try {
                // The stream by fs.openSync('\\\\.\\CON', 'r') can't switch to raw mode.
                // 'CONIN$' might fail on XP, 2000, 7 (x86).
                fdR = getFsB().open(
                  'CONIN$',
                  constants.O_RDWR,
                  parseInt('0666', 8)
                )
                ttyR = new TTY(fdR, true)
              } catch (e) {
                /* ignore */
              }
            }

            if (process.stdout.isTTY) {
              fdW = process.stdout.fd
            } else {
              try {
                fdW = fs.openSync('\\\\.\\CON', 'w')
              } catch (e) {
                /* ignore */
              }
              if (typeof fdW !== 'number') {
                // Retry
                try {
                  fdW = getFsB().open(
                    'CONOUT$',
                    constants.O_RDWR,
                    parseInt('0666', 8)
                  )
                } catch (e) {
                  /* ignore */
                }
              }
            }
          } else {
            if (process.stdin.isTTY) {
              process.stdin.pause()
              try {
                fdR = fs.openSync('/dev/tty', 'r') // device file, not process.stdin
                ttyR = process.stdin._handle
              } catch (e) {
                /* ignore */
              }
            } else {
              // Node.js v0.12 read() fails.
              try {
                fdR = fs.openSync('/dev/tty', 'r')
                ttyR = new TTY(fdR, false)
              } catch (e) {
                /* ignore */
              }
            }

            if (process.stdout.isTTY) {
              fdW = process.stdout.fd
            } else {
              try {
                fdW = fs.openSync('/dev/tty', 'w')
              } catch (e) {
                /* ignore */
              }
            }
          }
        })()

        ;(function () {
          // try read
          var isCooked = !options.hideEchoBack && !options.keyIn,
            atEol,
            limit,
            buffer,
            reqSize,
            readSize,
            chunk,
            line
          rawInput = ''

          // Node.js v0.10- returns an error if same mode is set.
          function setRawMode(mode) {
            if (mode === isRawMode) {
              return true
            }
            if (ttyR.setRawMode(mode) !== 0) {
              return false
            }
            isRawMode = mode
            return true
          }

          if (
            _DBG_useExt ||
            !ttyR ||
            (typeof fdW !== 'number' && (options.display || !isCooked))
          ) {
            input = tryExt()
            return
          }

          if (options.display) {
            fs.writeSync(fdW, options.display)
            options.display = ''
          }
          if (options.displayOnly) {
            return
          }

          if (!setRawMode(!isCooked)) {
            input = tryExt()
            return
          }

          reqSize = options.keyIn ? 1 : options.bufferSize
          // Check `allocUnsafe` to make sure of the new API.
          buffer =
            Buffer.allocUnsafe && Buffer.alloc
              ? Buffer.alloc(reqSize)
              : new Buffer(reqSize)

          if (options.keyIn && options.limit) {
            limit = new RegExp(
              '[^' + options.limit + ']',
              'g' + (options.caseSensitive ? '' : 'i')
            )
          }

          while (true) {
            readSize = 0
            try {
              readSize = fs.readSync(fdR, buffer, 0, reqSize)
            } catch (e) {
              if (e.code !== 'EOF') {
                setRawMode(false)
                input += tryExt()
                return
              }
            }
            if (readSize > 0) {
              chunk = buffer.toString(options.encoding, 0, readSize)
              rawInput += chunk
            } else {
              chunk = '\n'
              rawInput += String.fromCharCode(0)
            }

            if (
              chunk &&
              typeof (line = (chunk.match(/^(.*?)[\r\n]/) || [])[1]) ===
                'string'
            ) {
              chunk = line
              atEol = true
            }

            // other ctrl-chars
            // eslint-disable-next-line no-control-regex
            if (chunk) {
              chunk = chunk.replace(/[\x00-\x08\x0b\x0c\x0e-\x1f\x7f]/g, '')
            }
            if (chunk && limit) {
              chunk = chunk.replace(limit, '')
            }

            if (chunk) {
              if (!isCooked) {
                if (!options.hideEchoBack) {
                  fs.writeSync(fdW, chunk)
                } else if (options.mask) {
                  fs.writeSync(
                    fdW,
                    new Array(chunk.length + 1).join(options.mask)
                  )
                }
              }
              input += chunk
            }

            if (
              (!options.keyIn && atEol) ||
              (options.keyIn && input.length >= reqSize)
            ) {
              break
            }
          }

          if (!isCooked && !silent) {
            fs.writeSync(fdW, '\n')
          }
          setRawMode(false)
        })()

        if (options.print && !silent) {
          options.print(
            displaySave +
              (options.displayOnly
                ? ''
                : (options.hideEchoBack
                    ? new Array(input.length + 1).join(options.mask)
                    : input) + '\n'), // must at least write '\n'
            options.encoding
          )
        }

        return options.displayOnly
          ? ''
          : (lastInput =
              options.keepWhitespace || options.keyIn ? input : input.trim())
      }

      function flattenArray(array, validator) {
        var flatArray = []
        function _flattenArray(array) {
          if (array == null) {
            return
          }
          if (Array.isArray(array)) {
            array.forEach(_flattenArray)
          } else if (!validator || validator(array)) {
            flatArray.push(array)
          }
        }
        _flattenArray(array)
        return flatArray
      }

      function escapePattern(pattern) {
        return pattern.replace(
          /[\x00-\x7f]/g, // eslint-disable-line no-control-regex
          function (s) {
            return '\\x' + ('00' + s.charCodeAt().toString(16)).substr(-2)
          }
        )
      }

      // margeOptions(options1, options2 ... )
      // margeOptions(true, options1, options2 ... )
      //    arg1=true : Start from defaultOptions and pick elements of that.
      function margeOptions() {
        var optionsList = Array.prototype.slice.call(arguments),
          optionNames,
          fromDefault

        if (optionsList.length && typeof optionsList[0] === 'boolean') {
          fromDefault = optionsList.shift()
          if (fromDefault) {
            optionNames = Object.keys(defaultOptions)
            optionsList.unshift(defaultOptions)
          }
        }

        return optionsList.reduce(function (options, optionsPart) {
          if (optionsPart == null) {
            return options
          }

          // ======== DEPRECATED ========
          if (
            optionsPart.hasOwnProperty('noEchoBack') &&
            !optionsPart.hasOwnProperty('hideEchoBack')
          ) {
            optionsPart.hideEchoBack = optionsPart.noEchoBack
            delete optionsPart.noEchoBack
          }
          if (
            optionsPart.hasOwnProperty('noTrim') &&
            !optionsPart.hasOwnProperty('keepWhitespace')
          ) {
            optionsPart.keepWhitespace = optionsPart.noTrim
            delete optionsPart.noTrim
          }
          // ======== /DEPRECATED ========

          if (!fromDefault) {
            optionNames = Object.keys(optionsPart)
          }
          optionNames.forEach(function (optionName) {
            var value
            if (!optionsPart.hasOwnProperty(optionName)) {
              return
            }
            value = optionsPart[optionName]
            /* eslint-disable no-multi-spaces */
            switch (optionName) {
              //                    _readlineSync <- *    * -> defaultOptions
              // ================ string
              case 'mask': // *    *
              case 'limitMessage': //      *
              case 'defaultInput': //      *
              case 'encoding': // *    *
                value = value != null ? value + '' : ''
                if (value && optionName !== 'limitMessage') {
                  value = value.replace(/[\r\n]/g, '')
                }
                options[optionName] = value
                break
              // ================ number(int)
              case 'bufferSize': // *    *
                if (
                  !isNaN((value = parseInt(value, 10))) &&
                  typeof value === 'number'
                ) {
                  options[optionName] = value // limited updating (number is needed)
                }
                break
              // ================ boolean
              case 'displayOnly': // *
              case 'keyIn': // *
              case 'hideEchoBack': // *    *
              case 'caseSensitive': // *    *
              case 'keepWhitespace': // *    *
              case 'history': //      *
              case 'cd': //      *
                options[optionName] = !!value
                break
              // ================ array
              case 'limit': // *    *     to string for readlineExt
              case 'trueValue': //      *
              case 'falseValue': //      *
                options[optionName] = flattenArray(value, function (value) {
                  var type = typeof value
                  return (
                    type === 'string' ||
                    type === 'number' ||
                    type === 'function' ||
                    value instanceof RegExp
                  )
                }).map(function (value) {
                  return typeof value === 'string'
                    ? value.replace(/[\r\n]/g, '')
                    : value
                })
                break
              // ================ function
              case 'print': // *    *
              case 'phContent': //      *
              case 'preCheck': //      *
                options[optionName] =
                  typeof value === 'function' ? value : void 0
                break
              // ================ other
              case 'prompt': //      *
              case 'display': // *
                options[optionName] = value != null ? value : ''
                break
              // no default
            }
            /* eslint-enable no-multi-spaces */
          })
          return options
        }, {})
      }

      function isMatched(res, comps, caseSensitive) {
        return comps.some(function (comp) {
          var type = typeof comp
          return type === 'string'
            ? caseSensitive
              ? res === comp
              : res.toLowerCase() === comp.toLowerCase()
            : type === 'number'
            ? parseFloat(res) === comp
            : type === 'function'
            ? comp(res)
            : comp instanceof RegExp
            ? comp.test(res)
            : false
        })
      }

      function replaceHomePath(path, expand) {
        var homePath = pathUtil
          .normalize(
            IS_WIN
              ? (process.env.HOMEDRIVE || '') + (process.env.HOMEPATH || '')
              : process.env.HOME || ''
          )
          .replace(/[/\\]+$/, '')
        path = pathUtil.normalize(path)
        return expand
          ? path.replace(/^~(?=\/|\\|$)/, homePath)
          : path.replace(
              new RegExp(
                '^' + escapePattern(homePath) + '(?=\\/|\\\\|$)',
                IS_WIN ? 'i' : ''
              ),
              '~'
            )
      }

      function replacePlaceholder(text, generator) {
        var PTN_INNER =
            '(?:\\(([\\s\\S]*?)\\))?(\\w+|.-.)(?:\\(([\\s\\S]*?)\\))?',
          rePlaceholder = new RegExp('(\\$)?(\\$<' + PTN_INNER + '>)', 'g'),
          rePlaceholderCompat = new RegExp(
            '(\\$)?(\\$\\{' + PTN_INNER + '\\})',
            'g'
          )

        function getPlaceholderText(s, escape, placeholder, pre, param, post) {
          var text
          return escape || typeof (text = generator(param)) !== 'string'
            ? placeholder
            : text
            ? (pre || '') + text + (post || '')
            : ''
        }

        return text
          .replace(rePlaceholder, getPlaceholderText)
          .replace(rePlaceholderCompat, getPlaceholderText)
      }

      function array2charlist(array, caseSensitive, collectSymbols) {
        var group = [],
          groupClass = -1,
          charCode = 0,
          symbols = '',
          values,
          suppressed
        function addGroup(groups, group) {
          if (group.length > 3) {
            // ellipsis
            groups.push(group[0] + '...' + group[group.length - 1])
            suppressed = true
          } else if (group.length) {
            groups = groups.concat(group)
          }
          return groups
        }

        values = array
          .reduce(function (chars, value) {
            return chars.concat((value + '').split(''))
          }, [])
          .reduce(function (groups, curChar) {
            var curGroupClass, curCharCode
            if (!caseSensitive) {
              curChar = curChar.toLowerCase()
            }
            curGroupClass = /^\d$/.test(curChar)
              ? 1
              : /^[A-Z]$/.test(curChar)
              ? 2
              : /^[a-z]$/.test(curChar)
              ? 3
              : 0
            if (collectSymbols && curGroupClass === 0) {
              symbols += curChar
            } else {
              curCharCode = curChar.charCodeAt(0)
              if (
                curGroupClass &&
                curGroupClass === groupClass &&
                curCharCode === charCode + 1
              ) {
                group.push(curChar)
              } else {
                groups = addGroup(groups, group)
                group = [curChar]
                groupClass = curGroupClass
              }
              charCode = curCharCode
            }
            return groups
          }, [])
        values = addGroup(values, group) // last group
        if (symbols) {
          values.push(symbols)
          suppressed = true
        }
        return { values: values, suppressed: suppressed }
      }

      function joinChunks(chunks, suppressed) {
        return chunks.join(chunks.length > 2 ? ', ' : suppressed ? ' / ' : '/')
      }

      function getPhContent(param, options) {
        var resCharlist = {},
          text,
          values,
          arg
        if (options.phContent) {
          text = options.phContent(param, options)
        }
        if (typeof text !== 'string') {
          switch (param) {
            case 'hideEchoBack':
            case 'mask':
            case 'defaultInput':
            case 'caseSensitive':
            case 'keepWhitespace':
            case 'encoding':
            case 'bufferSize':
            case 'history':
            case 'cd':
              text = !options.hasOwnProperty(param)
                ? ''
                : typeof options[param] === 'boolean'
                ? options[param]
                  ? 'on'
                  : 'off'
                : options[param] + ''
              break
            // case 'prompt':
            // case 'query':
            // case 'display':
            //   text = options.hasOwnProperty('displaySrc') ? options.displaySrc + '' : '';
            //   break;
            case 'limit':
            case 'trueValue':
            case 'falseValue':
              values =
                options[
                  options.hasOwnProperty(param + 'Src') ? param + 'Src' : param
                ]
              if (options.keyIn) {
                // suppress
                resCharlist = array2charlist(values, options.caseSensitive)
                values = resCharlist.values
              } else {
                values = values.filter(function (value) {
                  var type = typeof value
                  return type === 'string' || type === 'number'
                })
              }
              text = joinChunks(values, resCharlist.suppressed)
              break
            case 'limitCount':
            case 'limitCountNotZero':
              text =
                options[
                  options.hasOwnProperty('limitSrc') ? 'limitSrc' : 'limit'
                ].length
              text = text || param !== 'limitCountNotZero' ? text + '' : ''
              break
            case 'lastInput':
              text = lastInput
              break
            case 'cwd':
            case 'CWD':
            case 'cwdHome':
              text = process.cwd()
              if (param === 'CWD') {
                text = pathUtil.basename(text)
              } else if (param === 'cwdHome') {
                text = replaceHomePath(text)
              }
              break
            case 'date':
            case 'time':
            case 'localeDate':
            case 'localeTime':
              text = new Date()[
                'to' +
                  param.replace(/^./, function (str) {
                    return str.toUpperCase()
                  }) +
                  'String'
              ]()
              break
            default:
              // with arg
              if (
                typeof (arg = (param.match(/^history_m(\d+)$/) || [])[1]) ===
                'string'
              ) {
                text = inputHistory[inputHistory.length - arg] || ''
              }
          }
        }
        return text
      }

      function getPhCharlist(param) {
        var matches = /^(.)-(.)$/.exec(param),
          text = '',
          from,
          to,
          code,
          step
        if (!matches) {
          return null
        }
        from = matches[1].charCodeAt(0)
        to = matches[2].charCodeAt(0)
        step = from < to ? 1 : -1
        for (code = from; code !== to + step; code += step) {
          text += String.fromCharCode(code)
        }
        return text
      }

      // cmd "arg" " a r g " "" 'a"r"g' "a""rg" "arg
      function parseCl(cl) {
        var reToken = new RegExp(/(\s*)(?:("|')(.*?)(?:\2|$)|(\S+))/g),
          taken = '',
          args = [],
          matches,
          part
        cl = cl.trim()
        while ((matches = reToken.exec(cl))) {
          part = matches[3] || matches[4] || ''
          if (matches[1]) {
            args.push(taken)
            taken = ''
          }
          taken += part
        }
        if (taken) {
          args.push(taken)
        }
        return args
      }

      function toBool(res, options) {
        return options.trueValue.length &&
          isMatched(res, options.trueValue, options.caseSensitive)
          ? true
          : options.falseValue.length &&
            isMatched(res, options.falseValue, options.caseSensitive)
          ? false
          : res
      }

      function getValidLine(options) {
        var res, forceNext, limitMessage, matches, histInput, args, resCheck

        function _getPhContent(param) {
          return getPhContent(param, options)
        }
        function addDisplay(text) {
          options.display +=
            (/[^\r\n]$/.test(options.display) ? '\n' : '') + text
        }

        options.limitSrc = options.limit
        options.displaySrc = options.display
        options.limit = '' // for readlineExt
        options.display = replacePlaceholder(
          options.display + '',
          _getPhContent
        )

        while (true) {
          res = _readlineSync(options)
          forceNext = false
          limitMessage = ''

          if (options.defaultInput && !res) {
            res = options.defaultInput
          }

          if (options.history) {
            if ((matches = /^\s*!(?:!|-1)(:p)?\s*$/.exec(res))) {
              // `!!` `!-1` +`:p`
              histInput = inputHistory[0] || ''
              if (matches[1]) {
                // only display
                forceNext = true
              } else {
                // replace input
                res = histInput
              }
              // Show it even if it is empty (NL only).
              addDisplay(histInput + '\n')
              if (!forceNext) {
                // Loop may break
                options.displayOnly = true
                _readlineSync(options)
                options.displayOnly = false
              }
            } else if (res && res !== inputHistory[inputHistory.length - 1]) {
              inputHistory = [res]
            }
          }

          if (!forceNext && options.cd && res) {
            args = parseCl(res)
            switch (args[0].toLowerCase()) {
              case 'cd':
                if (args[1]) {
                  try {
                    process.chdir(replaceHomePath(args[1], true))
                  } catch (e) {
                    addDisplay(e + '')
                  }
                }
                forceNext = true
                break
              case 'pwd':
                addDisplay(process.cwd())
                forceNext = true
                break
              // no default
            }
          }

          if (!forceNext && options.preCheck) {
            resCheck = options.preCheck(res, options)
            res = resCheck.res
            if (resCheck.forceNext) {
              forceNext = true
            } // Don't switch to false.
          }

          if (!forceNext) {
            if (
              !options.limitSrc.length ||
              isMatched(res, options.limitSrc, options.caseSensitive)
            ) {
              break
            }
            if (options.limitMessage) {
              limitMessage = replacePlaceholder(
                options.limitMessage,
                _getPhContent
              )
            }
          }

          addDisplay(
            (limitMessage ? limitMessage + '\n' : '') +
              replacePlaceholder(options.displaySrc + '', _getPhContent)
          )
        }
        return toBool(res, options)
      }

      // for dev
      exports._DBG_set_useExt = function (val) {
        _DBG_useExt = val
      }
      exports._DBG_set_checkOptions = function (val) {
        _DBG_checkOptions = val
      }
      exports._DBG_set_checkMethod = function (val) {
        _DBG_checkMethod = val
      }
      exports._DBG_clearHistory = function () {
        lastInput = ''
        inputHistory = []
      }

      // ------------------------------------

      exports.setDefaultOptions = function (options) {
        defaultOptions = margeOptions(true, options)
        return margeOptions(true) // copy
      }

      exports.question = function (query, options) {
        /* eslint-disable key-spacing */
        return getValidLine(
          margeOptions(margeOptions(true, options), {
            display: query,
          })
        )
        /* eslint-enable key-spacing */
      }

      exports.prompt = function (options) {
        var readOptions = margeOptions(true, options)
        readOptions.display = readOptions.prompt
        return getValidLine(readOptions)
      }

      exports.keyIn = function (query, options) {
        /* eslint-disable key-spacing */
        var readOptions = margeOptions(margeOptions(true, options), {
          display: query,
          keyIn: true,
          keepWhitespace: true,
        })
        /* eslint-enable key-spacing */

        // char list
        readOptions.limitSrc = readOptions.limit
          .filter(function (value) {
            var type = typeof value
            return type === 'string' || type === 'number'
          })
          .map(function (text) {
            return replacePlaceholder(text + '', getPhCharlist)
          })
        // pattern
        readOptions.limit = escapePattern(readOptions.limitSrc.join(''))

        ;['trueValue', 'falseValue'].forEach(function (optionName) {
          readOptions[optionName] = readOptions[optionName].reduce(function (
            comps,
            comp
          ) {
            var type = typeof comp
            if (type === 'string' || type === 'number') {
              comps = comps.concat((comp + '').split(''))
            } else {
              comps.push(comp)
            }
            return comps
          },
          [])
        })

        readOptions.display = replacePlaceholder(
          readOptions.display + '',
          function (param) {
            return getPhContent(param, readOptions)
          }
        )

        return toBool(_readlineSync(readOptions), readOptions)
      }

      // ------------------------------------

      exports.questionEMail = function (query, options) {
        if (query == null) {
          query = 'Input e-mail address: '
        }
        /* eslint-disable key-spacing */
        return exports.question(
          query,
          margeOptions(
            {
              // -------- default
              hideEchoBack: false,
              // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address
              limit: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
              limitMessage: 'Input valid e-mail address, please.',
              trueValue: null,
              falseValue: null,
            },
            options,
            {
              // -------- forced
              keepWhitespace: false,
              cd: false,
            }
          )
        )
        /* eslint-enable key-spacing */
      }

      exports.questionNewPassword = function (query, options) {
        /* eslint-disable key-spacing */
        var resCharlist,
          min,
          max,
          readOptions = margeOptions(
            {
              // -------- default
              hideEchoBack: true,
              mask: '*',
              limitMessage:
                'It can include: $<charlist>\n' +
                'And the length must be: $<length>',
              trueValue: null,
              falseValue: null,
              caseSensitive: true,
            },
            options,
            {
              // -------- forced
              history: false,
              cd: false,
              // limit (by charlist etc.),
              phContent: function (param) {
                return param === 'charlist'
                  ? resCharlist.text
                  : param === 'length'
                  ? min + '...' + max
                  : null
              },
            }
          ),
          // added:     charlist, min, max, confirmMessage, unmatchMessage
          charlist,
          confirmMessage,
          unmatchMessage,
          limit,
          limitMessage,
          res1,
          res2
        /* eslint-enable key-spacing */
        options = options || {}

        charlist = replacePlaceholder(
          options.charlist ? options.charlist + '' : '$<!-~>',
          getPhCharlist
        )
        if (
          isNaN((min = parseInt(options.min, 10))) ||
          typeof min !== 'number'
        ) {
          min = 12
        }
        if (
          isNaN((max = parseInt(options.max, 10))) ||
          typeof max !== 'number'
        ) {
          max = 24
        }
        limit = new RegExp(
          '^[' + escapePattern(charlist) + ']{' + min + ',' + max + '}$'
        )
        resCharlist = array2charlist(
          [charlist],
          readOptions.caseSensitive,
          true
        )
        resCharlist.text = joinChunks(
          resCharlist.values,
          resCharlist.suppressed
        )

        confirmMessage =
          options.confirmMessage != null
            ? options.confirmMessage
            : 'Reinput a same one to confirm it: '
        unmatchMessage =
          options.unmatchMessage != null
            ? options.unmatchMessage
            : 'It differs from first one.' +
              ' Hit only the Enter key if you want to retry from first one.'

        if (query == null) {
          query = 'Input new password: '
        }

        limitMessage = readOptions.limitMessage
        while (!res2) {
          readOptions.limit = limit
          readOptions.limitMessage = limitMessage
          res1 = exports.question(query, readOptions)

          readOptions.limit = [res1, '']
          readOptions.limitMessage = unmatchMessage
          res2 = exports.question(confirmMessage, readOptions)
        }

        return res1
      }

      function _questionNum(query, options, parser) {
        var validValue
        function getValidValue(value) {
          validValue = parser(value)
          return !isNaN(validValue) && typeof validValue === 'number'
        }
        /* eslint-disable key-spacing */
        exports.question(
          query,
          margeOptions(
            {
              // -------- default
              limitMessage: 'Input valid number, please.',
            },
            options,
            {
              // -------- forced
              limit: getValidValue,
              cd: false,
              // trueValue, falseValue, caseSensitive, keepWhitespace don't work.
            }
          )
        )
        /* eslint-enable key-spacing */
        return validValue
      }
      exports.questionInt = function (query, options) {
        return _questionNum(query, options, function (value) {
          return parseInt(value, 10)
        })
      }
      exports.questionFloat = function (query, options) {
        return _questionNum(query, options, parseFloat)
      }

      exports.questionPath = function (query, options) {
        /* eslint-disable key-spacing */
        var error = '',
          validPath, // before readOptions
          readOptions = margeOptions(
            {
              // -------- default
              hideEchoBack: false,
              limitMessage:
                '$<error(\n)>Input valid path, please.' +
                '$<( Min:)min>$<( Max:)max>',
              history: true,
              cd: true,
            },
            options,
            {
              // -------- forced
              keepWhitespace: false,
              limit: function (value) {
                var exists, stat, res
                value = replaceHomePath(value, true)
                error = '' // for validate
                // mkdir -p
                function mkdirParents(dirPath) {
                  dirPath.split(/\/|\\/).reduce(function (parents, dir) {
                    var path = pathUtil.resolve((parents += dir + pathUtil.sep))
                    if (!fs.existsSync(path)) {
                      fs.mkdirSync(path)
                    } else if (!fs.statSync(path).isDirectory()) {
                      throw new Error('Non directory already exists: ' + path)
                    }
                    return parents
                  }, '')
                }

                try {
                  exists = fs.existsSync(value)
                  validPath = exists
                    ? fs.realpathSync(value)
                    : pathUtil.resolve(value)
                  // options.exists default: true, not-bool: no-check
                  if (
                    (!options.hasOwnProperty('exists') && !exists) ||
                    (typeof options.exists === 'boolean' &&
                      options.exists !== exists)
                  ) {
                    error =
                      (exists
                        ? 'Already exists'
                        : 'No such file or directory') +
                      ': ' +
                      validPath
                    return false
                  }
                  if (!exists && options.create) {
                    if (options.isDirectory) {
                      mkdirParents(validPath)
                    } else {
                      mkdirParents(pathUtil.dirname(validPath))
                      fs.closeSync(fs.openSync(validPath, 'w')) // touch
                    }
                    validPath = fs.realpathSync(validPath)
                  }
                  if (
                    exists &&
                    (options.min ||
                      options.max ||
                      options.isFile ||
                      options.isDirectory)
                  ) {
                    stat = fs.statSync(validPath)
                    // type check first (directory has zero size)
                    if (options.isFile && !stat.isFile()) {
                      error = 'Not file: ' + validPath
                      return false
                    } else if (options.isDirectory && !stat.isDirectory()) {
                      error = 'Not directory: ' + validPath
                      return false
                    } else if (
                      (options.min && stat.size < +options.min) ||
                      (options.max && stat.size > +options.max)
                    ) {
                      error =
                        'Size ' + stat.size + ' is out of range: ' + validPath
                      return false
                    }
                  }
                  if (
                    typeof options.validate === 'function' &&
                    (res = options.validate(validPath)) !== true
                  ) {
                    if (typeof res === 'string') {
                      error = res
                    }
                    return false
                  }
                } catch (e) {
                  error = e + ''
                  return false
                }
                return true
              },
              // trueValue, falseValue, caseSensitive don't work.
              phContent: function (param) {
                return param === 'error'
                  ? error
                  : param !== 'min' && param !== 'max'
                  ? null
                  : options.hasOwnProperty(param)
                  ? options[param] + ''
                  : ''
              },
            }
          )
        // added:     exists, create, min, max, isFile, isDirectory, validate
        /* eslint-enable key-spacing */
        options = options || {}

        if (query == null) {
          query = 'Input path (you can "cd" and "pwd"): '
        }

        exports.question(query, readOptions)
        return validPath
      }

      // props: preCheck, args, hRes, limit
      function getClHandler(commandHandler, options) {
        var clHandler = {},
          hIndex = {}
        if (typeof commandHandler === 'object') {
          Object.keys(commandHandler).forEach(function (cmd) {
            if (typeof commandHandler[cmd] === 'function') {
              hIndex[options.caseSensitive ? cmd : cmd.toLowerCase()] =
                commandHandler[cmd]
            }
          })
          clHandler.preCheck = function (res) {
            var cmdKey
            clHandler.args = parseCl(res)
            cmdKey = clHandler.args[0] || ''
            if (!options.caseSensitive) {
              cmdKey = cmdKey.toLowerCase()
            }
            clHandler.hRes =
              cmdKey !== '_' && hIndex.hasOwnProperty(cmdKey)
                ? hIndex[cmdKey].apply(res, clHandler.args.slice(1))
                : hIndex.hasOwnProperty('_')
                ? hIndex._.apply(res, clHandler.args)
                : null
            return { res: res, forceNext: false }
          }
          if (!hIndex.hasOwnProperty('_')) {
            clHandler.limit = function () {
              // It's called after preCheck.
              var cmdKey = clHandler.args[0] || ''
              if (!options.caseSensitive) {
                cmdKey = cmdKey.toLowerCase()
              }
              return hIndex.hasOwnProperty(cmdKey)
            }
          }
        } else {
          clHandler.preCheck = function (res) {
            clHandler.args = parseCl(res)
            clHandler.hRes =
              typeof commandHandler === 'function'
                ? commandHandler.apply(res, clHandler.args)
                : true // true for break loop
            return { res: res, forceNext: false }
          }
        }
        return clHandler
      }

      exports.promptCL = function (commandHandler, options) {
        /* eslint-disable key-spacing */
        var readOptions = margeOptions(
            {
              // -------- default
              hideEchoBack: false,
              limitMessage: 'Requested command is not available.',
              caseSensitive: false,
              history: true,
            },
            options
          ),
          //   -------- forced
          //   trueValue, falseValue, keepWhitespace don't work.
          //   preCheck, limit (by clHandler)
          clHandler = getClHandler(commandHandler, readOptions)
        /* eslint-enable key-spacing */
        readOptions.limit = clHandler.limit
        readOptions.preCheck = clHandler.preCheck
        exports.prompt(readOptions)
        return clHandler.args
      }

      exports.promptLoop = function (inputHandler, options) {
        /* eslint-disable key-spacing */
        var readOptions = margeOptions(
          {
            // -------- default
            hideEchoBack: false,
            trueValue: null,
            falseValue: null,
            caseSensitive: false,
            history: true,
          },
          options
        )
        /* eslint-enable key-spacing */
        while (true) {
          if (inputHandler(exports.prompt(readOptions))) {
            break
          }
        }
        // return; // nothing is returned
      }

      exports.promptCLLoop = function (commandHandler, options) {
        /* eslint-disable key-spacing */
        var readOptions = margeOptions(
            {
              // -------- default
              hideEchoBack: false,
              limitMessage: 'Requested command is not available.',
              caseSensitive: false,
              history: true,
            },
            options
          ),
          //   -------- forced
          //   trueValue, falseValue, keepWhitespace don't work.
          //   preCheck, limit (by clHandler)
          clHandler = getClHandler(commandHandler, readOptions)
        /* eslint-enable key-spacing */
        readOptions.limit = clHandler.limit
        readOptions.preCheck = clHandler.preCheck
        while (true) {
          exports.prompt(readOptions)
          if (clHandler.hRes) {
            break
          }
        }
        // return; // nothing is returned
      }

      exports.promptSimShell = function (options) {
        /* eslint-disable key-spacing */
        return exports.prompt(
          margeOptions(
            {
              // -------- default
              hideEchoBack: false,
              history: true,
            },
            options,
            {
              // -------- forced
              prompt: (function () {
                return IS_WIN
                  ? '$<cwd>>'
                  : // 'user@host:cwd$ '
                    (process.env.USER || '') +
                      (process.env.HOSTNAME
                        ? '@' + process.env.HOSTNAME.replace(/\..*$/, '')
                        : '') +
                      ':$<cwdHome>$ '
              })(),
            }
          )
        )
        /* eslint-enable key-spacing */
      }

      function _keyInYN(query, options, limit) {
        var res
        if (query == null) {
          query = 'Are you sure? '
        }
        if ((!options || options.guide !== false) && (query += '')) {
          query = query.replace(/\s*:?\s*$/, '') + ' [y/n]: '
        }
        /* eslint-disable key-spacing */
        res = exports.keyIn(
          query,
          margeOptions(options, {
            // -------- forced
            hideEchoBack: false,
            limit: limit,
            trueValue: 'y',
            falseValue: 'n',
            caseSensitive: false,
            // mask doesn't work.
          })
        )
        // added:     guide
        /* eslint-enable key-spacing */
        return typeof res === 'boolean' ? res : ''
      }
      exports.keyInYN = function (query, options) {
        return _keyInYN(query, options)
      }
      exports.keyInYNStrict = function (query, options) {
        return _keyInYN(query, options, 'yn')
      }

      exports.keyInPause = function (query, options) {
        if (query == null) {
          query = 'Continue...'
        }
        if ((!options || options.guide !== false) && (query += '')) {
          query = query.replace(/\s+$/, '') + ' (Hit any key)'
        }
        /* eslint-disable key-spacing */
        exports.keyIn(
          query,
          margeOptions(
            {
              // -------- default
              limit: null,
            },
            options,
            {
              // -------- forced
              hideEchoBack: true,
              mask: '',
            }
          )
        )
        // added:     guide
        /* eslint-enable key-spacing */
        // return; // nothing is returned
      }

      exports.keyInSelect = function (items, query, options) {
        /* eslint-disable key-spacing */
        var readOptions = margeOptions(
            {
              // -------- default
              hideEchoBack: false,
            },
            options,
            {
              // -------- forced
              trueValue: null,
              falseValue: null,
              caseSensitive: false,
              // limit (by items),
              phContent: function (param) {
                return param === 'itemsCount'
                  ? items.length + ''
                  : param === 'firstItem'
                  ? (items[0] + '').trim()
                  : param === 'lastItem'
                  ? (items[items.length - 1] + '').trim()
                  : null
              },
            }
          ),
          // added:     guide, cancel
          keylist = '',
          key2i = {},
          charCode = 49 /* '1' */,
          display = '\n'
        /* eslint-enable key-spacing */
        if (!Array.isArray(items) || !items.length || items.length > 35) {
          throw '`items` must be Array (max length: 35).'
        }

        items.forEach(function (item, i) {
          var key = String.fromCharCode(charCode)
          keylist += key
          key2i[key] = i
          display += '[' + key + '] ' + (item + '').trim() + '\n'
          charCode = charCode === 57 /* '9' */ ? 97 /* 'a' */ : charCode + 1
        })
        if (!options || options.cancel !== false) {
          keylist += '0'
          key2i['0'] = -1
          display +=
            '[0] ' +
            (options &&
            options.cancel != null &&
            typeof options.cancel !== 'boolean'
              ? (options.cancel + '').trim()
              : 'CANCEL') +
            '\n'
        }
        readOptions.limit = keylist
        display += '\n'

        if (query == null) {
          query = 'Choose one from list: '
        }
        if ((query += '')) {
          if (!options || options.guide !== false) {
            query = query.replace(/\s*:?\s*$/, '') + ' [$<limit>]: '
          }
          display += query
        }

        return key2i[exports.keyIn(display, readOptions).toLowerCase()]
      }

      exports.getRawInput = function () {
        return rawInput
      }

      // ======== DEPRECATED ========
      function _setOption(optionName, args) {
        var options
        if (args.length) {
          options = {}
          options[optionName] = args[0]
        }
        return exports.setDefaultOptions(options)[optionName]
      }
      exports.setPrint = function () {
        return _setOption('print', arguments)
      }
      exports.setPrompt = function () {
        return _setOption('prompt', arguments)
      }
      exports.setEncoding = function () {
        return _setOption('encoding', arguments)
      }
      exports.setMask = function () {
        return _setOption('mask', arguments)
      }
      exports.setBufferSize = function () {
        return _setOption('bufferSize', arguments)
      }

      /***/
    },

    /***/ 5229: /***/ (module) => {
      'use strict'

      /**
       * Flatten an array into the supplied array.
       *
       * @module reduce-flatten
       * @example
       * var flatten = require('reduce-flatten')
       */
      module.exports = flatten

      /**
       * @alias module:reduce-flatten
       * @example
       * > numbers = [ 1, 2, [ 3, 4 ], 5 ]
       * > numbers.reduce(flatten, [])
       * [ 1, 2, 3, 4, 5 ]
       */
      function flatten(prev, curr) {
        return prev.concat(curr)
      }

      /***/
    },

    /***/ 6148: /***/ (module) => {
      'use strict'

      function hash(str) {
        var hash = 5381,
          i = str.length

        while (i) {
          hash = (hash * 33) ^ str.charCodeAt(--i)
        }

        /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
         * integers. Since we want the results to be always positive, convert the
         * signed int to an unsigned by doing an unsigned bitshift. */
        return hash >>> 0
      }

      module.exports = hash

      /***/
    },

    /***/ 5023: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const os = __nccwpck_require__(2087)

      /**
       * @module table-layout
       */

      /**
       * Recordset data in (array of objects), text table out.
       * @alias module:table-layout
       * @example
       * > Table = require('table-layout')
       * > jsonData = [{
       *   col1: 'Some text you wish to read in table layout',
       *   col2: 'And some more text in column two. '
       * }]
       * > table = new Table(jsonData, { maxWidth: 30 })
       * > console.log(table.toString())
       *  Some text you  And some more
       *  wish to read   text in
       *  in table      column two.
       *  layout
       */
      class Table {
        /**
         * @param {object[]} - input data
         * @param [options] {object} - optional settings
         * @param [options.maxWidth] {number} - maximum width of layout
         * @param [options.noWrap] {boolean} - disable wrapping on all columns
         * @param [options.noTrim] {boolean} - disable line-trimming
         * @param [options.break] {boolean} - enable word-breaking on all columns
         * @param [options.columns] {module:table-layout~columnOption} - array of column-specific options
         * @param [options.ignoreEmptyColumns] {boolean} - if set, empty columns or columns containing only whitespace are not rendered.
         * @param [options.padding] {object} - Padding values to set on each column. Per-column overrides can be set in the `options.columns` array.
         * @param [options.padding.left] {string} - Defaults to a single space.
         * @param [options.padding.right] {string} - Defaults to a single space.
         * @alias module:table-layout
         */
        constructor(data, options) {
          let ttyWidth =
            (process && (process.stdout.columns || process.stderr.columns)) || 0

          /* Windows quirk workaround  */
          if (ttyWidth && os.platform() === 'win32') ttyWidth--

          let defaults = {
            padding: {
              left: ' ',
              right: ' ',
            },
            maxWidth: ttyWidth || 80,
            columns: [],
          }

          const extend = __nccwpck_require__(1705)
          this.options = extend(defaults, options)
          this.load(data)
        }

        load(data) {
          const Rows = __nccwpck_require__(8667)
          const Columns = __nccwpck_require__(8017)

          let options = this.options

          /* remove empty columns */
          if (options.ignoreEmptyColumns) {
            data = Rows.removeEmptyColumns(data)
          }

          this.columns = Columns.getColumns(data)
          this.rows = new Rows(data, this.columns)

          /* load default column properties from options */
          this.columns.maxWidth = options.maxWidth
          this.columns.list.forEach((column) => {
            if (options.padding) column.padding = options.padding
            if (options.noWrap) column.noWrap = options.noWrap
            if (options.break) {
              column.break = options.break
              column.contentWrappable = true
            }
          })

          /* load column properties from options.columns */
          options.columns.forEach((optionColumn) => {
            let column = this.columns.get(optionColumn.name)
            if (column) {
              if (optionColumn.padding) {
                column.padding.left = optionColumn.padding.left
                column.padding.right = optionColumn.padding.right
              }
              if (optionColumn.width) column.width = optionColumn.width
              if (optionColumn.maxWidth) column.maxWidth = optionColumn.maxWidth
              if (optionColumn.minWidth) column.minWidth = optionColumn.minWidth
              if (optionColumn.noWrap) column.noWrap = optionColumn.noWrap
              if (optionColumn.break) {
                column.break = optionColumn.break
                column.contentWrappable = true
              }
            }
          })

          this.columns.autoSize()
          return this
        }

        getWrapped() {
          const wrap = __nccwpck_require__(6015)

          this.columns.autoSize()
          return this.rows.list.map((row) => {
            let line = []
            row.forEach((cell, column) => {
              if (column.noWrap) {
                line.push(cell.value.split(/\r\n?|\n/))
              } else {
                line.push(
                  wrap.lines(cell.value, {
                    width: column.wrappedContentWidth,
                    break: column.break,
                    noTrim: this.options.noTrim,
                  })
                )
              }
            })
            return line
          })
        }

        getLines() {
          var wrappedLines = this.getWrapped()
          var lines = []
          wrappedLines.forEach((wrapped) => {
            let mostLines = getLongestArray(wrapped)
            for (let i = 0; i < mostLines; i++) {
              let line = []
              wrapped.forEach((cell) => {
                line.push(cell[i] || '')
              })
              lines.push(line)
            }
          })
          return lines
        }

        /**
         * Identical to `.toString()` with the exception that the result will be an array of lines, rather than a single, multi-line string.
         * @returns {string[]}
         */
        renderLines() {
          var lines = this.getLines()
          return lines.map((line) => {
            return line.reduce((prev, cell, index) => {
              let column = this.columns.list[index]
              return prev + padCell(cell, column.padding, column.generatedWidth)
            }, '')
          })
        }

        /**
         * Returns the input data as a text table.
         * @returns {string}
         */
        toString() {
          return this.renderLines().join(os.EOL) + os.EOL
        }
      }

      /**
       * Array of arrays in.. Returns the length of the longest one
       * @returns {number}
       * @private
       */
      function getLongestArray(arrays) {
        var lengths = arrays.map((array) => array.length)
        return Math.max.apply(null, lengths)
      }

      function padCell(cellValue, padding, width) {
        const ansi = __nccwpck_require__(4149)
        const padEnd = __nccwpck_require__(7002)
        var ansiLength = cellValue.length - ansi.remove(cellValue).length
        cellValue = cellValue || ''
        return (
          (padding.left || '') +
          padEnd(cellValue, width - padding.length() + ansiLength) +
          (padding.right || '')
        )
      }

      /**
       * @typedef module:table-layout~columnOption
       * @property name {string} - column name, must match a property name in the input
       * @property [width] {number} - A specific column width. Supply either this or a min and/or max width.
       * @property [minWidth] {number} - column min width
       * @property [maxWidth] {number} - column max width
       * @property [nowrap] {boolean} - disable wrapping for this column
       * @property [break] {boolean} - enable word-breaking for this columns
       * @property [padding] {object} - padding options
       * @property [padding.left] {string} - a string to pad the left of each cell (default: `' '`)
       * @property [padding.right] {string} - a string to pad the right of each cell (default: `' '`)
       */

      module.exports = Table

      /***/
    },

    /***/ 4149: /***/ (__unused_webpack_module, exports) => {
      'use strict'

      const ansiEscapeSequence = /\u001b.*?m/g

      /**
       * @module ansi
       */
      exports.remove = remove
      exports.has = has

      function remove(input) {
        return input.replace(ansiEscapeSequence, '')
      }

      function has(input) {
        return ansiEscapeSequence.test(input)
      }

      /***/
    },

    /***/ 4391: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const t = __nccwpck_require__(8652)

      const _value = new WeakMap()
      const _column = new WeakMap()

      class Cell {
        constructor(value, column) {
          this.value = value
          _column.set(this, column)
        }

        set value(val) {
          _value.set(this, val)
        }

        get value() {
          let cellValue = _value.get(this)
          if (t.isFunction(cellValue))
            cellValue = cellValue.call(_column.get(this))
          if (cellValue === undefined) {
            cellValue = ''
          } else {
            cellValue = String(cellValue)
          }
          return cellValue
        }
      }

      module.exports = Cell

      /***/
    },

    /***/ 2273: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const t = __nccwpck_require__(8652)
      const Padding = __nccwpck_require__(7787)

      /**
       * @module column
       */

      const _padding = new WeakMap()

      // setting any column property which is a factor of the width should trigger autoSize()

      /**
       * Represents a table column
       */
      class Column {
        constructor(column) {
          /**
           * @type {string}
           */
          if (t.isDefined(column.name)) this.name = column.name
          /**
           * @type {number}
           */
          if (t.isDefined(column.width)) this.width = column.width
          if (t.isDefined(column.maxWidth)) this.maxWidth = column.maxWidth
          if (t.isDefined(column.minWidth)) this.minWidth = column.minWidth
          if (t.isDefined(column.noWrap)) this.noWrap = column.noWrap
          if (t.isDefined(column.break)) this.break = column.break
          if (t.isDefined(column.contentWrappable))
            this.contentWrappable = column.contentWrappable
          if (t.isDefined(column.contentWidth))
            this.contentWidth = column.contentWidth
          if (t.isDefined(column.minContentWidth))
            this.minContentWidth = column.minContentWidth
          this.padding = column.padding || { left: ' ', right: ' ' }
          this.generatedWidth = null
        }

        set padding(padding) {
          _padding.set(this, new Padding(padding))
        }
        get padding() {
          return _padding.get(this)
        }

        /**
         * the width of the content (excluding padding) after being wrapped
         */
        get wrappedContentWidth() {
          return Math.max(this.generatedWidth - this.padding.length(), 0)
        }

        isResizable() {
          return !this.isFixed()
        }

        isFixed() {
          return (
            t.isDefined(this.width) || this.noWrap || !this.contentWrappable
          )
        }

        generateWidth() {
          this.generatedWidth =
            this.width || this.contentWidth + this.padding.length()
        }

        generateMinWidth() {
          this.minWidth = this.minContentWidth + this.padding.length()
        }
      }

      module.exports = Column

      /***/
    },

    /***/ 8017: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const t = __nccwpck_require__(8652)
      const arrayify = __nccwpck_require__(364)
      const Column = __nccwpck_require__(2273)
      const wrap = __nccwpck_require__(6015)
      const Cell = __nccwpck_require__(4391)
      const ansi = __nccwpck_require__(4149)

      const _maxWidth = new WeakMap()

      /**
       * @module columns
       */

      class Columns {
        constructor(columns) {
          this.list = []
          arrayify(columns).forEach(this.add.bind(this))
        }

        /**
         * sum of all generatedWidth fields
         * @return {number}
         */
        totalWidth() {
          return this.list.length
            ? this.list.map((col) => col.generatedWidth).reduce((a, b) => a + b)
            : 0
        }

        totalFixedWidth() {
          return this.getFixed()
            .map((col) => col.generatedWidth)
            .reduce((a, b) => a + b, 0)
        }

        get(columnName) {
          return this.list.find((column) => column.name === columnName)
        }

        getResizable() {
          return this.list.filter((column) => column.isResizable())
        }

        getFixed() {
          return this.list.filter((column) => column.isFixed())
        }

        add(column) {
          const col = column instanceof Column ? column : new Column(column)
          this.list.push(col)
          return col
        }

        set maxWidth(val) {
          _maxWidth.set(this, val)
        }

        /**
         * sets `generatedWidth` for each column
         * @chainable
         */
        autoSize() {
          const maxWidth = _maxWidth.get(this)

          /* size */
          this.list.forEach((column) => {
            column.generateWidth()
            column.generateMinWidth()
          })

          /* adjust if user set a min or maxWidth */
          this.list.forEach((column) => {
            if (
              t.isDefined(column.maxWidth) &&
              column.generatedWidth > column.maxWidth
            ) {
              column.generatedWidth = column.maxWidth
            }

            if (
              t.isDefined(column.minWidth) &&
              column.generatedWidth < column.minWidth
            ) {
              column.generatedWidth = column.minWidth
            }
          })

          const width = {
            total: this.totalWidth(),
            view: maxWidth,
            diff: this.totalWidth() - maxWidth,
            totalFixed: this.totalFixedWidth(),
            totalResizable: Math.max(maxWidth - this.totalFixedWidth(), 0),
          }

          /* adjust if short of space */
          if (width.diff > 0) {
            /* share the available space between resizeable columns */
            let resizableColumns = this.getResizable()
            resizableColumns.forEach((column) => {
              column.generatedWidth = Math.floor(
                width.totalResizable / resizableColumns.length
              )
            })

            /* at this point, the generatedWidth should never end up bigger than the contentWidth */
            const grownColumns = this.list.filter(
              (column) => column.generatedWidth > column.contentWidth
            )
            const shrunkenColumns = this.list.filter(
              (column) => column.generatedWidth < column.contentWidth
            )
            let salvagedSpace = 0
            grownColumns.forEach((column) => {
              const currentGeneratedWidth = column.generatedWidth
              column.generateWidth()
              salvagedSpace += currentGeneratedWidth - column.generatedWidth
            })
            shrunkenColumns.forEach((column) => {
              column.generatedWidth += Math.floor(
                salvagedSpace / shrunkenColumns.length
              )
            })

            /* if, after autosizing, we still don't fit within maxWidth then give up */
          }

          return this
        }

        /**
         * Factory method returning all distinct columns from input
         * @param  {object[]} - input recordset
         * @return {module:columns}
         */
        static getColumns(rows) {
          var columns = new Columns()
          arrayify(rows).forEach((row) => {
            for (let columnName in row) {
              let column = columns.get(columnName)
              if (!column) {
                column = columns.add({
                  name: columnName,
                  contentWidth: 0,
                  minContentWidth: 0,
                })
              }
              let cell = new Cell(row[columnName], column)
              let cellValue = cell.value
              if (ansi.has(cellValue)) {
                cellValue = ansi.remove(cellValue)
              }

              if (cellValue.length > column.contentWidth)
                column.contentWidth = cellValue.length

              let longestWord = getLongestWord(cellValue)
              if (longestWord > column.minContentWidth) {
                column.minContentWidth = longestWord
              }
              if (!column.contentWrappable)
                column.contentWrappable = wrap.isWrappable(cellValue)
            }
          })
          return columns
        }
      }

      function getLongestWord(line) {
        const words = wrap.getChunks(line)
        return words.reduce((max, word) => {
          return Math.max(word.length, max)
        }, 0)
      }

      module.exports = Columns

      /***/
    },

    /***/ 7787: /***/ (module) => {
      'use strict'

      class Padding {
        constructor(padding) {
          this.left = padding.left
          this.right = padding.right
        }
        length() {
          return this.left.length + this.right.length
        }
      }

      /**
@module padding
*/
      module.exports = Padding

      /***/
    },

    /***/ 8667: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const arrayify = __nccwpck_require__(364)
      const Cell = __nccwpck_require__(4391)
      const t = __nccwpck_require__(8652)

      /**
       *
       */
      class Rows {
        constructor(rows, columns) {
          this.list = []
          this.load(rows, columns)
        }

        load(rows, columns) {
          arrayify(rows).forEach((row) => {
            this.list.push(new Map(objectToIterable(row, columns)))
          })
        }

        static removeEmptyColumns(data) {
          const distinctColumnNames = data.reduce((columnNames, row) => {
            Object.keys(row).forEach((key) => {
              if (columnNames.indexOf(key) === -1) columnNames.push(key)
            })
            return columnNames
          }, [])

          const emptyColumns = distinctColumnNames.filter((columnName) => {
            const hasValue = data.some((row) => {
              const value = row[columnName]
              return (
                (t.isDefined(value) && !t.isString(value)) ||
                (t.isString(value) && /\S+/.test(value))
              )
            })
            return !hasValue
          })

          return data.map((row) => {
            emptyColumns.forEach((emptyCol) => delete row[emptyCol])
            return row
          })
        }
      }

      function objectToIterable(row, columns) {
        return columns.list.map((column) => {
          return [column, new Cell(row[column.name], column)]
        })
      }

      /**
       * @module rows
       */
      module.exports = Rows

      /***/
    },

    /***/ 8652: /***/ (__unused_webpack_module, exports) => {
      'use strict'

      /**
       * For type-checking Javascript values.
       * @module typical
       * @typicalname t
       * @example
       * const t = require('typical')
       */
      exports.isNumber = isNumber
      exports.isString = isString
      exports.isBoolean = isBoolean
      exports.isPlainObject = isPlainObject
      exports.isArrayLike = isArrayLike
      exports.isObject = isObject
      exports.isDefined = isDefined
      exports.isFunction = isFunction
      exports.isClass = isClass
      exports.isPrimitive = isPrimitive
      exports.isPromise = isPromise
      exports.isIterable = isIterable

      /**
       * Returns true if input is a number
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       * @example
       * > t.isNumber(0)
       * true
       * > t.isNumber(1)
       * true
       * > t.isNumber(1.1)
       * true
       * > t.isNumber(0xff)
       * true
       * > t.isNumber(0644)
       * true
       * > t.isNumber(6.2e5)
       * true
       * > t.isNumber(NaN)
       * false
       * > t.isNumber(Infinity)
       * false
       */
      function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
      }

      /**
       * A plain object is a simple object literal, it is not an instance of a class. Returns true if the input `typeof` is `object` and directly decends from `Object`.
       *
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       * @example
       * > t.isPlainObject({ clive: 'hater' })
       * true
       * > t.isPlainObject(new Date())
       * false
       * > t.isPlainObject([ 0, 1 ])
       * false
       * > t.isPlainObject(1)
       * false
       * > t.isPlainObject(/test/)
       * false
       */
      function isPlainObject(input) {
        return (
          input !== null &&
          typeof input === 'object' &&
          input.constructor === Object
        )
      }

      /**
       * An array-like value has all the properties of an array, but is not an array instance. Examples in the `arguments` object. Returns true if the input value is an object, not null and has a `length` property with a numeric value.
       *
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       * @example
       * function sum(x, y){
       *     console.log(t.isArrayLike(arguments))
       *     // prints `true`
       * }
       */
      function isArrayLike(input) {
        return isObject(input) && typeof input.length === 'number'
      }

      /**
       * returns true if the typeof input is `'object'`, but not null!
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isObject(input) {
        return typeof input === 'object' && input !== null
      }

      /**
       * Returns true if the input value is defined
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isDefined(input) {
        return typeof input !== 'undefined'
      }

      /**
       * Returns true if the input value is a string
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isString(input) {
        return typeof input === 'string'
      }

      /**
       * Returns true if the input value is a boolean
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isBoolean(input) {
        return typeof input === 'boolean'
      }

      /**
       * Returns true if the input value is a function
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isFunction(input) {
        return typeof input === 'function'
      }

      /**
       * Returns true if the input value is an es2015 `class`.
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isClass(input) {
        if (isFunction(input)) {
          return /^class /.test(Function.prototype.toString.call(input))
        } else {
          return false
        }
      }

      /**
       * Returns true if the input is a string, number, symbol, boolean, null or undefined value.
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isPrimitive(input) {
        if (input === null) return true
        switch (typeof input) {
          case 'string':
          case 'number':
          case 'symbol':
          case 'undefined':
          case 'boolean':
            return true
          default:
            return false
        }
      }

      /**
       * Returns true if the input is a Promise.
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isPromise(input) {
        if (input) {
          var isPromise = isDefined(Promise) && input instanceof Promise
          var isThenable = input.then && typeof input.then === 'function'
          return isPromise || isThenable ? true : false
        } else {
          return false
        }
      }

      /**
       * Returns true if the input is an iterable (`Map`, `Set`, `Array` etc.).
       * @param {*} - the input to test
       * @returns {boolean}
       * @static
       */
      function isIterable(input) {
        if (input === null || !isDefined(input)) {
          return false
        } else {
          return typeof input[Symbol.iterator] === 'function'
        }
      }

      /***/
    },

    /***/ 9046: /***/ (__unused_webpack_module, exports) => {
      'use strict'

      exports.E = function (fn) {
        return Object.defineProperty(
          function () {
            if (typeof arguments[arguments.length - 1] === 'function')
              fn.apply(this, arguments)
            else {
              return new Promise((resolve, reject) => {
                arguments[arguments.length] = (err, res) => {
                  if (err) return reject(err)
                  resolve(res)
                }
                arguments.length++
                fn.apply(this, arguments)
              })
            }
          },
          'name',
          { value: fn.name }
        )
      }

      exports.p = function (fn) {
        return Object.defineProperty(
          function () {
            const cb = arguments[arguments.length - 1]
            if (typeof cb !== 'function') return fn.apply(this, arguments)
            else fn.apply(this, arguments).then((r) => cb(null, r), cb)
          },
          'name',
          { value: fn.name }
        )
      }

      /***/
    },

    /***/ 6015: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      'use strict'

      const os = __nccwpck_require__(2087)
      const t = __nccwpck_require__(8652)

      /**
       * @module wordwrapjs
       */

      const re = {
        chunk: /[^\s-]+?-\b|\S+|\s+|\r\n?|\n/g,
        ansiEscapeSequence: /\u001b.*?m/g,
      }

      /**
       * @alias module:wordwrapjs
       * @typicalname wordwrap
       */
      class WordWrap {
        constructor(text, options) {
          options = options || {}
          if (!t.isDefined(text)) text = ''

          this._lines = String(text).split(/\r\n|\n/g)
          this.options = options
          this.options.width = options.width === undefined ? 30 : options.width
        }

        lines() {
          const flatten = __nccwpck_require__(5229)

          /* trim each line of the supplied text */
          return (
            this._lines
              .map(trimLine.bind(this))

              /* split each line into an array of chunks, else mark it empty */
              .map((line) => line.match(re.chunk) || ['~~empty~~'])

              /* optionally, break each word on the line into pieces */
              .map((lineWords) => {
                if (this.options.break) {
                  return lineWords.map(breakWord.bind(this))
                } else {
                  return lineWords
                }
              })
              .map((lineWords) => lineWords.reduce(flatten, []))

              /* transforming the line of words to one or more new lines wrapped to size */
              .map((lineWords) => {
                return lineWords.reduce(
                  (lines, word) => {
                    let currentLine = lines[lines.length - 1]
                    if (
                      replaceAnsi(word).length +
                        replaceAnsi(currentLine).length >
                      this.options.width
                    ) {
                      lines.push(word)
                    } else {
                      lines[lines.length - 1] += word
                    }
                    return lines
                  },
                  ['']
                )
              })
              .reduce(flatten, [])

              /* trim the wrapped lines */
              .map(trimLine.bind(this))

              /* filter out empty lines */
              .filter((line) => line.trim())

              /* restore the user's original empty lines */
              .map((line) => line.replace('~~empty~~', ''))
          )
        }

        wrap() {
          return this.lines().join(os.EOL)
        }

        toString() {
          return this.wrap()
        }

        /**
         * @param {string} - the input text to wrap
         * @param [options] {object} - optional configuration
         * @param [options.width] {number} - the max column width in characters (defaults to 30).
         * @param [options.break] {boolean} - if true, words exceeding the specified `width` will be forcefully broken
         * @param [options.noTrim] {boolean} - By default, each line output is trimmed. If `noTrim` is set, no line-trimming occurs - all whitespace from the input text is left in.
         * @return {string}
         */
        static wrap(text, options) {
          const block = new this(text, options)
          return block.wrap()
        }

        /**
         * Wraps the input text, returning an array of strings (lines).
         * @param {string} - input text
         * @param {object} - Accepts same options as constructor.
         */
        static lines(text, options) {
          const block = new this(text, options)
          return block.lines()
        }

        /**
         * Returns true if the input text would be wrapped if passed into `.wrap()`.
         * @param {string} - input text
         * @return {boolean}
         */
        static isWrappable(text) {
          if (t.isDefined(text)) {
            text = String(text)
            var matches = text.match(re.chunk)
            return matches ? matches.length > 1 : false
          }
        }

        /**
         * Splits the input text into an array of words and whitespace.
         * @param {string} - input text
         * @returns {string[]}
         */
        static getChunks(text) {
          return text.match(re.chunk) || []
        }
      }

      function trimLine(line) {
        return this.options.noTrim ? line : line.trim()
      }

      function replaceAnsi(string) {
        return string.replace(re.ansiEscapeSequence, '')
      }

      /* break a word into several pieces */
      function breakWord(word) {
        if (replaceAnsi(word).length > this.options.width) {
          const letters = word.split('')
          let piece
          const pieces = []
          while ((piece = letters.splice(0, this.options.width)).length) {
            pieces.push(piece.join(''))
          }
          return pieces
        } else {
          return word
        }
      }

      module.exports = WordWrap

      /***/
    },

    /***/ 5553: /***/ (
      module,
      __unused_webpack_exports,
      __nccwpck_require__
    ) => {
      module.exports = require(__nccwpck_require__.ab +
        'build/Release/nodegit.node')

      /***/
    },

    /***/ 2987: /***/ (module) => {
      module.exports = eval('require')('../build/Debug/nodegit.node')

      /***/
    },

    /***/ 8115: /***/ (module) => {
      'use strict'
      module.exports = { version: '0.27.0' }

      /***/
    },

    /***/ 2357: /***/ (module) => {
      'use strict'
      module.exports = require('assert')

      /***/
    },

    /***/ 3129: /***/ (module) => {
      'use strict'
      module.exports = require('child_process')

      /***/
    },

    /***/ 7619: /***/ (module) => {
      'use strict'
      module.exports = require('constants')

      /***/
    },

    /***/ 6417: /***/ (module) => {
      'use strict'
      module.exports = require('crypto')

      /***/
    },

    /***/ 5747: /***/ (module) => {
      'use strict'
      module.exports = require('fs')

      /***/
    },

    /***/ 2087: /***/ (module) => {
      'use strict'
      module.exports = require('os')

      /***/
    },

    /***/ 5622: /***/ (module) => {
      'use strict'
      module.exports = require('path')

      /***/
    },

    /***/ 1058: /***/ (module) => {
      'use strict'
      module.exports = require('readline')

      /***/
    },

    /***/ 2413: /***/ (module) => {
      'use strict'
      module.exports = require('stream')

      /***/
    },

    /***/ 1669: /***/ (module) => {
      'use strict'
      module.exports = require('util')

      /***/
    },

    /******/
  } // The module cache
  /************************************************************************/
  /******/ /******/ var __webpack_module_cache__ = {} // The require function
  /******/
  /******/ /******/ function __nccwpck_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ if (__webpack_module_cache__[moduleId]) {
      /******/ return __webpack_module_cache__[moduleId].exports
      /******/
    } // Create a new module (and put it into the cache)
    /******/ /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ id: moduleId,
      /******/ loaded: false,
      /******/ exports: {},
      /******/
    }) // Execute the module function
    /******/
    /******/ /******/ var threw = true
    /******/ try {
      /******/ __webpack_modules__[moduleId].call(
        module.exports,
        module,
        module.exports,
        __nccwpck_require__
      )
      /******/ threw = false
      /******/
    } finally {
      /******/ if (threw) delete __webpack_module_cache__[moduleId]
      /******/
    } // Flag the module as loaded
    /******/
    /******/ /******/ module.loaded = true // Return the exports of the module
    /******/
    /******/ /******/ return module.exports
    /******/
  } /* webpack/runtime/node module decorator */
  /******/
  /************************************************************************/
  /******/ /******/ ;(() => {
    /******/ __nccwpck_require__.nmd = (module) => {
      /******/ module.paths = []
      /******/ if (!module.children) module.children = []
      /******/ return module
      /******/
    }
    /******/
  })() /* webpack/runtime/compat */
  /******/
  /******/ /******/
  /******/ __nccwpck_require__.ab =
    __dirname +
    '/' /************************************************************************/ // module exports must be returned from runtime so entry inlining is disabled // startup // Load entry module and return exports
  /******/ /******/ /******/ /******/ return __nccwpck_require__(2504)
  /******/
})()
